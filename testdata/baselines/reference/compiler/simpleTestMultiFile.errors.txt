/lib/lib.decorators.d.ts(22,5): error TS2300: Duplicate identifier 'ClassMemberDecoratorContext'.
/lib/lib.decorators.d.ts(32,5): error TS2300: Duplicate identifier 'DecoratorContext'.
/lib/lib.decorators.d.ts(36,5): error TS2300: Duplicate identifier 'DecoratorMetadataObject'.
/lib/lib.decorators.d.ts(38,5): error TS2300: Duplicate identifier 'DecoratorMetadata'.
/lib/lib.decorators.legacy.d.ts(19,13): error TS2300: Duplicate identifier 'ClassDecorator'.
/lib/lib.decorators.legacy.d.ts(20,13): error TS2300: Duplicate identifier 'PropertyDecorator'.
/lib/lib.decorators.legacy.d.ts(21,13): error TS2300: Duplicate identifier 'MethodDecorator'.
/lib/lib.decorators.legacy.d.ts(22,13): error TS2300: Duplicate identifier 'ParameterDecorator'.
/lib/lib.dom.d.ts(2365,5): error TS2300: Duplicate identifier 'NodeFilter'.
/lib/lib.dom.d.ts(2367,12): error TS2300: Duplicate identifier 'NodeFilter'.
/lib/lib.dom.d.ts(2386,5): error TS2300: Duplicate identifier 'XPathNSResolver'.
/lib/lib.dom.d.ts(2647,5): error TS2717: Subsequent property declarations must have the same type.  Property '"remove"' must be of type 'Event', but here has type 'AnimationPlaybackEvent'.
/lib/lib.dom.d.ts(2665,5): error TS2717: Subsequent property declarations must have the same type.  Property 'onremove' must be of type '(ev: Event) => any', but here has type '(ev: AnimationPlaybackEvent) => any'.
/lib/lib.dom.d.ts(3214,5): error TS2717: Subsequent property declarations must have the same type.  Property '"processorerror"' must be of type 'Event', but here has type 'ErrorEvent'.
/lib/lib.dom.d.ts(3224,5): error TS2717: Subsequent property declarations must have the same type.  Property 'onprocessorerror' must be of type '(ev: Event) => any', but here has type '(ev: ErrorEvent) => any'.
/lib/lib.dom.d.ts(6576,5): error TS2300: Duplicate identifier 'SVGMatrix'.
/lib/lib.dom.d.ts(6577,12): error TS2300: Duplicate identifier 'SVGMatrix'.
/lib/lib.dom.d.ts(6579,5): error TS2300: Duplicate identifier 'WebKitCSSMatrix'.
/lib/lib.dom.d.ts(6580,12): error TS2300: Duplicate identifier 'WebKitCSSMatrix'.
/lib/lib.dom.d.ts(6706,5): error TS2300: Duplicate identifier 'SVGPoint'.
/lib/lib.dom.d.ts(6707,12): error TS2300: Duplicate identifier 'SVGPoint'.
/lib/lib.dom.d.ts(6763,5): error TS2300: Duplicate identifier 'SVGRect'.
/lib/lib.dom.d.ts(6764,12): error TS2300: Duplicate identifier 'SVGRect'.
/lib/lib.dom.d.ts(7429,8): error TS2300: Duplicate identifier 'location'.
/lib/lib.dom.d.ts(7430,8): error TS2300: Duplicate identifier 'location'.
/lib/lib.dom.d.ts(9048,5): error TS2717: Subsequent property declarations must have the same type.  Property '"loading"' must be of type 'Event', but here has type 'FontFaceSetLoadEvent'.
/lib/lib.dom.d.ts(9049,5): error TS2717: Subsequent property declarations must have the same type.  Property '"loadingdone"' must be of type 'Event', but here has type 'FontFaceSetLoadEvent'.
/lib/lib.dom.d.ts(9050,5): error TS2717: Subsequent property declarations must have the same type.  Property '"loadingerror"' must be of type 'Event', but here has type 'FontFaceSetLoadEvent'.
/lib/lib.dom.d.ts(9056,5): error TS2717: Subsequent property declarations must have the same type.  Property 'onloading' must be of type '(ev: Event) => any', but here has type '(ev: FontFaceSetLoadEvent) => any'.
/lib/lib.dom.d.ts(9058,5): error TS2717: Subsequent property declarations must have the same type.  Property 'onloadingdone' must be of type '(ev: Event) => any', but here has type '(ev: FontFaceSetLoadEvent) => any'.
/lib/lib.dom.d.ts(9060,5): error TS2717: Subsequent property declarations must have the same type.  Property 'onloadingerror' must be of type '(ev: Event) => any', but here has type '(ev: FontFaceSetLoadEvent) => any'.
/lib/lib.dom.d.ts(9076,13): error TS2403: Subsequent variable declarations must have the same type.  Variable 'FontFaceSet' must be of type '{ new(initialFaces: FontFace[]): FontFaceSet, prototype: FontFaceSet }', but here has type '{ new(): FontFaceSet, prototype: FontFaceSet }'.
/lib/lib.dom.d.ts(13869,5): error TS2717: Subsequent property declarations must have the same type.  Property '"enterpictureinpicture"' must be of type 'Event', but here has type 'PictureInPictureEvent'.
/lib/lib.dom.d.ts(13870,5): error TS2717: Subsequent property declarations must have the same type.  Property '"leavepictureinpicture"' must be of type 'Event', but here has type 'PictureInPictureEvent'.
/lib/lib.dom.d.ts(13888,5): error TS2717: Subsequent property declarations must have the same type.  Property 'onenterpictureinpicture' must be of type '(ev: Event) => any', but here has type '(ev: PictureInPictureEvent) => any'.
/lib/lib.dom.d.ts(13890,5): error TS2717: Subsequent property declarations must have the same type.  Property 'onleavepictureinpicture' must be of type '(ev: Event) => any', but here has type '(ev: PictureInPictureEvent) => any'.
/lib/lib.dom.d.ts(14918,13): error TS2403: Subsequent variable declarations must have the same type.  Variable 'IntersectionObserverEntry' must be of type '{ new(intersectionObserverEntryInit: IntersectionObserverEntryInit): IntersectionObserverEntry, prototype: IntersectionObserverEntry }', but here has type '{ new(): IntersectionObserverEntry, prototype: IntersectionObserverEntry }'.
/lib/lib.dom.d.ts(15181,5): error TS2717: Subsequent property declarations must have the same type.  Property '"statechange"' must be of type 'Event', but here has type 'MIDIConnectionEvent'.
/lib/lib.dom.d.ts(15193,5): error TS2717: Subsequent property declarations must have the same type.  Property 'onstatechange' must be of type '(ev: Event) => any', but here has type '(ev: MIDIConnectionEvent) => any'.
/lib/lib.dom.d.ts(15704,5): error TS2717: Subsequent property declarations must have the same type.  Property '"error"' must be of type 'Event', but here has type 'ErrorEvent'.
/lib/lib.dom.d.ts(15720,5): error TS2717: Subsequent property declarations must have the same type.  Property 'onerror' must be of type '(ev: Event) => any', but here has type '(ev: ErrorEvent) => any'.
/lib/lib.dom.d.ts(17416,5): error TS2717: Subsequent property declarations must have the same type.  Property '"paymentmethodchange"' must be of type 'Event', but here has type 'PaymentMethodChangeEvent'.
/lib/lib.dom.d.ts(17431,5): error TS2717: Subsequent property declarations must have the same type.  Property 'onpaymentmethodchange' must be of type '(ev: Event) => any', but here has type '(ev: PaymentMethodChangeEvent) => any'.
/lib/lib.dom.d.ts(17474,13): error TS2403: Subsequent variable declarations must have the same type.  Variable 'PaymentRequest' must be of type '{ new(methodData: PaymentMethodData[], details: PaymentDetailsInit): PaymentRequest, prototype: PaymentRequest }', but here has type '{ new(methodData: PaymentMethodData[], details: PaymentDetailsInit, options?: PaymentOptions): PaymentRequest, prototype: PaymentRequest }'.
/lib/lib.dom.d.ts(18295,13): error TS2403: Subsequent variable declarations must have the same type.  Variable 'PublicKeyCredential' must be of type '{ new(): PublicKeyCredential, prototype: PublicKeyCredential, isConditionalMediationAvailable: () => Promise<boolean>, isUserVerifyingPlatformAuthenticatorAvailable: () => Promise<boolean> }', but here has type '{ new(): PublicKeyCredential, prototype: PublicKeyCredential, isConditionalMediationAvailable: () => Promise<boolean>, isUserVerifyingPlatformAuthenticatorAvailable: () => Promise<boolean>, parseCreationOptionsFromJSON: (options: PublicKeyCredentialCreationOptionsJSON) => PublicKeyCredentialCreationOptions, parseRequestOptionsFromJSON: (options: PublicKeyCredentialRequestOptionsJSON) => PublicKeyCredentialRequestOptions }'.
/lib/lib.dom.d.ts(18430,5): error TS2717: Subsequent property declarations must have the same type.  Property '"error"' must be of type 'Event', but here has type 'RTCErrorEvent'.
/lib/lib.dom.d.ts(18460,5): error TS2717: Subsequent property declarations must have the same type.  Property 'onerror' must be of type '(ev: Event) => any', but here has type '(ev: RTCErrorEvent) => any'.
/lib/lib.dom.d.ts(18501,5): error TS2717: Subsequent property declarations must have the same type.  Property '"error"' must be of type 'Event', but here has type 'RTCErrorEvent'.
/lib/lib.dom.d.ts(18510,5): error TS2717: Subsequent property declarations must have the same type.  Property 'onerror' must be of type '(ev: Event) => any', but here has type '(ev: RTCErrorEvent) => any'.
/lib/lib.dom.d.ts(19136,13): error TS2403: Subsequent variable declarations must have the same type.  Variable 'ReadableStreamBYOBReader' must be of type '{ new(stream: ReadableStream<any>): ReadableStreamBYOBReader, prototype: ReadableStreamBYOBReader }', but here has type '{ new(stream: ReadableStream<Uint8Array<ArrayBufferLike>>): ReadableStreamBYOBReader, prototype: ReadableStreamBYOBReader }'.
/lib/lib.dom.d.ts(23262,5): error TS2300: Duplicate identifier 'webkitURL'.
/lib/lib.dom.d.ts(23263,12): error TS2300: Duplicate identifier 'webkitURL'.
/lib/lib.dom.d.ts(26328,8): error TS2300: Duplicate identifier 'location'.
/lib/lib.dom.d.ts(26329,8): error TS2300: Duplicate identifier 'location'.
/lib/lib.dom.d.ts(27465,9): error TS2300: Duplicate identifier 'ImportExportKind'.
/lib/lib.dom.d.ts(27466,9): error TS2300: Duplicate identifier 'TableKind'.
/lib/lib.dom.d.ts(27467,9): error TS2300: Duplicate identifier 'ExportValue'.
/lib/lib.dom.d.ts(27468,9): error TS2300: Duplicate identifier 'Exports'.
/lib/lib.dom.d.ts(27469,9): error TS2300: Duplicate identifier 'ImportValue'.
/lib/lib.dom.d.ts(27470,9): error TS2300: Duplicate identifier 'Imports'.
/lib/lib.dom.d.ts(27471,9): error TS2300: Duplicate identifier 'ModuleImports'.
/lib/lib.dom.d.ts(27472,9): error TS2300: Duplicate identifier 'ValueType'.
/lib/lib.dom.d.ts(27913,5): error TS2300: Duplicate identifier 'ElementTagNameMap'.
/lib/lib.dom.d.ts(27986,14): error TS2451: Cannot redeclare block-scoped variable 'name'.
/lib/lib.dom.d.ts(28725,5): error TS2300: Duplicate identifier 'AlgorithmIdentifier'.
/lib/lib.dom.d.ts(28726,5): error TS2300: Duplicate identifier 'AllowSharedBufferSource'.
/lib/lib.dom.d.ts(28727,5): error TS2300: Duplicate identifier 'AutoFill'.
/lib/lib.dom.d.ts(28728,5): error TS2300: Duplicate identifier 'AutoFillField'.
/lib/lib.dom.d.ts(28729,5): error TS2300: Duplicate identifier 'AutoFillSection'.
/lib/lib.dom.d.ts(28731,5): error TS2300: Duplicate identifier 'BigInteger'.
/lib/lib.dom.d.ts(28732,5): error TS2300: Duplicate identifier 'BlobPart'.
/lib/lib.dom.d.ts(28733,5): error TS2300: Duplicate identifier 'BodyInit'.
/lib/lib.dom.d.ts(28734,5): error TS2300: Duplicate identifier 'BufferSource'.
/lib/lib.dom.d.ts(28735,5): error TS2300: Duplicate identifier 'COSEAlgorithmIdentifier'.
/lib/lib.dom.d.ts(28736,5): error TS2300: Duplicate identifier 'CSSKeywordish'.
/lib/lib.dom.d.ts(28737,5): error TS2300: Duplicate identifier 'CSSNumberish'.
/lib/lib.dom.d.ts(28738,5): error TS2300: Duplicate identifier 'CSSPerspectiveValue'.
/lib/lib.dom.d.ts(28739,5): error TS2300: Duplicate identifier 'CSSUnparsedSegment'.
/lib/lib.dom.d.ts(28740,5): error TS2300: Duplicate identifier 'CanvasImageSource'.
/lib/lib.dom.d.ts(28741,5): error TS2300: Duplicate identifier 'ClipboardItemData'.
/lib/lib.dom.d.ts(28742,5): error TS2300: Duplicate identifier 'ClipboardItems'.
/lib/lib.dom.d.ts(28743,5): error TS2300: Duplicate identifier 'ConstrainBoolean'.
/lib/lib.dom.d.ts(28744,5): error TS2300: Duplicate identifier 'ConstrainDOMString'.
/lib/lib.dom.d.ts(28745,5): error TS2300: Duplicate identifier 'ConstrainDouble'.
/lib/lib.dom.d.ts(28746,5): error TS2300: Duplicate identifier 'ConstrainULong'.
/lib/lib.dom.d.ts(28747,5): error TS2300: Duplicate identifier 'DOMHighResTimeStamp'.
/lib/lib.dom.d.ts(28748,5): error TS2300: Duplicate identifier 'EpochTimeStamp'.
/lib/lib.dom.d.ts(28749,5): error TS2300: Duplicate identifier 'EventListenerOrEventListenerObject'.
/lib/lib.dom.d.ts(28750,5): error TS2300: Duplicate identifier 'FileSystemWriteChunkType'.
/lib/lib.dom.d.ts(28751,5): error TS2300: Duplicate identifier 'Float32List'.
/lib/lib.dom.d.ts(28752,5): error TS2300: Duplicate identifier 'FormDataEntryValue'.
/lib/lib.dom.d.ts(28753,5): error TS2300: Duplicate identifier 'GLbitfield'.
/lib/lib.dom.d.ts(28754,5): error TS2300: Duplicate identifier 'GLboolean'.
/lib/lib.dom.d.ts(28755,5): error TS2300: Duplicate identifier 'GLclampf'.
/lib/lib.dom.d.ts(28756,5): error TS2300: Duplicate identifier 'GLenum'.
/lib/lib.dom.d.ts(28757,5): error TS2300: Duplicate identifier 'GLfloat'.
/lib/lib.dom.d.ts(28758,5): error TS2300: Duplicate identifier 'GLint'.
/lib/lib.dom.d.ts(28759,5): error TS2300: Duplicate identifier 'GLint64'.
/lib/lib.dom.d.ts(28760,5): error TS2300: Duplicate identifier 'GLintptr'.
/lib/lib.dom.d.ts(28761,5): error TS2300: Duplicate identifier 'GLsizei'.
/lib/lib.dom.d.ts(28762,5): error TS2300: Duplicate identifier 'GLsizeiptr'.
/lib/lib.dom.d.ts(28763,5): error TS2300: Duplicate identifier 'GLuint'.
/lib/lib.dom.d.ts(28764,5): error TS2300: Duplicate identifier 'GLuint64'.
/lib/lib.dom.d.ts(28765,5): error TS2300: Duplicate identifier 'HTMLOrSVGImageElement'.
/lib/lib.dom.d.ts(28766,5): error TS2300: Duplicate identifier 'HTMLOrSVGScriptElement'.
/lib/lib.dom.d.ts(28767,5): error TS2300: Duplicate identifier 'HashAlgorithmIdentifier'.
/lib/lib.dom.d.ts(28768,5): error TS2300: Duplicate identifier 'HeadersInit'.
/lib/lib.dom.d.ts(28769,5): error TS2300: Duplicate identifier 'IDBValidKey'.
/lib/lib.dom.d.ts(28770,5): error TS2300: Duplicate identifier 'ImageBitmapSource'.
/lib/lib.dom.d.ts(28771,5): error TS2300: Duplicate identifier 'Int32List'.
/lib/lib.dom.d.ts(28772,5): error TS2300: Duplicate identifier 'LineAndPositionSetting'.
/lib/lib.dom.d.ts(28773,5): error TS2300: Duplicate identifier 'MediaProvider'.
/lib/lib.dom.d.ts(28774,5): error TS2300: Duplicate identifier 'MessageEventSource'.
/lib/lib.dom.d.ts(28775,5): error TS2300: Duplicate identifier 'MutationRecordType'.
/lib/lib.dom.d.ts(28776,5): error TS2300: Duplicate identifier 'NamedCurve'.
/lib/lib.dom.d.ts(28777,5): error TS2300: Duplicate identifier 'OffscreenRenderingContext'.
/lib/lib.dom.d.ts(28778,5): error TS2300: Duplicate identifier 'OnBeforeUnloadEventHandler'.
/lib/lib.dom.d.ts(28779,5): error TS2300: Duplicate identifier 'OnErrorEventHandler'.
/lib/lib.dom.d.ts(28780,5): error TS2300: Duplicate identifier 'OptionalPostfixToken'.
/lib/lib.dom.d.ts(28781,5): error TS2300: Duplicate identifier 'OptionalPrefixToken'.
/lib/lib.dom.d.ts(28782,5): error TS2300: Duplicate identifier 'PerformanceEntryList'.
/lib/lib.dom.d.ts(28784,5): error TS2300: Duplicate identifier 'RTCRtpTransform'.
/lib/lib.dom.d.ts(28785,5): error TS2300: Duplicate identifier 'ReadableStreamController'.
/lib/lib.dom.d.ts(28786,5): error TS2300: Duplicate identifier 'ReadableStreamReadResult'.
/lib/lib.dom.d.ts(28787,5): error TS2300: Duplicate identifier 'ReadableStreamReader'.
/lib/lib.dom.d.ts(28788,5): error TS2300: Duplicate identifier 'RenderingContext'.
/lib/lib.dom.d.ts(28789,5): error TS2300: Duplicate identifier 'ReportList'.
/lib/lib.dom.d.ts(28790,5): error TS2300: Duplicate identifier 'RequestInfo'.
/lib/lib.dom.d.ts(28791,5): error TS2300: Duplicate identifier 'TexImageSource'.
/lib/lib.dom.d.ts(28792,5): error TS2300: Duplicate identifier 'TimerHandler'.
/lib/lib.dom.d.ts(28793,5): error TS2300: Duplicate identifier 'Transferable'.
/lib/lib.dom.d.ts(28794,5): error TS2300: Duplicate identifier 'Uint32List'.
/lib/lib.dom.d.ts(28795,5): error TS2300: Duplicate identifier 'VibratePattern'.
/lib/lib.dom.d.ts(28796,5): error TS2300: Duplicate identifier 'WindowProxy'.
/lib/lib.dom.d.ts(28797,5): error TS2300: Duplicate identifier 'XMLHttpRequestBodyInit'.
/lib/lib.dom.d.ts(28798,5): error TS2300: Duplicate identifier 'AlignSetting'.
/lib/lib.dom.d.ts(28799,5): error TS2300: Duplicate identifier 'AlphaOption'.
/lib/lib.dom.d.ts(28800,5): error TS2300: Duplicate identifier 'AnimationPlayState'.
/lib/lib.dom.d.ts(28801,5): error TS2300: Duplicate identifier 'AnimationReplaceState'.
/lib/lib.dom.d.ts(28802,5): error TS2300: Duplicate identifier 'AppendMode'.
/lib/lib.dom.d.ts(28803,5): error TS2300: Duplicate identifier 'AttestationConveyancePreference'.
/lib/lib.dom.d.ts(28804,5): error TS2300: Duplicate identifier 'AudioContextLatencyCategory'.
/lib/lib.dom.d.ts(28805,5): error TS2300: Duplicate identifier 'AudioContextState'.
/lib/lib.dom.d.ts(28806,5): error TS2300: Duplicate identifier 'AudioSampleFormat'.
/lib/lib.dom.d.ts(28807,5): error TS2300: Duplicate identifier 'AuthenticatorAttachment'.
/lib/lib.dom.d.ts(28808,5): error TS2300: Duplicate identifier 'AuthenticatorTransport'.
/lib/lib.dom.d.ts(28809,5): error TS2300: Duplicate identifier 'AutoFillAddressKind'.
/lib/lib.dom.d.ts(28810,5): error TS2300: Duplicate identifier 'AutoFillBase'.
/lib/lib.dom.d.ts(28811,5): error TS2300: Duplicate identifier 'AutoFillContactField'.
/lib/lib.dom.d.ts(28812,5): error TS2300: Duplicate identifier 'AutoFillContactKind'.
/lib/lib.dom.d.ts(28813,5): error TS2300: Duplicate identifier 'AutoFillCredentialField'.
/lib/lib.dom.d.ts(28814,5): error TS2300: Duplicate identifier 'AutoFillNormalField'.
/lib/lib.dom.d.ts(28815,5): error TS2300: Duplicate identifier 'AutoKeyword'.
/lib/lib.dom.d.ts(28816,5): error TS2300: Duplicate identifier 'AutomationRate'.
/lib/lib.dom.d.ts(28817,5): error TS2300: Duplicate identifier 'AvcBitstreamFormat'.
/lib/lib.dom.d.ts(28818,5): error TS2300: Duplicate identifier 'BinaryType'.
/lib/lib.dom.d.ts(28819,5): error TS2300: Duplicate identifier 'BiquadFilterType'.
/lib/lib.dom.d.ts(28820,5): error TS2300: Duplicate identifier 'BitrateMode'.
/lib/lib.dom.d.ts(28821,5): error TS2300: Duplicate identifier 'CSSMathOperator'.
/lib/lib.dom.d.ts(28822,5): error TS2300: Duplicate identifier 'CSSNumericBaseType'.
/lib/lib.dom.d.ts(28823,5): error TS2300: Duplicate identifier 'CanPlayTypeResult'.
/lib/lib.dom.d.ts(28824,5): error TS2300: Duplicate identifier 'CanvasDirection'.
/lib/lib.dom.d.ts(28825,5): error TS2300: Duplicate identifier 'CanvasFillRule'.
/lib/lib.dom.d.ts(28826,5): error TS2300: Duplicate identifier 'CanvasFontKerning'.
/lib/lib.dom.d.ts(28827,5): error TS2300: Duplicate identifier 'CanvasFontStretch'.
/lib/lib.dom.d.ts(28828,5): error TS2300: Duplicate identifier 'CanvasFontVariantCaps'.
/lib/lib.dom.d.ts(28829,5): error TS2300: Duplicate identifier 'CanvasLineCap'.
/lib/lib.dom.d.ts(28830,5): error TS2300: Duplicate identifier 'CanvasLineJoin'.
/lib/lib.dom.d.ts(28831,5): error TS2300: Duplicate identifier 'CanvasTextAlign'.
/lib/lib.dom.d.ts(28832,5): error TS2300: Duplicate identifier 'CanvasTextBaseline'.
/lib/lib.dom.d.ts(28833,5): error TS2300: Duplicate identifier 'CanvasTextRendering'.
/lib/lib.dom.d.ts(28834,5): error TS2300: Duplicate identifier 'ChannelCountMode'.
/lib/lib.dom.d.ts(28835,5): error TS2300: Duplicate identifier 'ChannelInterpretation'.
/lib/lib.dom.d.ts(28836,5): error TS2300: Duplicate identifier 'ClientTypes'.
/lib/lib.dom.d.ts(28837,5): error TS2300: Duplicate identifier 'CodecState'.
/lib/lib.dom.d.ts(28838,5): error TS2300: Duplicate identifier 'ColorGamut'.
/lib/lib.dom.d.ts(28839,5): error TS2300: Duplicate identifier 'ColorSpaceConversion'.
/lib/lib.dom.d.ts(28840,5): error TS2300: Duplicate identifier 'CompositeOperation'.
/lib/lib.dom.d.ts(28841,5): error TS2300: Duplicate identifier 'CompositeOperationOrAuto'.
/lib/lib.dom.d.ts(28842,5): error TS2300: Duplicate identifier 'CompressionFormat'.
/lib/lib.dom.d.ts(28843,5): error TS2300: Duplicate identifier 'CredentialMediationRequirement'.
/lib/lib.dom.d.ts(28844,5): error TS2300: Duplicate identifier 'DOMParserSupportedType'.
/lib/lib.dom.d.ts(28845,5): error TS2300: Duplicate identifier 'DirectionSetting'.
/lib/lib.dom.d.ts(28846,5): error TS2300: Duplicate identifier 'DisplayCaptureSurfaceType'.
/lib/lib.dom.d.ts(28847,5): error TS2300: Duplicate identifier 'DistanceModelType'.
/lib/lib.dom.d.ts(28848,5): error TS2300: Duplicate identifier 'DocumentReadyState'.
/lib/lib.dom.d.ts(28849,5): error TS2300: Duplicate identifier 'DocumentVisibilityState'.
/lib/lib.dom.d.ts(28850,5): error TS2300: Duplicate identifier 'EncodedAudioChunkType'.
/lib/lib.dom.d.ts(28851,5): error TS2300: Duplicate identifier 'EncodedVideoChunkType'.
/lib/lib.dom.d.ts(28852,5): error TS2300: Duplicate identifier 'EndOfStreamError'.
/lib/lib.dom.d.ts(28853,5): error TS2300: Duplicate identifier 'EndingType'.
/lib/lib.dom.d.ts(28854,5): error TS2300: Duplicate identifier 'FileSystemHandleKind'.
/lib/lib.dom.d.ts(28855,5): error TS2300: Duplicate identifier 'FillMode'.
/lib/lib.dom.d.ts(28856,5): error TS2300: Duplicate identifier 'FontDisplay'.
/lib/lib.dom.d.ts(28857,5): error TS2300: Duplicate identifier 'FontFaceLoadStatus'.
/lib/lib.dom.d.ts(28858,5): error TS2300: Duplicate identifier 'FontFaceSetLoadStatus'.
/lib/lib.dom.d.ts(28859,5): error TS2300: Duplicate identifier 'FullscreenNavigationUI'.
/lib/lib.dom.d.ts(28860,5): error TS2300: Duplicate identifier 'GamepadHapticEffectType'.
/lib/lib.dom.d.ts(28861,5): error TS2300: Duplicate identifier 'GamepadHapticsResult'.
/lib/lib.dom.d.ts(28862,5): error TS2300: Duplicate identifier 'GamepadMappingType'.
/lib/lib.dom.d.ts(28863,5): error TS2300: Duplicate identifier 'GlobalCompositeOperation'.
/lib/lib.dom.d.ts(28864,5): error TS2300: Duplicate identifier 'HardwareAcceleration'.
/lib/lib.dom.d.ts(28865,5): error TS2300: Duplicate identifier 'HdrMetadataType'.
/lib/lib.dom.d.ts(28866,5): error TS2300: Duplicate identifier 'HighlightType'.
/lib/lib.dom.d.ts(28867,5): error TS2300: Duplicate identifier 'IDBCursorDirection'.
/lib/lib.dom.d.ts(28868,5): error TS2300: Duplicate identifier 'IDBRequestReadyState'.
/lib/lib.dom.d.ts(28869,5): error TS2300: Duplicate identifier 'IDBTransactionDurability'.
/lib/lib.dom.d.ts(28870,5): error TS2300: Duplicate identifier 'IDBTransactionMode'.
/lib/lib.dom.d.ts(28871,5): error TS2300: Duplicate identifier 'ImageOrientation'.
/lib/lib.dom.d.ts(28872,5): error TS2300: Duplicate identifier 'ImageSmoothingQuality'.
/lib/lib.dom.d.ts(28873,5): error TS2300: Duplicate identifier 'InsertPosition'.
/lib/lib.dom.d.ts(28874,5): error TS2300: Duplicate identifier 'IterationCompositeOperation'.
/lib/lib.dom.d.ts(28875,5): error TS2300: Duplicate identifier 'KeyFormat'.
/lib/lib.dom.d.ts(28876,5): error TS2300: Duplicate identifier 'KeyType'.
/lib/lib.dom.d.ts(28877,5): error TS2300: Duplicate identifier 'KeyUsage'.
/lib/lib.dom.d.ts(28878,5): error TS2300: Duplicate identifier 'LatencyMode'.
/lib/lib.dom.d.ts(28879,5): error TS2300: Duplicate identifier 'LineAlignSetting'.
/lib/lib.dom.d.ts(28880,5): error TS2300: Duplicate identifier 'LockMode'.
/lib/lib.dom.d.ts(28881,5): error TS2300: Duplicate identifier 'MIDIPortConnectionState'.
/lib/lib.dom.d.ts(28882,5): error TS2300: Duplicate identifier 'MIDIPortDeviceState'.
/lib/lib.dom.d.ts(28883,5): error TS2300: Duplicate identifier 'MIDIPortType'.
/lib/lib.dom.d.ts(28884,5): error TS2300: Duplicate identifier 'MediaDecodingType'.
/lib/lib.dom.d.ts(28885,5): error TS2300: Duplicate identifier 'MediaDeviceKind'.
/lib/lib.dom.d.ts(28886,5): error TS2300: Duplicate identifier 'MediaEncodingType'.
/lib/lib.dom.d.ts(28887,5): error TS2300: Duplicate identifier 'MediaKeyMessageType'.
/lib/lib.dom.d.ts(28888,5): error TS2300: Duplicate identifier 'MediaKeySessionClosedReason'.
/lib/lib.dom.d.ts(28889,5): error TS2300: Duplicate identifier 'MediaKeySessionType'.
/lib/lib.dom.d.ts(28890,5): error TS2300: Duplicate identifier 'MediaKeyStatus'.
/lib/lib.dom.d.ts(28891,5): error TS2300: Duplicate identifier 'MediaKeysRequirement'.
/lib/lib.dom.d.ts(28892,5): error TS2300: Duplicate identifier 'MediaSessionAction'.
/lib/lib.dom.d.ts(28893,5): error TS2300: Duplicate identifier 'MediaSessionPlaybackState'.
/lib/lib.dom.d.ts(28894,5): error TS2300: Duplicate identifier 'MediaStreamTrackState'.
/lib/lib.dom.d.ts(28895,5): error TS2300: Duplicate identifier 'NavigationTimingType'.
/lib/lib.dom.d.ts(28896,5): error TS2300: Duplicate identifier 'NotificationDirection'.
/lib/lib.dom.d.ts(28897,5): error TS2300: Duplicate identifier 'NotificationPermission'.
/lib/lib.dom.d.ts(28898,5): error TS2300: Duplicate identifier 'OffscreenRenderingContextId'.
/lib/lib.dom.d.ts(28899,5): error TS2300: Duplicate identifier 'OpusBitstreamFormat'.
/lib/lib.dom.d.ts(28900,5): error TS2300: Duplicate identifier 'OrientationType'.
/lib/lib.dom.d.ts(28901,5): error TS2300: Duplicate identifier 'OscillatorType'.
/lib/lib.dom.d.ts(28902,5): error TS2300: Duplicate identifier 'OverSampleType'.
/lib/lib.dom.d.ts(28903,5): error TS2300: Duplicate identifier 'PanningModelType'.
/lib/lib.dom.d.ts(28904,5): error TS2300: Duplicate identifier 'PaymentComplete'.
/lib/lib.dom.d.ts(28906,5): error TS2300: Duplicate identifier 'PermissionName'.
/lib/lib.dom.d.ts(28907,5): error TS2300: Duplicate identifier 'PermissionState'.
/lib/lib.dom.d.ts(28908,5): error TS2300: Duplicate identifier 'PlaybackDirection'.
/lib/lib.dom.d.ts(28909,5): error TS2300: Duplicate identifier 'PositionAlignSetting'.
/lib/lib.dom.d.ts(28910,5): error TS2300: Duplicate identifier 'PredefinedColorSpace'.
/lib/lib.dom.d.ts(28911,5): error TS2300: Duplicate identifier 'PremultiplyAlpha'.
/lib/lib.dom.d.ts(28912,5): error TS2300: Duplicate identifier 'PresentationStyle'.
/lib/lib.dom.d.ts(28913,5): error TS2300: Duplicate identifier 'PublicKeyCredentialType'.
/lib/lib.dom.d.ts(28914,5): error TS2300: Duplicate identifier 'PushEncryptionKeyName'.
/lib/lib.dom.d.ts(28915,5): error TS2300: Duplicate identifier 'RTCBundlePolicy'.
/lib/lib.dom.d.ts(28916,5): error TS2300: Duplicate identifier 'RTCDataChannelState'.
/lib/lib.dom.d.ts(28917,5): error TS2300: Duplicate identifier 'RTCDegradationPreference'.
/lib/lib.dom.d.ts(28918,5): error TS2300: Duplicate identifier 'RTCDtlsTransportState'.
/lib/lib.dom.d.ts(28919,5): error TS2300: Duplicate identifier 'RTCEncodedVideoFrameType'.
/lib/lib.dom.d.ts(28920,5): error TS2300: Duplicate identifier 'RTCErrorDetailType'.
/lib/lib.dom.d.ts(28921,5): error TS2300: Duplicate identifier 'RTCIceCandidateType'.
/lib/lib.dom.d.ts(28922,5): error TS2300: Duplicate identifier 'RTCIceComponent'.
/lib/lib.dom.d.ts(28923,5): error TS2300: Duplicate identifier 'RTCIceConnectionState'.
/lib/lib.dom.d.ts(28924,5): error TS2300: Duplicate identifier 'RTCIceGathererState'.
/lib/lib.dom.d.ts(28925,5): error TS2300: Duplicate identifier 'RTCIceGatheringState'.
/lib/lib.dom.d.ts(28926,5): error TS2300: Duplicate identifier 'RTCIceProtocol'.
/lib/lib.dom.d.ts(28927,5): error TS2300: Duplicate identifier 'RTCIceTcpCandidateType'.
/lib/lib.dom.d.ts(28928,5): error TS2300: Duplicate identifier 'RTCIceTransportPolicy'.
/lib/lib.dom.d.ts(28929,5): error TS2300: Duplicate identifier 'RTCIceTransportState'.
/lib/lib.dom.d.ts(28930,5): error TS2300: Duplicate identifier 'RTCPeerConnectionState'.
/lib/lib.dom.d.ts(28931,5): error TS2300: Duplicate identifier 'RTCPriorityType'.
/lib/lib.dom.d.ts(28932,5): error TS2300: Duplicate identifier 'RTCRtcpMuxPolicy'.
/lib/lib.dom.d.ts(28933,5): error TS2300: Duplicate identifier 'RTCRtpTransceiverDirection'.
/lib/lib.dom.d.ts(28934,5): error TS2300: Duplicate identifier 'RTCSctpTransportState'.
/lib/lib.dom.d.ts(28935,5): error TS2300: Duplicate identifier 'RTCSdpType'.
/lib/lib.dom.d.ts(28936,5): error TS2300: Duplicate identifier 'RTCSignalingState'.
/lib/lib.dom.d.ts(28937,5): error TS2300: Duplicate identifier 'RTCStatsIceCandidatePairState'.
/lib/lib.dom.d.ts(28938,5): error TS2300: Duplicate identifier 'RTCStatsType'.
/lib/lib.dom.d.ts(28939,5): error TS2300: Duplicate identifier 'ReadableStreamReaderMode'.
/lib/lib.dom.d.ts(28940,5): error TS2300: Duplicate identifier 'ReadableStreamType'.
/lib/lib.dom.d.ts(28941,5): error TS2300: Duplicate identifier 'ReadyState'.
/lib/lib.dom.d.ts(28942,5): error TS2300: Duplicate identifier 'RecordingState'.
/lib/lib.dom.d.ts(28943,5): error TS2300: Duplicate identifier 'ReferrerPolicy'.
/lib/lib.dom.d.ts(28944,5): error TS2300: Duplicate identifier 'RemotePlaybackState'.
/lib/lib.dom.d.ts(28945,5): error TS2300: Duplicate identifier 'RequestCache'.
/lib/lib.dom.d.ts(28946,5): error TS2300: Duplicate identifier 'RequestCredentials'.
/lib/lib.dom.d.ts(28947,5): error TS2300: Duplicate identifier 'RequestDestination'.
/lib/lib.dom.d.ts(28948,5): error TS2300: Duplicate identifier 'RequestMode'.
/lib/lib.dom.d.ts(28949,5): error TS2300: Duplicate identifier 'RequestPriority'.
/lib/lib.dom.d.ts(28950,5): error TS2300: Duplicate identifier 'RequestRedirect'.
/lib/lib.dom.d.ts(28951,5): error TS2300: Duplicate identifier 'ResidentKeyRequirement'.
/lib/lib.dom.d.ts(28952,5): error TS2300: Duplicate identifier 'ResizeObserverBoxOptions'.
/lib/lib.dom.d.ts(28953,5): error TS2300: Duplicate identifier 'ResizeQuality'.
/lib/lib.dom.d.ts(28954,5): error TS2300: Duplicate identifier 'ResponseType'.
/lib/lib.dom.d.ts(28955,5): error TS2300: Duplicate identifier 'ScrollBehavior'.
/lib/lib.dom.d.ts(28956,5): error TS2300: Duplicate identifier 'ScrollLogicalPosition'.
/lib/lib.dom.d.ts(28957,5): error TS2300: Duplicate identifier 'ScrollRestoration'.
/lib/lib.dom.d.ts(28958,5): error TS2300: Duplicate identifier 'ScrollSetting'.
/lib/lib.dom.d.ts(28959,5): error TS2300: Duplicate identifier 'SecurityPolicyViolationEventDisposition'.
/lib/lib.dom.d.ts(28960,5): error TS2300: Duplicate identifier 'SelectionMode'.
/lib/lib.dom.d.ts(28961,5): error TS2300: Duplicate identifier 'ServiceWorkerState'.
/lib/lib.dom.d.ts(28962,5): error TS2300: Duplicate identifier 'ServiceWorkerUpdateViaCache'.
/lib/lib.dom.d.ts(28963,5): error TS2300: Duplicate identifier 'ShadowRootMode'.
/lib/lib.dom.d.ts(28964,5): error TS2300: Duplicate identifier 'SlotAssignmentMode'.
/lib/lib.dom.d.ts(28965,5): error TS2300: Duplicate identifier 'SpeechSynthesisErrorCode'.
/lib/lib.dom.d.ts(28966,5): error TS2300: Duplicate identifier 'TextTrackKind'.
/lib/lib.dom.d.ts(28967,5): error TS2300: Duplicate identifier 'TextTrackMode'.
/lib/lib.dom.d.ts(28968,5): error TS2300: Duplicate identifier 'TouchType'.
/lib/lib.dom.d.ts(28969,5): error TS2300: Duplicate identifier 'TransferFunction'.
/lib/lib.dom.d.ts(28970,5): error TS2300: Duplicate identifier 'UserVerificationRequirement'.
/lib/lib.dom.d.ts(28971,5): error TS2300: Duplicate identifier 'VideoColorPrimaries'.
/lib/lib.dom.d.ts(28972,5): error TS2300: Duplicate identifier 'VideoEncoderBitrateMode'.
/lib/lib.dom.d.ts(28973,5): error TS2300: Duplicate identifier 'VideoFacingModeEnum'.
/lib/lib.dom.d.ts(28974,5): error TS2300: Duplicate identifier 'VideoMatrixCoefficients'.
/lib/lib.dom.d.ts(28975,5): error TS2300: Duplicate identifier 'VideoPixelFormat'.
/lib/lib.dom.d.ts(28976,5): error TS2300: Duplicate identifier 'VideoTransferCharacteristics'.
/lib/lib.dom.d.ts(28977,5): error TS2300: Duplicate identifier 'WakeLockType'.
/lib/lib.dom.d.ts(28978,5): error TS2300: Duplicate identifier 'WebGLPowerPreference'.
/lib/lib.dom.d.ts(28979,5): error TS2300: Duplicate identifier 'WebTransportCongestionControl'.
/lib/lib.dom.d.ts(28980,5): error TS2300: Duplicate identifier 'WebTransportErrorSource'.
/lib/lib.dom.d.ts(28981,5): error TS2300: Duplicate identifier 'WorkerType'.
/lib/lib.dom.d.ts(28982,5): error TS2300: Duplicate identifier 'WriteCommandType'.
/lib/lib.dom.d.ts(28983,5): error TS2300: Duplicate identifier 'XMLHttpRequestResponseType'.
/lib/lib.es2015.iterable.d.ts(39,5): error TS2300: Duplicate identifier 'IteratorResult'.
/lib/lib.es2015.iterable.d.ts(70,5): error TS2300: Duplicate identifier 'BuiltinIteratorReturn'.
/lib/lib.es2017.intl.d.ts(34,9): error TS2300: Duplicate identifier 'DateTimeFormatPartTypes'.
/lib/lib.es2018.intl.d.ts(21,9): error TS2300: Duplicate identifier 'LDMLPluralRule'.
/lib/lib.es2018.intl.d.ts(22,9): error TS2300: Duplicate identifier 'PluralRuleType'.
/lib/lib.es2018.intl.d.ts(45,14): error TS2451: Cannot redeclare block-scoped variable 'PluralRules'.
/lib/lib.es2018.intl.d.ts(56,10): error TS2451: Cannot redeclare block-scoped variable 'PluralRules'.
/lib/lib.es2018.intl.d.ts(73,9): error TS2300: Duplicate identifier 'NumberFormatPartTypes'.
/lib/lib.es2019.array.d.ts(19,5): error TS2300: Duplicate identifier 'FlatArray'.
/lib/lib.es2020.intl.d.ts(28,9): error TS2300: Duplicate identifier 'UnicodeBCP47LocaleIdentifier'.
/lib/lib.es2020.intl.d.ts(35,9): error TS2300: Duplicate identifier 'RelativeTimeFormatUnit'.
/lib/lib.es2020.intl.d.ts(62,9): error TS2300: Duplicate identifier 'RelativeTimeFormatUnitSingular'.
/lib/lib.es2020.intl.d.ts(77,9): error TS2300: Duplicate identifier 'RelativeTimeFormatLocaleMatcher'.
/lib/lib.es2020.intl.d.ts(84,9): error TS2300: Duplicate identifier 'RelativeTimeFormatNumeric'.
/lib/lib.es2020.intl.d.ts(91,9): error TS2300: Duplicate identifier 'RelativeTimeFormatStyle'.
/lib/lib.es2020.intl.d.ts(98,9): error TS2300: Duplicate identifier 'LocalesArgument'.
/lib/lib.es2020.intl.d.ts(135,9): error TS2300: Duplicate identifier 'RelativeTimeFormatPart'.
/lib/lib.es2020.intl.d.ts(146,14): error TS2451: Cannot redeclare block-scoped variable 'RelativeTimeFormat'.
/lib/lib.es2020.intl.d.ts(200,10): error TS2451: Cannot redeclare block-scoped variable 'RelativeTimeFormat'.
/lib/lib.es2020.intl.d.ts(259,9): error TS2300: Duplicate identifier 'NumberFormatOptionsSignDisplay'.
/lib/lib.es2020.intl.d.ts(299,9): error TS2300: Duplicate identifier 'LocaleHourCycleKey'.
/lib/lib.es2020.intl.d.ts(300,9): error TS2300: Duplicate identifier 'LocaleCollationCaseFirst'.
/lib/lib.es2020.intl.d.ts(325,14): error TS2451: Cannot redeclare block-scoped variable 'Locale'.
/lib/lib.es2020.intl.d.ts(352,10): error TS2451: Cannot redeclare block-scoped variable 'Locale'.
/lib/lib.es2020.intl.d.ts(356,9): error TS2300: Duplicate identifier 'DisplayNamesFallback'.
/lib/lib.es2020.intl.d.ts(360,9): error TS2300: Duplicate identifier 'DisplayNamesType'.
/lib/lib.es2020.intl.d.ts(368,9): error TS2300: Duplicate identifier 'DisplayNamesLanguageDisplay'.
/lib/lib.es2020.intl.d.ts(388,14): error TS2451: Cannot redeclare block-scoped variable 'DisplayNames'.
/lib/lib.es2020.intl.d.ts(420,10): error TS2451: Cannot redeclare block-scoped variable 'DisplayNames'.
/lib/lib.es2020.promise.d.ts(29,5): error TS2300: Duplicate identifier 'PromiseSettledResult'.
/lib/lib.es2021.intl.d.ts(55,9): error TS2300: Duplicate identifier 'ListFormatLocaleMatcher'.
/lib/lib.es2021.intl.d.ts(62,9): error TS2300: Duplicate identifier 'ListFormatType'.
/lib/lib.es2021.intl.d.ts(69,9): error TS2300: Duplicate identifier 'ListFormatStyle'.
/lib/lib.es2021.intl.d.ts(91,14): error TS2451: Cannot redeclare block-scoped variable 'ListFormat'.
/lib/lib.es2021.intl.d.ts(128,10): error TS2451: Cannot redeclare block-scoped variable 'ListFormat'.
/lib/lib.es2022.intl.d.ts(32,14): error TS2451: Cannot redeclare block-scoped variable 'Segmenter'.
/lib/lib.es2022.intl.d.ts(79,10): error TS2451: Cannot redeclare block-scoped variable 'Segmenter'.
/lib/lib.es2023.intl.d.ts(48,9): error TS2300: Duplicate identifier 'StringNumericLiteral'.
/lib/lib.es5.d.ts(108,13): error TS2300: Duplicate identifier 'PropertyKey'.
/lib/lib.es5.d.ts(324,5): error TS2300: Duplicate identifier 'ThisParameterType'.
/lib/lib.es5.d.ts(329,5): error TS2300: Duplicate identifier 'OmitThisParameter'.
/lib/lib.es5.d.ts(1528,13): error TS2300: Duplicate identifier 'PromiseConstructorLike'.
/lib/lib.es5.d.ts(1563,5): error TS2300: Duplicate identifier 'Awaited'.
/lib/lib.es5.d.ts(1578,5): error TS2300: Duplicate identifier 'Partial'.
/lib/lib.es5.d.ts(1585,5): error TS2300: Duplicate identifier 'Required'.
/lib/lib.es5.d.ts(1592,5): error TS2300: Duplicate identifier 'Readonly'.
/lib/lib.es5.d.ts(1599,5): error TS2300: Duplicate identifier 'Pick'.
/lib/lib.es5.d.ts(1606,5): error TS2300: Duplicate identifier 'Record'.
/lib/lib.es5.d.ts(1613,5): error TS2300: Duplicate identifier 'Exclude'.
/lib/lib.es5.d.ts(1618,5): error TS2300: Duplicate identifier 'Extract'.
/lib/lib.es5.d.ts(1623,5): error TS2300: Duplicate identifier 'Omit'.
/lib/lib.es5.d.ts(1628,5): error TS2300: Duplicate identifier 'NonNullable'.
/lib/lib.es5.d.ts(1633,5): error TS2300: Duplicate identifier 'Parameters'.
/lib/lib.es5.d.ts(1638,5): error TS2300: Duplicate identifier 'ConstructorParameters'.
/lib/lib.es5.d.ts(1643,5): error TS2300: Duplicate identifier 'ReturnType'.
/lib/lib.es5.d.ts(1648,5): error TS2300: Duplicate identifier 'InstanceType'.
/lib/lib.es5.d.ts(1653,5): error TS2300: Duplicate identifier 'Uppercase'.
/lib/lib.es5.d.ts(1658,5): error TS2300: Duplicate identifier 'Lowercase'.
/lib/lib.es5.d.ts(1663,5): error TS2300: Duplicate identifier 'Capitalize'.
/lib/lib.es5.d.ts(1668,5): error TS2300: Duplicate identifier 'Uncapitalize'.
/lib/lib.es5.d.ts(1673,5): error TS2300: Duplicate identifier 'NoInfer'.
/lib/lib.es5.d.ts(1687,5): error TS2300: Duplicate identifier 'WeakKey'.
/lib/lib.es5.d.ts(1713,5): error TS2300: Duplicate identifier 'ArrayBufferLike'.
/lib/lib.es5.d.ts(4442,9): error TS2300: Duplicate identifier 'NumberFormatOptionsStyle'.
/lib/lib.es5.d.ts(4450,9): error TS2300: Duplicate identifier 'NumberFormatOptionsCurrencyDisplay'.
/lib/lib.es5.d.ts(4454,9): error TS2300: Duplicate identifier 'NumberFormatOptionsUseGrouping'.
/lib/lib.es5.d.ts(4455,9): error TS2300: Duplicate identifier 'ResolvedNumberFormatOptionsUseGrouping'.
/lib/lib.scripthost.d.ts(227,14): error TS2300: Duplicate identifier 'SafeArray'.
/lib/lib.scripthost.d.ts(311,14): error TS2300: Duplicate identifier 'VarDate'.
/lib/lib.webworker.d.ts(1460,13): error TS2403: Subsequent variable declarations must have the same type.  Variable 'CSSNumericValue' must be of type '{ new(): CSSNumericValue, prototype: CSSNumericValue, parse: (cssText: string) => CSSNumericValue }', but here has type '{ new(): CSSNumericValue, prototype: CSSNumericValue }'.
/lib/lib.webworker.d.ts(1549,13): error TS2403: Subsequent variable declarations must have the same type.  Variable 'CSSStyleValue' must be of type '{ new(): CSSStyleValue, prototype: CSSStyleValue, parse: (property: string, cssText: string) => CSSStyleValue, parseAll: (property: string, cssText: string) => CSSStyleValue[] }', but here has type '{ new(): CSSStyleValue, prototype: CSSStyleValue }'.
/lib/lib.webworker.d.ts(3212,5): error TS2717: Subsequent property declarations must have the same type.  Property '"loading"' must be of type 'Event', but here has type 'FontFaceSetLoadEvent'.
/lib/lib.webworker.d.ts(3213,5): error TS2717: Subsequent property declarations must have the same type.  Property '"loadingdone"' must be of type 'Event', but here has type 'FontFaceSetLoadEvent'.
/lib/lib.webworker.d.ts(3214,5): error TS2717: Subsequent property declarations must have the same type.  Property '"loadingerror"' must be of type 'Event', but here has type 'FontFaceSetLoadEvent'.
/lib/lib.webworker.d.ts(3220,5): error TS2717: Subsequent property declarations must have the same type.  Property 'onloading' must be of type '(ev: Event) => any', but here has type '(ev: FontFaceSetLoadEvent) => any'.
/lib/lib.webworker.d.ts(3222,5): error TS2717: Subsequent property declarations must have the same type.  Property 'onloadingdone' must be of type '(ev: Event) => any', but here has type '(ev: FontFaceSetLoadEvent) => any'.
/lib/lib.webworker.d.ts(3224,5): error TS2717: Subsequent property declarations must have the same type.  Property 'onloadingerror' must be of type '(ev: Event) => any', but here has type '(ev: FontFaceSetLoadEvent) => any'.
/lib/lib.webworker.d.ts(3240,13): error TS2403: Subsequent variable declarations must have the same type.  Variable 'FontFaceSet' must be of type '{ new(initialFaces: FontFace[]): FontFaceSet, prototype: FontFaceSet }', but here has type '{ new(): FontFaceSet, prototype: FontFaceSet }'.
/lib/lib.webworker.d.ts(3286,13): error TS2403: Subsequent variable declarations must have the same type.  Variable 'FormData' must be of type '{ new(form?: HTMLFormElement, submitter?: HTMLElement): FormData, prototype: FormData }', but here has type '{ new(): FormData, prototype: FormData }'.
/lib/lib.webworker.d.ts(4417,13): error TS2403: Subsequent variable declarations must have the same type.  Variable 'Notification' must be of type '{ new(title: string, options?: NotificationOptions): Notification, prototype: Notification, readonly permission: NotificationPermission, requestPermission: (deprecatedCallback?: NotificationPermissionCallback) => Promise<NotificationPermission> }', but here has type '{ new(title: string, options?: NotificationOptions): Notification, prototype: Notification, readonly permission: NotificationPermission }'.
/lib/lib.webworker.d.ts(5124,13): error TS2403: Subsequent variable declarations must have the same type.  Variable 'ReadableStreamBYOBReader' must be of type '{ new(stream: ReadableStream<any>): ReadableStreamBYOBReader, prototype: ReadableStreamBYOBReader }', but here has type '{ new(stream: ReadableStream<Uint8Array<ArrayBufferLike>>): ReadableStreamBYOBReader, prototype: ReadableStreamBYOBReader }'.
/lib/lib.webworker.d.ts(5927,13): error TS2403: Subsequent variable declarations must have the same type.  Variable 'URL' must be of type '{ new(url: string | URL, base?: string | URL): URL, prototype: URL, canParse: (url: string | URL, base?: string | URL) => boolean, createObjectURL: (obj: Blob | MediaSource) => string, parse: (url: string | URL, base?: string | URL) => URL, revokeObjectURL: (url: string) => void }', but here has type '{ new(url: string | URL, base?: string | URL): URL, prototype: URL, canParse: (url: string | URL, base?: string | URL) => boolean, createObjectURL: (obj: Blob) => string, parse: (url: string | URL, base?: string | URL) => URL, revokeObjectURL: (url: string) => void }'.
/lib/lib.webworker.d.ts(9322,9): error TS2300: Duplicate identifier 'ImportExportKind'.
/lib/lib.webworker.d.ts(9323,9): error TS2300: Duplicate identifier 'TableKind'.
/lib/lib.webworker.d.ts(9324,9): error TS2300: Duplicate identifier 'ExportValue'.
/lib/lib.webworker.d.ts(9325,9): error TS2300: Duplicate identifier 'Exports'.
/lib/lib.webworker.d.ts(9326,9): error TS2300: Duplicate identifier 'ImportValue'.
/lib/lib.webworker.d.ts(9327,9): error TS2300: Duplicate identifier 'Imports'.
/lib/lib.webworker.d.ts(9328,9): error TS2300: Duplicate identifier 'ModuleImports'.
/lib/lib.webworker.d.ts(9329,9): error TS2300: Duplicate identifier 'ValueType'.
/lib/lib.webworker.d.ts(9436,12): error TS2451: Cannot redeclare block-scoped variable 'name'.
/lib/lib.webworker.d.ts(9438,13): error TS2403: Subsequent variable declarations must have the same type.  Variable 'onmessage' must be of type '(ev: MessageEvent<any>) => any', but here has type '(ev: MessageEvent<any>) => any'.
/lib/lib.webworker.d.ts(9440,13): error TS2403: Subsequent variable declarations must have the same type.  Variable 'onmessageerror' must be of type '(ev: MessageEvent<any>) => any', but here has type '(ev: MessageEvent<any>) => any'.
/lib/lib.webworker.d.ts(9467,13): error TS2403: Subsequent variable declarations must have the same type.  Variable 'location' must be of type 'Location', but here has type 'WorkerLocation'.
/lib/lib.webworker.d.ts(9473,13): error TS2403: Subsequent variable declarations must have the same type.  Variable 'navigator' must be of type 'Navigator', but here has type 'WorkerNavigator'.
/lib/lib.webworker.d.ts(9475,13): error TS2403: Subsequent variable declarations must have the same type.  Variable 'onerror' must be of type 'OnErrorEventHandlerNonNull', but here has type '(ev: ErrorEvent) => any'.
/lib/lib.webworker.d.ts(9477,13): error TS2403: Subsequent variable declarations must have the same type.  Variable 'onlanguagechange' must be of type '(ev: Event) => any', but here has type '(ev: Event) => any'.
/lib/lib.webworker.d.ts(9479,13): error TS2403: Subsequent variable declarations must have the same type.  Variable 'onoffline' must be of type '(ev: Event) => any', but here has type '(ev: Event) => any'.
/lib/lib.webworker.d.ts(9481,13): error TS2403: Subsequent variable declarations must have the same type.  Variable 'ononline' must be of type '(ev: Event) => any', but here has type '(ev: Event) => any'.
/lib/lib.webworker.d.ts(9483,13): error TS2403: Subsequent variable declarations must have the same type.  Variable 'onrejectionhandled' must be of type '(ev: PromiseRejectionEvent) => any', but here has type '(ev: PromiseRejectionEvent) => any'.
/lib/lib.webworker.d.ts(9485,13): error TS2403: Subsequent variable declarations must have the same type.  Variable 'onunhandledrejection' must be of type '(ev: PromiseRejectionEvent) => any', but here has type '(ev: PromiseRejectionEvent) => any'.
/lib/lib.webworker.d.ts(9491,13): error TS2403: Subsequent variable declarations must have the same type.  Variable 'self' must be of type 'Window & { Reflect: { apply: { <T, A, R>(target: (...args: A) => R, thisArgument: T, argumentsList: Readonly<A>): R, (target: Function, thisArgument: any, argumentsList: ArrayLike<any>): any, <T, A, R>(target: (...args: A) => R, thisArgument: T, argumentsList: Readonly<A>): R, (target: Function, thisArgument: any, argumentsList: ArrayLike<any>): any }, construct: { <A, R>(target: new(...args: A) => R, argumentsList: Readonly<A>, newTarget?: new(...args: any) => any): R, (target: Function, argumentsList: ArrayLike<any>, newTarget?: Function): any, <A, R>(target: new(...args: A) => R, argumentsList: Readonly<A>, newTarget?: new(...args: any) => any): R, (target: Function, argumentsList: ArrayLike<any>, newTarget?: Function): any }, defineProperty: { (target: object, propertyKey: PropertyKey, attributes: PropertyDescriptor & ThisType<any>): boolean, (target: object, propertyKey: PropertyKey, attributes: PropertyDescriptor & ThisType<any>): boolean }, deleteProperty: { (target: object, propertyKey: PropertyKey): boolean, (target: object, propertyKey: PropertyKey): boolean }, get: { <T, P>(target: T, propertyKey: P, receiver?: unknown): , <T, P>(target: T, propertyKey: P, receiver?: unknown):  }, getOwnPropertyDescriptor: { <T, P>(target: T, propertyKey: P): TypedPropertyDescriptor<>, <T, P>(target: T, propertyKey: P): TypedPropertyDescriptor<> }, getPrototypeOf: { (target: object): object, (target: object): object }, has: { (target: object, propertyKey: PropertyKey): boolean, (target: object, propertyKey: PropertyKey): boolean }, isExtensible: { (target: object): boolean, (target: object): boolean }, ownKeys: { (target: object): (string | symbol)[], (target: object): (string | symbol)[] }, preventExtensions: { (target: object): boolean, (target: object): boolean }, set: { <T, P>(target: T, propertyKey: P, value: , receiver?: any): boolean, (target: object, propertyKey: PropertyKey, value: any, receiver?: any): boolean, <T, P>(target: T, propertyKey: P, value: , receiver?: any): boolean, (target: object, propertyKey: PropertyKey, value: any, receiver?: any): boolean }, setPrototypeOf: { (target: object, proto: object): boolean, (target: object, proto: object): boolean } }, importScripts: { (...urls: string[]): void, (...urls: (string | URL)[]): void, (...urls: string[]): void }, ActiveXObject: ActiveXObject, NaN: number, Infinity: number, eval: { (x: string): any, (x: string): any }, AggregateError: AggregateErrorConstructor, parseInt: { (string: string, radix?: number): number, (string: string, radix?: number): number }, SharedArrayBuffer: SharedArrayBufferConstructor, WeakRef: WeakRefConstructor, parseFloat: { (string: string): number, (string: string): number }, Symbol: SymbolConstructor, isNaN: { (number: number): boolean, (number: number): boolean }, SuppressedError: SuppressedErrorConstructor, isFinite: { (number: number): boolean, (number: number): boolean }, decodeURI: { (encodedURI: string): string, (encodedURI: string): string }, Map: MapConstructor, decodeURIComponent: { (encodedURIComponent: string): string, (encodedURIComponent: string): string }, encodeURI: { (uri: string): string, (uri: string): string }, encodeURIComponent: { (uriComponent: string | number | boolean): string, (uriComponent: string | number | boolean): string }, escape: { (string: string): string, (string: string): string }, FinalizationRegistry: FinalizationRegistryConstructor, Promise: PromiseConstructor, unescape: { (string: string): string, (string: string): string }, WeakMap: WeakMapConstructor, WScript: { Echo: (s: any) => void, StdErr: TextStreamWriter, StdOut: TextStreamWriter, Arguments: { length: number, Item: (n: number) => string }, ScriptFullName: string, Quit: (exitCode?: number) => number, BuildVersion: number, FullName: string, Interactive: boolean, Name: string, Path: string, ScriptName: string, StdIn: TextStreamReader, Version: string, ConnectObject: (objEventSource: any, strPrefix: string) => void, CreateObject: (strProgID: string, strPrefix?: string) => any, DisconnectObject: (obj: any) => void, GetObject: (strPathname: string, strProgID?: string, strPrefix?: string) => any, Sleep: (intTime: number) => void }, DisposableStack: DisposableStackConstructor, Set: SetConstructor, WeakSet: WeakSetConstructor, Proxy: ProxyConstructor, BigInt: BigIntConstructor, AsyncDisposableStack: AsyncDisposableStackConstructor, WSH: { Echo: (s: any) => void, StdErr: TextStreamWriter, StdOut: TextStreamWriter, Arguments: { length: number, Item: (n: number) => string }, ScriptFullName: string, Quit: (exitCode?: number) => number, BuildVersion: number, FullName: string, Interactive: boolean, Name: string, Path: string, ScriptName: string, StdIn: TextStreamReader, Version: string, ConnectObject: (objEventSource: any, strPrefix: string) => void, CreateObject: (strProgID: string, strPrefix?: string) => any, DisconnectObject: (obj: any) => void, GetObject: (strPathname: string, strProgID?: string, strPrefix?: string) => any, Sleep: (intTime: number) => void }, Atomics: Atomics, Enumerator: EnumeratorConstructor, Iterator: IteratorConstructor, VBArray: VBArrayConstructor, Object: ObjectConstructor, Function: FunctionConstructor, BigInt64Array: BigInt64ArrayConstructor, String: StringConstructor, Boolean: BooleanConstructor, Number: NumberConstructor, Math: Math, BigUint64Array: BigUint64ArrayConstructor, Date: DateConstructor, RegExp: RegExpConstructor, Error: ErrorConstructor, EvalError: EvalErrorConstructor, RangeError: RangeErrorConstructor, ReferenceError: ReferenceErrorConstructor, SyntaxError: SyntaxErrorConstructor, TypeError: TypeErrorConstructor, URIError: URIErrorConstructor, JSON: JSON, NodeFilter: { readonly FILTER_ACCEPT: 1, readonly FILTER_REJECT: 2, readonly FILTER_SKIP: 3, readonly SHOW_ALL: 4.294967295e+09, readonly SHOW_ELEMENT: 1, readonly SHOW_ATTRIBUTE: 2, readonly SHOW_TEXT: 4, readonly SHOW_CDATA_SECTION: 8, readonly SHOW_ENTITY_REFERENCE: 16, readonly SHOW_ENTITY: 32, readonly SHOW_PROCESSING_INSTRUCTION: 64, readonly SHOW_COMMENT: 128, readonly SHOW_DOCUMENT: 256, readonly SHOW_DOCUMENT_TYPE: 512, readonly SHOW_DOCUMENT_FRAGMENT: 1024, readonly SHOW_NOTATION: 2048 }, AbortController: { new(): AbortController, prototype: AbortController }, AbortSignal: { new(): AbortSignal, prototype: AbortSignal, abort: (reason?: any) => AbortSignal, any: (signals: AbortSignal[]) => AbortSignal, timeout: (milliseconds: number) => AbortSignal }, AbstractRange: { new(): AbstractRange, prototype: AbstractRange }, AnalyserNode: { new(context: BaseAudioContext, options?: AnalyserOptions): AnalyserNode, prototype: AnalyserNode }, Array: ArrayConstructor, Animation: { new(effect?: AnimationEffect, timeline?: AnimationTimeline): Animation, prototype: Animation }, Client: { new(): Client, prototype: Client }, AnimationEffect: { new(): AnimationEffect, prototype: AnimationEffect }, Clients: { new(): Clients, prototype: Clients }, AnimationEvent: { new(type: string, animationEventInitDict?: AnimationEventInit): AnimationEvent, prototype: AnimationEvent }, AnimationPlaybackEvent: { new(type: string, eventInitDict?: AnimationPlaybackEventInit): AnimationPlaybackEvent, prototype: AnimationPlaybackEvent }, AnimationTimeline: { new(): AnimationTimeline, prototype: AnimationTimeline }, Attr: { new(): Attr, prototype: Attr }, ArrayBuffer: ArrayBufferConstructor, AudioBuffer: { new(options: AudioBufferOptions): AudioBuffer, prototype: AudioBuffer }, AudioBufferSourceNode: { new(context: BaseAudioContext, options?: AudioBufferSourceOptions): AudioBufferSourceNode, prototype: AudioBufferSourceNode }, AudioContext: { new(contextOptions?: AudioContextOptions): AudioContext, prototype: AudioContext }, AudioDestinationNode: { new(): AudioDestinationNode, prototype: AudioDestinationNode }, DataView: DataViewConstructor, AudioListener: { new(): AudioListener, prototype: AudioListener }, AudioNode: { new(): AudioNode, prototype: AudioNode }, AudioData: { new(init: AudioDataInit): AudioData, prototype: AudioData }, AudioParam: { new(): AudioParam, prototype: AudioParam }, AudioParamMap: { new(): AudioParamMap, prototype: AudioParamMap }, AudioProcessingEvent: { new(type: string, eventInitDict: AudioProcessingEventInit): AudioProcessingEvent, prototype: AudioProcessingEvent }, AudioDecoder: { new(init: AudioDecoderInit): AudioDecoder, prototype: AudioDecoder, isConfigSupported: (config: AudioDecoderConfig) => Promise<AudioDecoderSupport> }, AudioScheduledSourceNode: { new(): AudioScheduledSourceNode, prototype: AudioScheduledSourceNode }, AudioWorklet: { new(): AudioWorklet, prototype: AudioWorklet }, AudioEncoder: { new(init: AudioEncoderInit): AudioEncoder, prototype: AudioEncoder, isConfigSupported: (config: AudioEncoderConfig) => Promise<AudioEncoderSupport> }, AudioWorkletNode: { new(context: BaseAudioContext, name: string, options?: AudioWorkletNodeOptions): AudioWorkletNode, prototype: AudioWorkletNode }, AuthenticatorAssertionResponse: { new(): AuthenticatorAssertionResponse, prototype: AuthenticatorAssertionResponse }, AuthenticatorAttestationResponse: { new(): AuthenticatorAttestationResponse, prototype: AuthenticatorAttestationResponse }, AuthenticatorResponse: { new(): AuthenticatorResponse, prototype: AuthenticatorResponse }, BarProp: { new(): BarProp, prototype: BarProp }, DedicatedWorkerGlobalScope: { new(): DedicatedWorkerGlobalScope, prototype: DedicatedWorkerGlobalScope }, Int8Array: Int8ArrayConstructor, BaseAudioContext: { new(): BaseAudioContext, prototype: BaseAudioContext }, BeforeUnloadEvent: { new(): BeforeUnloadEvent, prototype: BeforeUnloadEvent }, BiquadFilterNode: { new(context: BaseAudioContext, options?: BiquadFilterOptions): BiquadFilterNode, prototype: BiquadFilterNode }, Blob: { new(blobParts?: BlobPart[], options?: BlobPropertyBag): Blob, prototype: Blob }, BlobEvent: { new(type: string, eventInitDict: BlobEventInit): BlobEvent, prototype: BlobEvent }, BroadcastChannel: { new(name: string): BroadcastChannel, prototype: BroadcastChannel }, ByteLengthQueuingStrategy: { new(init: QueuingStrategyInit): ByteLengthQueuingStrategy, prototype: ByteLengthQueuingStrategy }, CDATASection: { new(): CDATASection, prototype: CDATASection }, CSSAnimation: { new(): CSSAnimation, prototype: CSSAnimation }, CSSConditionRule: { new(): CSSConditionRule, prototype: CSSConditionRule }, CSSContainerRule: { new(): CSSContainerRule, prototype: CSSContainerRule }, Uint8Array: Uint8ArrayConstructor, CSSCounterStyleRule: { new(): CSSCounterStyleRule, prototype: CSSCounterStyleRule }, CSSFontFaceRule: { new(): CSSFontFaceRule, prototype: CSSFontFaceRule }, CSSFontFeatureValuesRule: { new(): CSSFontFeatureValuesRule, prototype: CSSFontFeatureValuesRule }, ExtendableEvent: { new(type: string, eventInitDict?: ExtendableEventInit): ExtendableEvent, prototype: ExtendableEvent }, CSSFontPaletteValuesRule: { new(): CSSFontPaletteValuesRule, prototype: CSSFontPaletteValuesRule }, ExtendableMessageEvent: { new(type: string, eventInitDict?: ExtendableMessageEventInit): ExtendableMessageEvent, prototype: ExtendableMessageEvent }, CSSGroupingRule: { new(): CSSGroupingRule, prototype: CSSGroupingRule }, CSSImageValue: { new(): CSSImageValue, prototype: CSSImageValue }, CSSImportRule: { new(): CSSImportRule, prototype: CSSImportRule }, FetchEvent: { new(type: string, eventInitDict: FetchEventInit): FetchEvent, prototype: FetchEvent }, CSSKeyframeRule: { new(): CSSKeyframeRule, prototype: CSSKeyframeRule }, CSSKeyframesRule: { new(): CSSKeyframesRule, prototype: CSSKeyframesRule }, CSSKeywordValue: { new(value: string): CSSKeywordValue, prototype: CSSKeywordValue }, CSSLayerBlockRule: { new(): CSSLayerBlockRule, prototype: CSSLayerBlockRule }, CSSLayerStatementRule: { new(): CSSLayerStatementRule, prototype: CSSLayerStatementRule }, CSSMathClamp: { new(lower: CSSNumberish, value: CSSNumberish, upper: CSSNumberish): CSSMathClamp, prototype: CSSMathClamp }, CSSMathInvert: { new(arg: CSSNumberish): CSSMathInvert, prototype: CSSMathInvert }, CSSMathMax: { new(...args: CSSNumberish[]): CSSMathMax, prototype: CSSMathMax }, CSSMathMin: { new(...args: CSSNumberish[]): CSSMathMin, prototype: CSSMathMin }, CSSMathNegate: { new(arg: CSSNumberish): CSSMathNegate, prototype: CSSMathNegate }, CSSMathProduct: { new(...args: CSSNumberish[]): CSSMathProduct, prototype: CSSMathProduct }, CSSMathSum: { new(...args: CSSNumberish[]): CSSMathSum, prototype: CSSMathSum }, CSSMathValue: { new(): CSSMathValue, prototype: CSSMathValue }, CSSMatrixComponent: { new(matrix: DOMMatrixReadOnly, options?: CSSMatrixComponentOptions): CSSMatrixComponent, prototype: CSSMatrixComponent }, FileReaderSync: { new(): FileReaderSync, prototype: FileReaderSync }, CSSMediaRule: { new(): CSSMediaRule, prototype: CSSMediaRule }, CSSNamespaceRule: { new(): CSSNamespaceRule, prototype: CSSNamespaceRule }, CSSNumericArray: { new(): CSSNumericArray, prototype: CSSNumericArray }, Uint8ClampedArray: Uint8ClampedArrayConstructor, CSSNumericValue: { new(): CSSNumericValue, prototype: CSSNumericValue, parse: (cssText: string) => CSSNumericValue }, FileSystemSyncAccessHandle: { new(): FileSystemSyncAccessHandle, prototype: FileSystemSyncAccessHandle }, CSSPageRule: { new(): CSSPageRule, prototype: CSSPageRule }, CSSPerspective: { new(length: CSSPerspectiveValue): CSSPerspective, prototype: CSSPerspective }, CSSPropertyRule: { new(): CSSPropertyRule, prototype: CSSPropertyRule }, CSSRotate: { new(angle: CSSNumericValue): CSSRotate, new(x: CSSNumberish, y: CSSNumberish, z: CSSNumberish, angle: CSSNumericValue): CSSRotate, prototype: CSSRotate }, CSSRule: { new(): CSSRule, prototype: CSSRule, readonly STYLE_RULE: 1, readonly CHARSET_RULE: 2, readonly IMPORT_RULE: 3, readonly MEDIA_RULE: 4, readonly FONT_FACE_RULE: 5, readonly PAGE_RULE: 6, readonly NAMESPACE_RULE: 10, readonly KEYFRAMES_RULE: 7, readonly KEYFRAME_RULE: 8, readonly SUPPORTS_RULE: 12, readonly COUNTER_STYLE_RULE: 11, readonly FONT_FEATURE_VALUES_RULE: 14 }, CSSRuleList: { new(): CSSRuleList, prototype: CSSRuleList }, CSSScale: { new(x: CSSNumberish, y: CSSNumberish, z?: CSSNumberish): CSSScale, prototype: CSSScale }, CSSScopeRule: { new(): CSSScopeRule, prototype: CSSScopeRule }, CSSSkew: { new(ax: CSSNumericValue, ay: CSSNumericValue): CSSSkew, prototype: CSSSkew }, CSSSkewX: { new(ax: CSSNumericValue): CSSSkewX, prototype: CSSSkewX }, CSSSkewY: { new(ay: CSSNumericValue): CSSSkewY, prototype: CSSSkewY }, CSSStartingStyleRule: { new(): CSSStartingStyleRule, prototype: CSSStartingStyleRule }, Int16Array: Int16ArrayConstructor, Uint16Array: Uint16ArrayConstructor, Int32Array: Int32ArrayConstructor, MediaStreamTrackProcessor: { new(init: MediaStreamTrackProcessorInit): MediaStreamTrackProcessor, prototype: MediaStreamTrackProcessor }, Uint32Array: Uint32ArrayConstructor, NotificationEvent: { new(type: string, eventInitDict: NotificationEventInit): NotificationEvent, prototype: NotificationEvent }, CSSStyleDeclaration: { new(): CSSStyleDeclaration, prototype: CSSStyleDeclaration }, CSSStyleRule: { new(): CSSStyleRule, prototype: CSSStyleRule }, Float32Array: Float32ArrayConstructor, CSSStyleSheet: { new(options?: CSSStyleSheetInit): CSSStyleSheet, prototype: CSSStyleSheet }, CSSStyleValue: { new(): CSSStyleValue, prototype: CSSStyleValue, parse: (property: string, cssText: string) => CSSStyleValue, parseAll: (property: string, cssText: string) => CSSStyleValue[] }, CSSSupportsRule: { new(): CSSSupportsRule, prototype: CSSSupportsRule }, CSSTransformComponent: { new(): CSSTransformComponent, prototype: CSSTransformComponent }, CSSTransformValue: { new(transforms: CSSTransformComponent[]): CSSTransformValue, prototype: CSSTransformValue }, CSSTransition: { new(): CSSTransition, prototype: CSSTransition }, CSSTranslate: { new(x: CSSNumericValue, y: CSSNumericValue, z?: CSSNumericValue): CSSTranslate, prototype: CSSTranslate }, CSSUnitValue: { new(value: number, unit: string): CSSUnitValue, prototype: CSSUnitValue }, CSSUnparsedValue: { new(members: CSSUnparsedSegment[]): CSSUnparsedValue, prototype: CSSUnparsedValue }, CSSVariableReferenceValue: { new(variable: string, fallback?: CSSUnparsedValue): CSSVariableReferenceValue, prototype: CSSVariableReferenceValue }, Cache: { new(): Cache, prototype: Cache }, CacheStorage: { new(): CacheStorage, prototype: CacheStorage }, CanvasCaptureMediaStreamTrack: { new(): CanvasCaptureMediaStreamTrack, prototype: CanvasCaptureMediaStreamTrack }, Float64Array: Float64ArrayConstructor, Intl: { getCanonicalLocales: { (locale?: string | readonly string[]): string[], (locale?: string | readonly string[]): string[] }, readonly PluralRules: PluralRulesConstructor, readonly Segmenter: { new(locales?: LocalesArgument, options?: SegmenterOptions): Segmenter, prototype: Segmenter, supportedLocalesOf: (locales: LocalesArgument, options?: Pick<SegmenterOptions, "localeMatcher">) => string[] }, supportedValuesOf: { (key: "unit" | "currency" | "calendar" | "collation" | "numberingSystem" | "timeZone"): string[], (key: "unit" | "currency" | "calendar" | "collation" | "numberingSystem" | "timeZone"): string[] }, readonly ListFormat: { new(locales?: LocalesArgument, options?: ListFormatOptions): ListFormat, prototype: ListFormat, supportedLocalesOf: (locales: LocalesArgument, options?: Pick<ListFormatOptions, "localeMatcher">) => string[] }, readonly RelativeTimeFormat: { new(locales?: LocalesArgument, options?: RelativeTimeFormatOptions): RelativeTimeFormat, supportedLocalesOf: (locales?: LocalesArgument, options?: RelativeTimeFormatOptions) => string[] }, readonly Locale: new(tag: string | Locale, options?: LocaleOptions) => Locale, readonly DisplayNames: { new(locales: LocalesArgument, options: DisplayNamesOptions): DisplayNames, prototype: DisplayNames, supportedLocalesOf: (locales?: LocalesArgument, options?: { localeMatcher?: RelativeTimeFormatLocaleMatcher }) => string[] }, Collator: CollatorConstructor, NumberFormat: NumberFormatConstructor, DateTimeFormat: DateTimeFormatConstructor }, CanvasGradient: { new(): CanvasGradient, prototype: CanvasGradient }, PushEvent: { new(type: string, eventInitDict?: PushEventInit): PushEvent, prototype: PushEvent }, PushMessageData: { new(): PushMessageData, prototype: PushMessageData }, CanvasPattern: { new(): CanvasPattern, prototype: CanvasPattern }, CanvasRenderingContext2D: { new(): CanvasRenderingContext2D, prototype: CanvasRenderingContext2D }, RTCRtpScriptTransformer: { new(): RTCRtpScriptTransformer, prototype: RTCRtpScriptTransformer }, RTCTransformEvent: { new(): RTCTransformEvent, prototype: RTCTransformEvent }, ChannelMergerNode: { new(context: BaseAudioContext, options?: ChannelMergerOptions): ChannelMergerNode, prototype: ChannelMergerNode }, ChannelSplitterNode: { new(context: BaseAudioContext, options?: ChannelSplitterOptions): ChannelSplitterNode, prototype: ChannelSplitterNode }, CharacterData: { new(): CharacterData, prototype: CharacterData }, Clipboard: { new(): Clipboard, prototype: Clipboard }, ClipboardEvent: { new(type: string, eventInitDict?: ClipboardEventInit): ClipboardEvent, prototype: ClipboardEvent }, ClipboardItem: { new(items: Record<string, string | Blob | PromiseLike<string | Blob>>, options?: ClipboardItemOptions): ClipboardItem, prototype: ClipboardItem, supports: (type: string) => boolean }, CloseEvent: { new(type: string, eventInitDict?: CloseEventInit): CloseEvent, prototype: CloseEvent }, Comment: { new(data?: string): Comment, prototype: Comment }, CompositionEvent: { new(type: string, eventInitDict?: CompositionEventInit): CompositionEvent, prototype: CompositionEvent }, CompressionStream: { new(format: CompressionFormat): CompressionStream, prototype: CompressionStream }, ConstantSourceNode: { new(context: BaseAudioContext, options?: ConstantSourceOptions): ConstantSourceNode, prototype: ConstantSourceNode }, ContentVisibilityAutoStateChangeEvent: { new(type: string, eventInitDict?: ContentVisibilityAutoStateChangeEventInit): ContentVisibilityAutoStateChangeEvent, prototype: ContentVisibilityAutoStateChangeEvent }, ConvolverNode: { new(context: BaseAudioContext, options?: ConvolverOptions): ConvolverNode, prototype: ConvolverNode }, CountQueuingStrategy: { new(init: QueuingStrategyInit): CountQueuingStrategy, prototype: CountQueuingStrategy }, Credential: { new(): Credential, prototype: Credential }, CredentialsContainer: { new(): CredentialsContainer, prototype: CredentialsContainer }, CaretPosition: { new(): CaretPosition, prototype: CaretPosition }, Crypto: { new(): Crypto, prototype: Crypto }, CryptoKey: { new(): CryptoKey, prototype: CryptoKey }, CustomElementRegistry: { new(): CustomElementRegistry, prototype: CustomElementRegistry }, CustomEvent: { new<T>(type: string, eventInitDict?: CustomEventInit<T>): CustomEvent<T>, prototype: CustomEvent<any> }, CustomStateSet: { new(): CustomStateSet, prototype: CustomStateSet }, DOMException: { new(message?: string, name?: string): DOMException, prototype: DOMException, readonly INDEX_SIZE_ERR: 1, readonly DOMSTRING_SIZE_ERR: 2, readonly HIERARCHY_REQUEST_ERR: 3, readonly WRONG_DOCUMENT_ERR: 4, readonly INVALID_CHARACTER_ERR: 5, readonly NO_DATA_ALLOWED_ERR: 6, readonly NO_MODIFICATION_ALLOWED_ERR: 7, readonly NOT_FOUND_ERR: 8, readonly NOT_SUPPORTED_ERR: 9, readonly INUSE_ATTRIBUTE_ERR: 10, readonly INVALID_STATE_ERR: 11, readonly SYNTAX_ERR: 12, readonly INVALID_MODIFICATION_ERR: 13, readonly NAMESPACE_ERR: 14, readonly INVALID_ACCESS_ERR: 15, readonly VALIDATION_ERR: 16, readonly TYPE_MISMATCH_ERR: 17, readonly SECURITY_ERR: 18, readonly NETWORK_ERR: 19, readonly ABORT_ERR: 20, readonly URL_MISMATCH_ERR: 21, readonly QUOTA_EXCEEDED_ERR: 22, readonly TIMEOUT_ERR: 23, readonly INVALID_NODE_TYPE_ERR: 24, readonly DATA_CLONE_ERR: 25 }, DOMImplementation: { new(): DOMImplementation, prototype: DOMImplementation }, ServiceWorkerGlobalScope: { new(): ServiceWorkerGlobalScope, prototype: ServiceWorkerGlobalScope }, DOMMatrix: { new(init?: string | number[]): DOMMatrix, prototype: DOMMatrix, fromFloat32Array: (array32: Float32Array<ArrayBufferLike>) => DOMMatrix, fromFloat64Array: (array64: Float64Array<ArrayBufferLike>) => DOMMatrix, fromMatrix: (other?: DOMMatrixInit) => DOMMatrix }, SVGMatrix: { new(init?: string | number[]): DOMMatrix, prototype: DOMMatrix, fromFloat32Array: (array32: Float32Array<ArrayBufferLike>) => DOMMatrix, fromFloat64Array: (array64: Float64Array<ArrayBufferLike>) => DOMMatrix, fromMatrix: (other?: DOMMatrixInit) => DOMMatrix }, WebKitCSSMatrix: { new(init?: string | number[]): DOMMatrix, prototype: DOMMatrix, fromFloat32Array: (array32: Float32Array<ArrayBufferLike>) => DOMMatrix, fromFloat64Array: (array64: Float64Array<ArrayBufferLike>) => DOMMatrix, fromMatrix: (other?: DOMMatrixInit) => DOMMatrix }, DOMMatrixReadOnly: { new(init?: string | number[]): DOMMatrixReadOnly, prototype: DOMMatrixReadOnly, fromFloat32Array: (array32: Float32Array<ArrayBufferLike>) => DOMMatrixReadOnly, fromFloat64Array: (array64: Float64Array<ArrayBufferLike>) => DOMMatrixReadOnly, fromMatrix: (other?: DOMMatrixInit) => DOMMatrixReadOnly }, DOMParser: { new(): DOMParser, prototype: DOMParser }, DOMPoint: { new(x?: number, y?: number, z?: number, w?: number): DOMPoint, prototype: DOMPoint, fromPoint: (other?: DOMPointInit) => DOMPoint }, SharedWorkerGlobalScope: { new(): SharedWorkerGlobalScope, prototype: SharedWorkerGlobalScope }, SVGPoint: { new(x?: number, y?: number, z?: number, w?: number): DOMPoint, prototype: DOMPoint, fromPoint: (other?: DOMPointInit) => DOMPoint }, DOMPointReadOnly: { new(x?: number, y?: number, z?: number, w?: number): DOMPointReadOnly, prototype: DOMPointReadOnly, fromPoint: (other?: DOMPointInit) => DOMPointReadOnly }, DOMQuad: { new(p1?: DOMPointInit, p2?: DOMPointInit, p3?: DOMPointInit, p4?: DOMPointInit): DOMQuad, prototype: DOMQuad, fromQuad: (other?: DOMQuadInit) => DOMQuad, fromRect: (other?: DOMRectInit) => DOMQuad }, DOMRect: { new(x?: number, y?: number, width?: number, height?: number): DOMRect, prototype: DOMRect, fromRect: (other?: DOMRectInit) => DOMRect }, SVGRect: { new(x?: number, y?: number, width?: number, height?: number): DOMRect, prototype: DOMRect, fromRect: (other?: DOMRectInit) => DOMRect }, DOMRectList: { new(): DOMRectList, prototype: DOMRectList }, DOMRectReadOnly: { new(x?: number, y?: number, width?: number, height?: number): DOMRectReadOnly, prototype: DOMRectReadOnly, fromRect: (other?: DOMRectInit) => DOMRectReadOnly }, DOMStringList: { new(): DOMStringList, prototype: DOMStringList }, DOMStringMap: { new(): DOMStringMap, prototype: DOMStringMap }, DOMTokenList: { new(): DOMTokenList, prototype: DOMTokenList }, DataTransfer: { new(): DataTransfer, prototype: DataTransfer }, DataTransferItem: { new(): DataTransferItem, prototype: DataTransferItem }, DataTransferItemList: { new(): DataTransferItemList, prototype: DataTransferItemList }, DecompressionStream: { new(format: CompressionFormat): DecompressionStream, prototype: DecompressionStream }, DelayNode: { new(context: BaseAudioContext, options?: DelayOptions): DelayNode, prototype: DelayNode }, DeviceMotionEvent: { new(type: string, eventInitDict?: DeviceMotionEventInit): DeviceMotionEvent, prototype: DeviceMotionEvent }, DeviceOrientationEvent: { new(type: string, eventInitDict?: DeviceOrientationEventInit): DeviceOrientationEvent, prototype: DeviceOrientationEvent }, Document: { new(): Document, prototype: Document, parseHTMLUnsafe: (html: string) => Document }, DocumentFragment: { new(): DocumentFragment, prototype: DocumentFragment }, DocumentTimeline: { new(options?: DocumentTimelineOptions): DocumentTimeline, prototype: DocumentTimeline }, DocumentType: { new(): DocumentType, prototype: DocumentType }, DragEvent: { new(type: string, eventInitDict?: DragEventInit): DragEvent, prototype: DragEvent }, DynamicsCompressorNode: { new(context: BaseAudioContext, options?: DynamicsCompressorOptions): DynamicsCompressorNode, prototype: DynamicsCompressorNode }, Element: { new(): Element, prototype: Element }, ElementInternals: { new(): ElementInternals, prototype: ElementInternals }, EncodedVideoChunk: { new(init: EncodedVideoChunkInit): EncodedVideoChunk, prototype: EncodedVideoChunk }, ErrorEvent: { new(type: string, eventInitDict?: ErrorEventInit): ErrorEvent, prototype: ErrorEvent }, Event: { new(type: string, eventInitDict?: EventInit): Event, prototype: Event, readonly NONE: 0, readonly CAPTURING_PHASE: 1, readonly AT_TARGET: 2, readonly BUBBLING_PHASE: 3 }, EventCounts: { new(): EventCounts, prototype: EventCounts }, EventSource: { new(url: string | URL, eventSourceInitDict?: EventSourceInit): EventSource, prototype: EventSource, readonly CONNECTING: 0, readonly OPEN: 1, readonly CLOSED: 2 }, EventTarget: { new(): EventTarget, prototype: EventTarget }, External: { new(): External, prototype: External }, File: { new(fileBits: BlobPart[], fileName: string, options?: FilePropertyBag): File, prototype: File }, FileList: { new(): FileList, prototype: FileList }, FileReader: { new(): FileReader, prototype: FileReader, readonly EMPTY: 0, readonly LOADING: 1, readonly DONE: 2 }, FileSystem: { new(): FileSystem, prototype: FileSystem }, FileSystemDirectoryEntry: { new(): FileSystemDirectoryEntry, prototype: FileSystemDirectoryEntry }, EncodedAudioChunk: { new(init: EncodedAudioChunkInit): EncodedAudioChunk, prototype: EncodedAudioChunk }, FileSystemDirectoryHandle: { new(): FileSystemDirectoryHandle, prototype: FileSystemDirectoryHandle }, FileSystemDirectoryReader: { new(): FileSystemDirectoryReader, prototype: FileSystemDirectoryReader }, FileSystemEntry: { new(): FileSystemEntry, prototype: FileSystemEntry }, FileSystemFileEntry: { new(): FileSystemFileEntry, prototype: FileSystemFileEntry }, FileSystemFileHandle: { new(): FileSystemFileHandle, prototype: FileSystemFileHandle }, FileSystemHandle: { new(): FileSystemHandle, prototype: FileSystemHandle }, FileSystemWritableFileStream: { new(): FileSystemWritableFileStream, prototype: FileSystemWritableFileStream }, FocusEvent: { new(type: string, eventInitDict?: FocusEventInit): FocusEvent, prototype: FocusEvent }, FontFace: { new(family: string, source: string | BinaryData, descriptors?: FontFaceDescriptors): FontFace, prototype: FontFace }, FontFaceSet: { new(initialFaces: FontFace[]): FontFaceSet, prototype: FontFaceSet }, FontFaceSetLoadEvent: { new(type: string, eventInitDict?: FontFaceSetLoadEventInit): FontFaceSetLoadEvent, prototype: FontFaceSetLoadEvent }, FormData: { new(form?: HTMLFormElement, submitter?: HTMLElement): FormData, prototype: FormData }, FormDataEvent: { new(type: string, eventInitDict: FormDataEventInit): FormDataEvent, prototype: FormDataEvent }, GainNode: { new(context: BaseAudioContext, options?: GainOptions): GainNode, prototype: GainNode }, Gamepad: { new(): Gamepad, prototype: Gamepad }, GamepadButton: { new(): GamepadButton, prototype: GamepadButton }, GamepadEvent: { new(type: string, eventInitDict: GamepadEventInit): GamepadEvent, prototype: GamepadEvent }, GamepadHapticActuator: { new(): GamepadHapticActuator, prototype: GamepadHapticActuator }, Geolocation: { new(): Geolocation, prototype: Geolocation }, GeolocationCoordinates: { new(): GeolocationCoordinates, prototype: GeolocationCoordinates }, GeolocationPosition: { new(): GeolocationPosition, prototype: GeolocationPosition }, GeolocationPositionError: { new(): GeolocationPositionError, prototype: GeolocationPositionError, readonly PERMISSION_DENIED: 1, readonly POSITION_UNAVAILABLE: 2, readonly TIMEOUT: 3 }, FragmentDirective: { new(): FragmentDirective, prototype: FragmentDirective }, HTMLAllCollection: { new(): HTMLAllCollection, prototype: HTMLAllCollection }, HTMLAnchorElement: { new(): HTMLAnchorElement, prototype: HTMLAnchorElement }, HTMLAreaElement: { new(): HTMLAreaElement, prototype: HTMLAreaElement }, HTMLAudioElement: { new(): HTMLAudioElement, prototype: HTMLAudioElement }, HTMLBRElement: { new(): HTMLBRElement, prototype: HTMLBRElement }, HTMLBaseElement: { new(): HTMLBaseElement, prototype: HTMLBaseElement }, HTMLBodyElement: { new(): HTMLBodyElement, prototype: HTMLBodyElement }, WindowClient: { new(): WindowClient, prototype: WindowClient }, HTMLButtonElement: { new(): HTMLButtonElement, prototype: HTMLButtonElement }, HTMLCanvasElement: { new(): HTMLCanvasElement, prototype: HTMLCanvasElement }, HTMLCollection: { new(): HTMLCollection, prototype: HTMLCollection }, HTMLDListElement: { new(): HTMLDListElement, prototype: HTMLDListElement }, WorkerGlobalScope: { new(): WorkerGlobalScope, prototype: WorkerGlobalScope }, HTMLDataElement: { new(): HTMLDataElement, prototype: HTMLDataElement }, HTMLDataListElement: { new(): HTMLDataListElement, prototype: HTMLDataListElement }, WorkerLocation: { new(): WorkerLocation, prototype: WorkerLocation }, WorkerNavigator: { new(): WorkerNavigator, prototype: WorkerNavigator }, HTMLDetailsElement: { new(): HTMLDetailsElement, prototype: HTMLDetailsElement }, HTMLDialogElement: { new(): HTMLDialogElement, prototype: HTMLDialogElement }, HTMLDirectoryElement: { new(): HTMLDirectoryElement, prototype: HTMLDirectoryElement }, HTMLDivElement: { new(): HTMLDivElement, prototype: HTMLDivElement }, HTMLDocument: { new(): HTMLDocument, prototype: HTMLDocument }, HTMLElement: { new(): HTMLElement, prototype: HTMLElement }, HTMLEmbedElement: { new(): HTMLEmbedElement, prototype: HTMLEmbedElement }, HTMLFieldSetElement: { new(): HTMLFieldSetElement, prototype: HTMLFieldSetElement }, HTMLFontElement: { new(): HTMLFontElement, prototype: HTMLFontElement }, HTMLFormControlsCollection: { new(): HTMLFormControlsCollection, prototype: HTMLFormControlsCollection }, HTMLFormElement: { new(): HTMLFormElement, prototype: HTMLFormElement }, HTMLFrameElement: { new(): HTMLFrameElement, prototype: HTMLFrameElement }, HTMLFrameSetElement: { new(): HTMLFrameSetElement, prototype: HTMLFrameSetElement }, HTMLHRElement: { new(): HTMLHRElement, prototype: HTMLHRElement }, onrtctransform: (ev: RTCTransformEvent) => any, HTMLHeadElement: { new(): HTMLHeadElement, prototype: HTMLHeadElement }, HTMLHeadingElement: { new(): HTMLHeadingElement, prototype: HTMLHeadingElement }, HTMLHtmlElement: { new(): HTMLHtmlElement, prototype: HTMLHtmlElement }, fonts: FontFaceSet, HTMLIFrameElement: { new(): HTMLIFrameElement, prototype: HTMLIFrameElement }, HTMLImageElement: { new(): HTMLImageElement, prototype: HTMLImageElement }, HTMLInputElement: { new(): HTMLInputElement, prototype: HTMLInputElement }, HTMLLIElement: { new(): HTMLLIElement, prototype: HTMLLIElement }, HTMLLabelElement: { new(): HTMLLabelElement, prototype: HTMLLabelElement }, HTMLLegendElement: { new(): HTMLLegendElement, prototype: HTMLLegendElement }, HTMLLinkElement: { new(): HTMLLinkElement, prototype: HTMLLinkElement }, HTMLMapElement: { new(): HTMLMapElement, prototype: HTMLMapElement }, HTMLMarqueeElement: { new(): HTMLMarqueeElement, prototype: HTMLMarqueeElement }, HTMLMediaElement: { new(): HTMLMediaElement, prototype: HTMLMediaElement, readonly NETWORK_EMPTY: 0, readonly NETWORK_IDLE: 1, readonly NETWORK_LOADING: 2, readonly NETWORK_NO_SOURCE: 3, readonly HAVE_NOTHING: 0, readonly HAVE_METADATA: 1, readonly HAVE_CURRENT_DATA: 2, readonly HAVE_FUTURE_DATA: 3, readonly HAVE_ENOUGH_DATA: 4 }, HTMLMenuElement: { new(): HTMLMenuElement, prototype: HTMLMenuElement }, HTMLMetaElement: { new(): HTMLMetaElement, prototype: HTMLMetaElement }, HTMLMeterElement: { new(): HTMLMeterElement, prototype: HTMLMeterElement }, HTMLModElement: { new(): HTMLModElement, prototype: HTMLModElement }, HTMLOListElement: { new(): HTMLOListElement, prototype: HTMLOListElement }, HTMLObjectElement: { new(): HTMLObjectElement, prototype: HTMLObjectElement }, HTMLOptGroupElement: { new(): HTMLOptGroupElement, prototype: HTMLOptGroupElement }, HTMLOptionElement: { new(): HTMLOptionElement, prototype: HTMLOptionElement }, HTMLOptionsCollection: { new(): HTMLOptionsCollection, prototype: HTMLOptionsCollection }, HTMLOutputElement: { new(): HTMLOutputElement, prototype: HTMLOutputElement }, HTMLParagraphElement: { new(): HTMLParagraphElement, prototype: HTMLParagraphElement }, HTMLParamElement: { new(): HTMLParamElement, prototype: HTMLParamElement }, HTMLPictureElement: { new(): HTMLPictureElement, prototype: HTMLPictureElement }, HTMLPreElement: { new(): HTMLPreElement, prototype: HTMLPreElement }, HTMLProgressElement: { new(): HTMLProgressElement, prototype: HTMLProgressElement }, HTMLQuoteElement: { new(): HTMLQuoteElement, prototype: HTMLQuoteElement }, HTMLScriptElement: { new(): HTMLScriptElement, prototype: HTMLScriptElement, supports: (type: string) => boolean }, HTMLSelectElement: { new(): HTMLSelectElement, prototype: HTMLSelectElement }, HTMLSlotElement: { new(): HTMLSlotElement, prototype: HTMLSlotElement }, HTMLSourceElement: { new(): HTMLSourceElement, prototype: HTMLSourceElement }, HTMLSpanElement: { new(): HTMLSpanElement, prototype: HTMLSpanElement }, HTMLStyleElement: { new(): HTMLStyleElement, prototype: HTMLStyleElement }, HTMLTableCaptionElement: { new(): HTMLTableCaptionElement, prototype: HTMLTableCaptionElement }, HTMLTableCellElement: { new(): HTMLTableCellElement, prototype: HTMLTableCellElement }, HTMLTableColElement: { new(): HTMLTableColElement, prototype: HTMLTableColElement }, HTMLTableElement: { new(): HTMLTableElement, prototype: HTMLTableElement }, HTMLTableRowElement: { new(): HTMLTableRowElement, prototype: HTMLTableRowElement }, HTMLTableSectionElement: { new(): HTMLTableSectionElement, prototype: HTMLTableSectionElement }, HTMLTemplateElement: { new(): HTMLTemplateElement, prototype: HTMLTemplateElement }, HTMLTextAreaElement: { new(): HTMLTextAreaElement, prototype: HTMLTextAreaElement }, HTMLTimeElement: { new(): HTMLTimeElement, prototype: HTMLTimeElement }, HTMLTitleElement: { new(): HTMLTitleElement, prototype: HTMLTitleElement }, HTMLTrackElement: { new(): HTMLTrackElement, prototype: HTMLTrackElement, readonly NONE: 0, readonly LOADING: 1, readonly LOADED: 2, readonly ERROR: 3 }, HTMLUListElement: { new(): HTMLUListElement, prototype: HTMLUListElement }, HTMLUnknownElement: { new(): HTMLUnknownElement, prototype: HTMLUnknownElement }, HTMLVideoElement: { new(): HTMLVideoElement, prototype: HTMLVideoElement }, HashChangeEvent: { new(type: string, eventInitDict?: HashChangeEventInit): HashChangeEvent, prototype: HashChangeEvent }, Headers: { new(init?: HeadersInit): Headers, prototype: Headers }, Highlight: { new(...initialRanges: AbstractRange[]): Highlight, prototype: Highlight }, HighlightRegistry: { new(): HighlightRegistry, prototype: HighlightRegistry }, History: { new(): History, prototype: History }, IDBCursor: { new(): IDBCursor, prototype: IDBCursor }, IDBCursorWithValue: { new(): IDBCursorWithValue, prototype: IDBCursorWithValue }, IDBDatabase: { new(): IDBDatabase, prototype: IDBDatabase }, IDBFactory: { new(): IDBFactory, prototype: IDBFactory }, IDBIndex: { new(): IDBIndex, prototype: IDBIndex }, IDBKeyRange: { new(): IDBKeyRange, prototype: IDBKeyRange, bound: (lower: any, upper: any, lowerOpen?: boolean, upperOpen?: boolean) => IDBKeyRange, lowerBound: (lower: any, open?: boolean) => IDBKeyRange, only: (value: any) => IDBKeyRange, upperBound: (upper: any, open?: boolean) => IDBKeyRange }, IDBObjectStore: { new(): IDBObjectStore, prototype: IDBObjectStore }, IDBOpenDBRequest: { new(): IDBOpenDBRequest, prototype: IDBOpenDBRequest }, IDBRequest: { new(): IDBRequest<any>, prototype: IDBRequest<any> }, IDBTransaction: { new(): IDBTransaction, prototype: IDBTransaction }, IDBVersionChangeEvent: { new(type: string, eventInitDict?: IDBVersionChangeEventInit): IDBVersionChangeEvent, prototype: IDBVersionChangeEvent }, IIRFilterNode: { new(context: BaseAudioContext, options: IIRFilterOptions): IIRFilterNode, prototype: IIRFilterNode }, IdleDeadline: { new(): IdleDeadline, prototype: IdleDeadline }, ImageBitmap: { new(): ImageBitmap, prototype: ImageBitmap }, ImageBitmapRenderingContext: { new(): ImageBitmapRenderingContext, prototype: ImageBitmapRenderingContext }, ImageData: { new(sw: number, sh: number, settings?: ImageDataSettings): ImageData, new(data: Uint8ClampedArray<ArrayBufferLike>, sw: number, sh?: number, settings?: ImageDataSettings): ImageData, prototype: ImageData }, InputDeviceInfo: { new(): InputDeviceInfo, prototype: InputDeviceInfo }, InputEvent: { new(type: string, eventInitDict?: InputEventInit): InputEvent, prototype: InputEvent }, IntersectionObserver: { new(callback: IntersectionObserverCallback, options?: IntersectionObserverInit): IntersectionObserver, prototype: IntersectionObserver }, IntersectionObserverEntry: { new(intersectionObserverEntryInit: IntersectionObserverEntryInit): IntersectionObserverEntry, prototype: IntersectionObserverEntry }, KeyboardEvent: { new(type: string, eventInitDict?: KeyboardEventInit): KeyboardEvent, prototype: KeyboardEvent, readonly DOM_KEY_LOCATION_STANDARD: 0, readonly DOM_KEY_LOCATION_LEFT: 1, readonly DOM_KEY_LOCATION_RIGHT: 2, readonly DOM_KEY_LOCATION_NUMPAD: 3 }, KeyframeEffect: { new(target: Element, keyframes: Keyframe[] | PropertyIndexedKeyframes, options?: number | KeyframeEffectOptions): KeyframeEffect, new(source: KeyframeEffect): KeyframeEffect, prototype: KeyframeEffect }, LargestContentfulPaint: { new(): LargestContentfulPaint, prototype: LargestContentfulPaint }, Location: { new(): Location, prototype: Location }, Lock: { new(): Lock, prototype: Lock }, LockManager: { new(): LockManager, prototype: LockManager }, MIDIAccess: { new(): MIDIAccess, prototype: MIDIAccess }, MIDIConnectionEvent: { new(type: string, eventInitDict?: MIDIConnectionEventInit): MIDIConnectionEvent, prototype: MIDIConnectionEvent }, MIDIInput: { new(): MIDIInput, prototype: MIDIInput }, MIDIInputMap: { new(): MIDIInputMap, prototype: MIDIInputMap }, MIDIMessageEvent: { new(type: string, eventInitDict?: MIDIMessageEventInit): MIDIMessageEvent, prototype: MIDIMessageEvent }, MIDIOutput: { new(): MIDIOutput, prototype: MIDIOutput }, MIDIOutputMap: { new(): MIDIOutputMap, prototype: MIDIOutputMap }, MIDIPort: { new(): MIDIPort, prototype: MIDIPort }, MathMLElement: { new(): MathMLElement, prototype: MathMLElement }, MediaCapabilities: { new(): MediaCapabilities, prototype: MediaCapabilities }, MediaDeviceInfo: { new(): MediaDeviceInfo, prototype: MediaDeviceInfo }, MediaDevices: { new(): MediaDevices, prototype: MediaDevices }, MediaElementAudioSourceNode: { new(context: AudioContext, options: MediaElementAudioSourceOptions): MediaElementAudioSourceNode, prototype: MediaElementAudioSourceNode }, MediaEncryptedEvent: { new(type: string, eventInitDict?: MediaEncryptedEventInit): MediaEncryptedEvent, prototype: MediaEncryptedEvent }, MediaError: { new(): MediaError, prototype: MediaError, readonly MEDIA_ERR_ABORTED: 1, readonly MEDIA_ERR_NETWORK: 2, readonly MEDIA_ERR_DECODE: 3, readonly MEDIA_ERR_SRC_NOT_SUPPORTED: 4 }, MediaKeyMessageEvent: { new(type: string, eventInitDict: MediaKeyMessageEventInit): MediaKeyMessageEvent, prototype: MediaKeyMessageEvent }, MediaKeySession: { new(): MediaKeySession, prototype: MediaKeySession }, MediaKeyStatusMap: { new(): MediaKeyStatusMap, prototype: MediaKeyStatusMap }, MediaKeySystemAccess: { new(): MediaKeySystemAccess, prototype: MediaKeySystemAccess }, MediaKeys: { new(): MediaKeys, prototype: MediaKeys }, MediaList: { new(): MediaList, prototype: MediaList }, MediaMetadata: { new(init?: MediaMetadataInit): MediaMetadata, prototype: MediaMetadata }, MediaQueryList: { new(): MediaQueryList, prototype: MediaQueryList }, MediaQueryListEvent: { new(type: string, eventInitDict?: MediaQueryListEventInit): MediaQueryListEvent, prototype: MediaQueryListEvent }, MediaRecorder: { new(stream: MediaStream, options?: MediaRecorderOptions): MediaRecorder, prototype: MediaRecorder, isTypeSupported: (type: string) => boolean }, MediaSession: { new(): MediaSession, prototype: MediaSession }, MediaSource: { new(): MediaSource, prototype: MediaSource, readonly canConstructInDedicatedWorker: boolean, isTypeSupported: (type: string) => boolean }, MediaSourceHandle: { new(): MediaSourceHandle, prototype: MediaSourceHandle }, MediaStream: { new(): MediaStream, new(stream: MediaStream): MediaStream, new(tracks: MediaStreamTrack[]): MediaStream, prototype: MediaStream }, MediaStreamAudioDestinationNode: { new(context: AudioContext, options?: AudioNodeOptions): MediaStreamAudioDestinationNode, prototype: MediaStreamAudioDestinationNode }, MediaStreamAudioSourceNode: { new(context: AudioContext, options: MediaStreamAudioSourceOptions): MediaStreamAudioSourceNode, prototype: MediaStreamAudioSourceNode }, MediaStreamTrack: { new(): MediaStreamTrack, prototype: MediaStreamTrack }, MediaStreamTrackEvent: { new(type: string, eventInitDict: MediaStreamTrackEventInit): MediaStreamTrackEvent, prototype: MediaStreamTrackEvent }, MessageChannel: { new(): MessageChannel, prototype: MessageChannel }, MessageEvent: { new<T>(type: string, eventInitDict?: MessageEventInit<T>): MessageEvent<T>, prototype: MessageEvent<any> }, MessagePort: { new(): MessagePort, prototype: MessagePort }, MimeType: { new(): MimeType, prototype: MimeType }, MimeTypeArray: { new(): MimeTypeArray, prototype: MimeTypeArray }, MouseEvent: { new(type: string, eventInitDict?: MouseEventInit): MouseEvent, prototype: MouseEvent }, MutationEvent: { new(): MutationEvent, prototype: MutationEvent, readonly MODIFICATION: 1, readonly ADDITION: 2, readonly REMOVAL: 3 }, MutationObserver: { new(callback: MutationCallback): MutationObserver, prototype: MutationObserver }, MutationRecord: { new(): MutationRecord, prototype: MutationRecord }, NamedNodeMap: { new(): NamedNodeMap, prototype: NamedNodeMap }, NavigationPreloadManager: { new(): NavigationPreloadManager, prototype: NavigationPreloadManager }, Navigator: { new(): Navigator, prototype: Navigator }, Node: { new(): Node, prototype: Node, readonly ELEMENT_NODE: 1, readonly ATTRIBUTE_NODE: 2, readonly TEXT_NODE: 3, readonly CDATA_SECTION_NODE: 4, readonly ENTITY_REFERENCE_NODE: 5, readonly ENTITY_NODE: 6, readonly PROCESSING_INSTRUCTION_NODE: 7, readonly COMMENT_NODE: 8, readonly DOCUMENT_NODE: 9, readonly DOCUMENT_TYPE_NODE: 10, readonly DOCUMENT_FRAGMENT_NODE: 11, readonly NOTATION_NODE: 12, readonly DOCUMENT_POSITION_DISCONNECTED: 1, readonly DOCUMENT_POSITION_PRECEDING: 2, readonly DOCUMENT_POSITION_FOLLOWING: 4, readonly DOCUMENT_POSITION_CONTAINS: 8, readonly DOCUMENT_POSITION_CONTAINED_BY: 16, readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: 32 }, NodeIterator: { new(): NodeIterator, prototype: NodeIterator }, NodeList: { new(): NodeList, prototype: NodeList }, Notification: { new(title: string, options?: NotificationOptions): Notification, prototype: Notification, readonly permission: NotificationPermission, requestPermission: (deprecatedCallback?: NotificationPermissionCallback) => Promise<NotificationPermission> }, OfflineAudioCompletionEvent: { new(type: string, eventInitDict: OfflineAudioCompletionEventInit): OfflineAudioCompletionEvent, prototype: OfflineAudioCompletionEvent }, OfflineAudioContext: { new(contextOptions: OfflineAudioContextOptions): OfflineAudioContext, new(numberOfChannels: number, length: number, sampleRate: number): OfflineAudioContext, prototype: OfflineAudioContext }, OffscreenCanvas: { new(width: number, height: number): OffscreenCanvas, prototype: OffscreenCanvas }, OffscreenCanvasRenderingContext2D: { new(): OffscreenCanvasRenderingContext2D, prototype: OffscreenCanvasRenderingContext2D }, OscillatorNode: { new(context: BaseAudioContext, options?: OscillatorOptions): OscillatorNode, prototype: OscillatorNode }, OverconstrainedError: { new(constraint: string, message?: string): OverconstrainedError, prototype: OverconstrainedError }, PageTransitionEvent: { new(type: string, eventInitDict?: PageTransitionEventInit): PageTransitionEvent, prototype: PageTransitionEvent }, PannerNode: { new(context: BaseAudioContext, options?: PannerOptions): PannerNode, prototype: PannerNode }, Path2D: { new(path?: string | Path2D): Path2D, prototype: Path2D }, PaymentMethodChangeEvent: { new(type: string, eventInitDict?: PaymentMethodChangeEventInit): PaymentMethodChangeEvent, prototype: PaymentMethodChangeEvent }, PaymentRequest: { new(methodData: PaymentMethodData[], details: PaymentDetailsInit): PaymentRequest, prototype: PaymentRequest }, PaymentRequestUpdateEvent: { new(type: string, eventInitDict?: PaymentRequestUpdateEventInit): PaymentRequestUpdateEvent, prototype: PaymentRequestUpdateEvent }, PaymentResponse: { new(): PaymentResponse, prototype: PaymentResponse }, Performance: { new(): Performance, prototype: Performance }, PerformanceEntry: { new(): PerformanceEntry, prototype: PerformanceEntry }, PerformanceEventTiming: { new(): PerformanceEventTiming, prototype: PerformanceEventTiming }, PerformanceMark: { new(markName: string, markOptions?: PerformanceMarkOptions): PerformanceMark, prototype: PerformanceMark }, PerformanceMeasure: { new(): PerformanceMeasure, prototype: PerformanceMeasure }, PerformanceNavigation: { new(): PerformanceNavigation, prototype: PerformanceNavigation, readonly TYPE_NAVIGATE: 0, readonly TYPE_RELOAD: 1, readonly TYPE_BACK_FORWARD: 2, readonly TYPE_RESERVED: 255 }, PerformanceNavigationTiming: { new(): PerformanceNavigationTiming, prototype: PerformanceNavigationTiming }, PerformanceObserver: { new(callback: PerformanceObserverCallback): PerformanceObserver, prototype: PerformanceObserver, readonly supportedEntryTypes: readonly string[] }, PerformanceObserverEntryList: { new(): PerformanceObserverEntryList, prototype: PerformanceObserverEntryList }, PerformancePaintTiming: { new(): PerformancePaintTiming, prototype: PerformancePaintTiming }, PerformanceResourceTiming: { new(): PerformanceResourceTiming, prototype: PerformanceResourceTiming }, PerformanceServerTiming: { new(): PerformanceServerTiming, prototype: PerformanceServerTiming }, PerformanceTiming: { new(): PerformanceTiming, prototype: PerformanceTiming }, PeriodicWave: { new(context: BaseAudioContext, options?: PeriodicWaveOptions): PeriodicWave, prototype: PeriodicWave }, PermissionStatus: { new(): PermissionStatus, prototype: PermissionStatus }, Permissions: { new(): Permissions, prototype: Permissions }, PictureInPictureEvent: { new(type: string, eventInitDict: PictureInPictureEventInit): PictureInPictureEvent, prototype: PictureInPictureEvent }, PictureInPictureWindow: { new(): PictureInPictureWindow, prototype: PictureInPictureWindow }, Plugin: { new(): Plugin, prototype: Plugin }, PluginArray: { new(): PluginArray, prototype: PluginArray }, PaymentAddress: { new(): PaymentAddress, prototype: PaymentAddress }, PointerEvent: { new(type: string, eventInitDict?: PointerEventInit): PointerEvent, prototype: PointerEvent }, PopStateEvent: { new(type: string, eventInitDict?: PopStateEventInit): PopStateEvent, prototype: PopStateEvent }, ProcessingInstruction: { new(): ProcessingInstruction, prototype: ProcessingInstruction }, ProgressEvent: { new(type: string, eventInitDict?: ProgressEventInit): ProgressEvent<EventTarget>, prototype: ProgressEvent<EventTarget> }, PromiseRejectionEvent: { new(type: string, eventInitDict: PromiseRejectionEventInit): PromiseRejectionEvent, prototype: PromiseRejectionEvent }, PublicKeyCredential: { new(): PublicKeyCredential, prototype: PublicKeyCredential, isConditionalMediationAvailable: () => Promise<boolean>, isUserVerifyingPlatformAuthenticatorAvailable: () => Promise<boolean> }, PushManager: { new(): PushManager, prototype: PushManager, readonly supportedContentEncodings: readonly string[] }, PushSubscription: { new(): PushSubscription, prototype: PushSubscription }, PushSubscriptionOptions: { new(): PushSubscriptionOptions, prototype: PushSubscriptionOptions }, RTCCertificate: { new(): RTCCertificate, prototype: RTCCertificate }, RTCDTMFSender: { new(): RTCDTMFSender, prototype: RTCDTMFSender }, RTCDTMFToneChangeEvent: { new(type: string, eventInitDict?: RTCDTMFToneChangeEventInit): RTCDTMFToneChangeEvent, prototype: RTCDTMFToneChangeEvent }, RTCDataChannel: { new(): RTCDataChannel, prototype: RTCDataChannel }, RTCDataChannelEvent: { new(type: string, eventInitDict: RTCDataChannelEventInit): RTCDataChannelEvent, prototype: RTCDataChannelEvent }, RTCDtlsTransport: { new(): RTCDtlsTransport, prototype: RTCDtlsTransport }, RTCEncodedAudioFrame: { new(): RTCEncodedAudioFrame, prototype: RTCEncodedAudioFrame }, RTCEncodedVideoFrame: { new(): RTCEncodedVideoFrame, prototype: RTCEncodedVideoFrame }, RTCError: { new(init: RTCErrorInit, message?: string): RTCError, prototype: RTCError }, RTCErrorEvent: { new(type: string, eventInitDict: RTCErrorEventInit): RTCErrorEvent, prototype: RTCErrorEvent }, RTCIceCandidate: { new(candidateInitDict?: RTCIceCandidateInit): RTCIceCandidate, prototype: RTCIceCandidate }, RTCIceTransport: { new(): RTCIceTransport, prototype: RTCIceTransport }, RTCPeerConnection: { new(configuration?: RTCConfiguration): RTCPeerConnection, prototype: RTCPeerConnection, generateCertificate: (keygenAlgorithm: AlgorithmIdentifier) => Promise<RTCCertificate> }, RTCPeerConnectionIceErrorEvent: { new(type: string, eventInitDict: RTCPeerConnectionIceErrorEventInit): RTCPeerConnectionIceErrorEvent, prototype: RTCPeerConnectionIceErrorEvent }, RTCPeerConnectionIceEvent: { new(type: string, eventInitDict?: RTCPeerConnectionIceEventInit): RTCPeerConnectionIceEvent, prototype: RTCPeerConnectionIceEvent }, RTCRtpReceiver: { new(): RTCRtpReceiver, prototype: RTCRtpReceiver, getCapabilities: (kind: string) => RTCRtpCapabilities }, RTCRtpScriptTransform: { new(worker: Worker, options?: any, transfer?: any[]): RTCRtpScriptTransform, prototype: RTCRtpScriptTransform }, RTCRtpSender: { new(): RTCRtpSender, prototype: RTCRtpSender, getCapabilities: (kind: string) => RTCRtpCapabilities }, RTCRtpTransceiver: { new(): RTCRtpTransceiver, prototype: RTCRtpTransceiver }, RTCSctpTransport: { new(): RTCSctpTransport, prototype: RTCSctpTransport }, RTCSessionDescription: { new(descriptionInitDict: RTCSessionDescriptionInit): RTCSessionDescription, prototype: RTCSessionDescription }, RTCStatsReport: { new(): RTCStatsReport, prototype: RTCStatsReport }, RTCTrackEvent: { new(type: string, eventInitDict: RTCTrackEventInit): RTCTrackEvent, prototype: RTCTrackEvent }, RadioNodeList: { new(): RadioNodeList, prototype: RadioNodeList }, Range: { new(): Range, prototype: Range, readonly START_TO_START: 0, readonly START_TO_END: 1, readonly END_TO_END: 2, readonly END_TO_START: 3 }, ReadableByteStreamController: { new(): ReadableByteStreamController, prototype: ReadableByteStreamController }, ReadableStream: { new(underlyingSource: UnderlyingByteSource, strategy?: { highWaterMark?: number }): ReadableStream<Uint8Array<ArrayBufferLike>>, new<R>(underlyingSource: UnderlyingDefaultSource<R>, strategy?: QueuingStrategy<R>): ReadableStream<R>, new<R>(underlyingSource?: UnderlyingSource<R>, strategy?: QueuingStrategy<R>): ReadableStream<R>, prototype: ReadableStream<any> }, ReadableStreamBYOBReader: { new(stream: ReadableStream<any>): ReadableStreamBYOBReader, prototype: ReadableStreamBYOBReader }, ReadableStreamBYOBRequest: { new(): ReadableStreamBYOBRequest, prototype: ReadableStreamBYOBRequest }, ReadableStreamDefaultController: { new(): ReadableStreamDefaultController<any>, prototype: ReadableStreamDefaultController<any> }, ReadableStreamDefaultReader: { new<R>(stream: ReadableStream<R>): ReadableStreamDefaultReader<R>, prototype: ReadableStreamDefaultReader<any> }, RemotePlayback: { new(): RemotePlayback, prototype: RemotePlayback }, Report: { new(): Report, prototype: Report }, ReportBody: { new(): ReportBody, prototype: ReportBody }, ReportingObserver: { new(callback: ReportingObserverCallback, options?: ReportingObserverOptions): ReportingObserver, prototype: ReportingObserver }, Request: { new(input: URL | RequestInfo, init?: RequestInit): Request, prototype: Request }, ResizeObserver: { new(callback: ResizeObserverCallback): ResizeObserver, prototype: ResizeObserver }, ResizeObserverEntry: { new(): ResizeObserverEntry, prototype: ResizeObserverEntry }, ResizeObserverSize: { new(): ResizeObserverSize, prototype: ResizeObserverSize }, Response: { new(body?: BodyInit, init?: ResponseInit): Response, prototype: Response, error: () => Response, json: (data: any, init?: ResponseInit) => Response, redirect: (url: string | URL, status?: number) => Response }, SVGAElement: { new(): SVGAElement, prototype: SVGAElement }, SVGAngle: { new(): SVGAngle, prototype: SVGAngle, readonly SVG_ANGLETYPE_UNKNOWN: 0, readonly SVG_ANGLETYPE_UNSPECIFIED: 1, readonly SVG_ANGLETYPE_DEG: 2, readonly SVG_ANGLETYPE_RAD: 3, readonly SVG_ANGLETYPE_GRAD: 4 }, SVGAnimateElement: { new(): SVGAnimateElement, prototype: SVGAnimateElement }, SVGAnimateMotionElement: { new(): SVGAnimateMotionElement, prototype: SVGAnimateMotionElement }, SVGAnimateTransformElement: { new(): SVGAnimateTransformElement, prototype: SVGAnimateTransformElement }, SVGAnimatedAngle: { new(): SVGAnimatedAngle, prototype: SVGAnimatedAngle }, SVGAnimatedBoolean: { new(): SVGAnimatedBoolean, prototype: SVGAnimatedBoolean }, SVGAnimatedEnumeration: { new(): SVGAnimatedEnumeration, prototype: SVGAnimatedEnumeration }, SVGAnimatedInteger: { new(): SVGAnimatedInteger, prototype: SVGAnimatedInteger }, SVGAnimatedLength: { new(): SVGAnimatedLength, prototype: SVGAnimatedLength }, SVGAnimatedLengthList: { new(): SVGAnimatedLengthList, prototype: SVGAnimatedLengthList }, SVGAnimatedNumber: { new(): SVGAnimatedNumber, prototype: SVGAnimatedNumber }, SVGAnimatedNumberList: { new(): SVGAnimatedNumberList, prototype: SVGAnimatedNumberList }, SVGAnimatedPreserveAspectRatio: { new(): SVGAnimatedPreserveAspectRatio, prototype: SVGAnimatedPreserveAspectRatio }, SVGAnimatedRect: { new(): SVGAnimatedRect, prototype: SVGAnimatedRect }, SVGAnimatedString: { new(): SVGAnimatedString, prototype: SVGAnimatedString }, SVGAnimatedTransformList: { new(): SVGAnimatedTransformList, prototype: SVGAnimatedTransformList }, SVGAnimationElement: { new(): SVGAnimationElement, prototype: SVGAnimationElement }, SVGCircleElement: { new(): SVGCircleElement, prototype: SVGCircleElement }, SVGClipPathElement: { new(): SVGClipPathElement, prototype: SVGClipPathElement }, SVGComponentTransferFunctionElement: { new(): SVGComponentTransferFunctionElement, prototype: SVGComponentTransferFunctionElement, readonly SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN: 0, readonly SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY: 1, readonly SVG_FECOMPONENTTRANSFER_TYPE_TABLE: 2, readonly SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE: 3, readonly SVG_FECOMPONENTTRANSFER_TYPE_LINEAR: 4, readonly SVG_FECOMPONENTTRANSFER_TYPE_GAMMA: 5 }, SVGDefsElement: { new(): SVGDefsElement, prototype: SVGDefsElement }, SVGDescElement: { new(): SVGDescElement, prototype: SVGDescElement }, SVGElement: { new(): SVGElement, prototype: SVGElement }, SVGEllipseElement: { new(): SVGEllipseElement, prototype: SVGEllipseElement }, SVGFEBlendElement: { new(): SVGFEBlendElement, prototype: SVGFEBlendElement, readonly SVG_FEBLEND_MODE_UNKNOWN: 0, readonly SVG_FEBLEND_MODE_NORMAL: 1, readonly SVG_FEBLEND_MODE_MULTIPLY: 2, readonly SVG_FEBLEND_MODE_SCREEN: 3, readonly SVG_FEBLEND_MODE_DARKEN: 4, readonly SVG_FEBLEND_MODE_LIGHTEN: 5, readonly SVG_FEBLEND_MODE_OVERLAY: 6, readonly SVG_FEBLEND_MODE_COLOR_DODGE: 7, readonly SVG_FEBLEND_MODE_COLOR_BURN: 8, readonly SVG_FEBLEND_MODE_HARD_LIGHT: 9, readonly SVG_FEBLEND_MODE_SOFT_LIGHT: 10, readonly SVG_FEBLEND_MODE_DIFFERENCE: 11, readonly SVG_FEBLEND_MODE_EXCLUSION: 12, readonly SVG_FEBLEND_MODE_HUE: 13, readonly SVG_FEBLEND_MODE_SATURATION: 14, readonly SVG_FEBLEND_MODE_COLOR: 15, readonly SVG_FEBLEND_MODE_LUMINOSITY: 16 }, SVGFEColorMatrixElement: { new(): SVGFEColorMatrixElement, prototype: SVGFEColorMatrixElement, readonly SVG_FECOLORMATRIX_TYPE_UNKNOWN: 0, readonly SVG_FECOLORMATRIX_TYPE_MATRIX: 1, readonly SVG_FECOLORMATRIX_TYPE_SATURATE: 2, readonly SVG_FECOLORMATRIX_TYPE_HUEROTATE: 3, readonly SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA: 4 }, SVGFEComponentTransferElement: { new(): SVGFEComponentTransferElement, prototype: SVGFEComponentTransferElement }, SVGFECompositeElement: { new(): SVGFECompositeElement, prototype: SVGFECompositeElement, readonly SVG_FECOMPOSITE_OPERATOR_UNKNOWN: 0, readonly SVG_FECOMPOSITE_OPERATOR_OVER: 1, readonly SVG_FECOMPOSITE_OPERATOR_IN: 2, readonly SVG_FECOMPOSITE_OPERATOR_OUT: 3, readonly SVG_FECOMPOSITE_OPERATOR_ATOP: 4, readonly SVG_FECOMPOSITE_OPERATOR_XOR: 5, readonly SVG_FECOMPOSITE_OPERATOR_ARITHMETIC: 6 }, SVGFEConvolveMatrixElement: { new(): SVGFEConvolveMatrixElement, prototype: SVGFEConvolveMatrixElement, readonly SVG_EDGEMODE_UNKNOWN: 0, readonly SVG_EDGEMODE_DUPLICATE: 1, readonly SVG_EDGEMODE_WRAP: 2, readonly SVG_EDGEMODE_NONE: 3 }, SVGFEDiffuseLightingElement: { new(): SVGFEDiffuseLightingElement, prototype: SVGFEDiffuseLightingElement }, SVGFEDisplacementMapElement: { new(): SVGFEDisplacementMapElement, prototype: SVGFEDisplacementMapElement, readonly SVG_CHANNEL_UNKNOWN: 0, readonly SVG_CHANNEL_R: 1, readonly SVG_CHANNEL_G: 2, readonly SVG_CHANNEL_B: 3, readonly SVG_CHANNEL_A: 4 }, SVGFEDistantLightElement: { new(): SVGFEDistantLightElement, prototype: SVGFEDistantLightElement }, SVGFEDropShadowElement: { new(): SVGFEDropShadowElement, prototype: SVGFEDropShadowElement }, SVGFEFloodElement: { new(): SVGFEFloodElement, prototype: SVGFEFloodElement }, SVGFEFuncAElement: { new(): SVGFEFuncAElement, prototype: SVGFEFuncAElement }, SVGFEFuncBElement: { new(): SVGFEFuncBElement, prototype: SVGFEFuncBElement }, SVGFEFuncGElement: { new(): SVGFEFuncGElement, prototype: SVGFEFuncGElement }, SVGFEFuncRElement: { new(): SVGFEFuncRElement, prototype: SVGFEFuncRElement }, SVGFEGaussianBlurElement: { new(): SVGFEGaussianBlurElement, prototype: SVGFEGaussianBlurElement }, SVGFEImageElement: { new(): SVGFEImageElement, prototype: SVGFEImageElement }, SVGFEMergeElement: { new(): SVGFEMergeElement, prototype: SVGFEMergeElement }, SVGFEMergeNodeElement: { new(): SVGFEMergeNodeElement, prototype: SVGFEMergeNodeElement }, SVGFEMorphologyElement: { new(): SVGFEMorphologyElement, prototype: SVGFEMorphologyElement, readonly SVG_MORPHOLOGY_OPERATOR_UNKNOWN: 0, readonly SVG_MORPHOLOGY_OPERATOR_ERODE: 1, readonly SVG_MORPHOLOGY_OPERATOR_DILATE: 2 }, SVGFEOffsetElement: { new(): SVGFEOffsetElement, prototype: SVGFEOffsetElement }, SVGFEPointLightElement: { new(): SVGFEPointLightElement, prototype: SVGFEPointLightElement }, SVGFESpecularLightingElement: { new(): SVGFESpecularLightingElement, prototype: SVGFESpecularLightingElement }, SVGFESpotLightElement: { new(): SVGFESpotLightElement, prototype: SVGFESpotLightElement }, SVGFETileElement: { new(): SVGFETileElement, prototype: SVGFETileElement }, SVGFETurbulenceElement: { new(): SVGFETurbulenceElement, prototype: SVGFETurbulenceElement, readonly SVG_TURBULENCE_TYPE_UNKNOWN: 0, readonly SVG_TURBULENCE_TYPE_FRACTALNOISE: 1, readonly SVG_TURBULENCE_TYPE_TURBULENCE: 2, readonly SVG_STITCHTYPE_UNKNOWN: 0, readonly SVG_STITCHTYPE_STITCH: 1, readonly SVG_STITCHTYPE_NOSTITCH: 2 }, SVGFilterElement: { new(): SVGFilterElement, prototype: SVGFilterElement }, SVGForeignObjectElement: { new(): SVGForeignObjectElement, prototype: SVGForeignObjectElement }, SVGGElement: { new(): SVGGElement, prototype: SVGGElement }, SVGGeometryElement: { new(): SVGGeometryElement, prototype: SVGGeometryElement }, SVGGradientElement: { new(): SVGGradientElement, prototype: SVGGradientElement, readonly SVG_SPREADMETHOD_UNKNOWN: 0, readonly SVG_SPREADMETHOD_PAD: 1, readonly SVG_SPREADMETHOD_REFLECT: 2, readonly SVG_SPREADMETHOD_REPEAT: 3 }, SVGGraphicsElement: { new(): SVGGraphicsElement, prototype: SVGGraphicsElement }, SVGImageElement: { new(): SVGImageElement, prototype: SVGImageElement }, SVGLength: { new(): SVGLength, prototype: SVGLength, readonly SVG_LENGTHTYPE_UNKNOWN: 0, readonly SVG_LENGTHTYPE_NUMBER: 1, readonly SVG_LENGTHTYPE_PERCENTAGE: 2, readonly SVG_LENGTHTYPE_EMS: 3, readonly SVG_LENGTHTYPE_EXS: 4, readonly SVG_LENGTHTYPE_PX: 5, readonly SVG_LENGTHTYPE_CM: 6, readonly SVG_LENGTHTYPE_MM: 7, readonly SVG_LENGTHTYPE_IN: 8, readonly SVG_LENGTHTYPE_PT: 9, readonly SVG_LENGTHTYPE_PC: 10 }, SVGLengthList: { new(): SVGLengthList, prototype: SVGLengthList }, SVGLineElement: { new(): SVGLineElement, prototype: SVGLineElement }, SVGLinearGradientElement: { new(): SVGLinearGradientElement, prototype: SVGLinearGradientElement }, SVGMPathElement: { new(): SVGMPathElement, prototype: SVGMPathElement }, SVGMarkerElement: { new(): SVGMarkerElement, prototype: SVGMarkerElement, readonly SVG_MARKERUNITS_UNKNOWN: 0, readonly SVG_MARKERUNITS_USERSPACEONUSE: 1, readonly SVG_MARKERUNITS_STROKEWIDTH: 2, readonly SVG_MARKER_ORIENT_UNKNOWN: 0, readonly SVG_MARKER_ORIENT_AUTO: 1, readonly SVG_MARKER_ORIENT_ANGLE: 2 }, SVGMaskElement: { new(): SVGMaskElement, prototype: SVGMaskElement }, SVGMetadataElement: { new(): SVGMetadataElement, prototype: SVGMetadataElement }, SVGNumber: { new(): SVGNumber, prototype: SVGNumber }, SVGNumberList: { new(): SVGNumberList, prototype: SVGNumberList }, SVGPathElement: { new(): SVGPathElement, prototype: SVGPathElement }, SVGPatternElement: { new(): SVGPatternElement, prototype: SVGPatternElement }, SVGPointList: { new(): SVGPointList, prototype: SVGPointList }, SVGPolygonElement: { new(): SVGPolygonElement, prototype: SVGPolygonElement }, SVGPolylineElement: { new(): SVGPolylineElement, prototype: SVGPolylineElement }, SVGPreserveAspectRatio: { new(): SVGPreserveAspectRatio, prototype: SVGPreserveAspectRatio, readonly SVG_PRESERVEASPECTRATIO_UNKNOWN: 0, readonly SVG_PRESERVEASPECTRATIO_NONE: 1, readonly SVG_PRESERVEASPECTRATIO_XMINYMIN: 2, readonly SVG_PRESERVEASPECTRATIO_XMIDYMIN: 3, readonly SVG_PRESERVEASPECTRATIO_XMAXYMIN: 4, readonly SVG_PRESERVEASPECTRATIO_XMINYMID: 5, readonly SVG_PRESERVEASPECTRATIO_XMIDYMID: 6, readonly SVG_PRESERVEASPECTRATIO_XMAXYMID: 7, readonly SVG_PRESERVEASPECTRATIO_XMINYMAX: 8, readonly SVG_PRESERVEASPECTRATIO_XMIDYMAX: 9, readonly SVG_PRESERVEASPECTRATIO_XMAXYMAX: 10, readonly SVG_MEETORSLICE_UNKNOWN: 0, readonly SVG_MEETORSLICE_MEET: 1, readonly SVG_MEETORSLICE_SLICE: 2 }, SVGRadialGradientElement: { new(): SVGRadialGradientElement, prototype: SVGRadialGradientElement }, SVGRectElement: { new(): SVGRectElement, prototype: SVGRectElement }, SVGSVGElement: { new(): SVGSVGElement, prototype: SVGSVGElement }, SVGScriptElement: { new(): SVGScriptElement, prototype: SVGScriptElement }, SVGSetElement: { new(): SVGSetElement, prototype: SVGSetElement }, SVGStopElement: { new(): SVGStopElement, prototype: SVGStopElement }, SVGStringList: { new(): SVGStringList, prototype: SVGStringList }, SVGStyleElement: { new(): SVGStyleElement, prototype: SVGStyleElement }, SVGSwitchElement: { new(): SVGSwitchElement, prototype: SVGSwitchElement }, SVGSymbolElement: { new(): SVGSymbolElement, prototype: SVGSymbolElement }, SVGTSpanElement: { new(): SVGTSpanElement, prototype: SVGTSpanElement }, SVGTextContentElement: { new(): SVGTextContentElement, prototype: SVGTextContentElement, readonly LENGTHADJUST_UNKNOWN: 0, readonly LENGTHADJUST_SPACING: 1, readonly LENGTHADJUST_SPACINGANDGLYPHS: 2 }, SVGTextElement: { new(): SVGTextElement, prototype: SVGTextElement }, SVGTextPathElement: { new(): SVGTextPathElement, prototype: SVGTextPathElement, readonly TEXTPATH_METHODTYPE_UNKNOWN: 0, readonly TEXTPATH_METHODTYPE_ALIGN: 1, readonly TEXTPATH_METHODTYPE_STRETCH: 2, readonly TEXTPATH_SPACINGTYPE_UNKNOWN: 0, readonly TEXTPATH_SPACINGTYPE_AUTO: 1, readonly TEXTPATH_SPACINGTYPE_EXACT: 2 }, SVGTextPositioningElement: { new(): SVGTextPositioningElement, prototype: SVGTextPositioningElement }, SVGTitleElement: { new(): SVGTitleElement, prototype: SVGTitleElement }, SVGTransform: { new(): SVGTransform, prototype: SVGTransform, readonly SVG_TRANSFORM_UNKNOWN: 0, readonly SVG_TRANSFORM_MATRIX: 1, readonly SVG_TRANSFORM_TRANSLATE: 2, readonly SVG_TRANSFORM_SCALE: 3, readonly SVG_TRANSFORM_ROTATE: 4, readonly SVG_TRANSFORM_SKEWX: 5, readonly SVG_TRANSFORM_SKEWY: 6 }, SVGTransformList: { new(): SVGTransformList, prototype: SVGTransformList }, SVGUnitTypes: { new(): SVGUnitTypes, prototype: SVGUnitTypes, readonly SVG_UNIT_TYPE_UNKNOWN: 0, readonly SVG_UNIT_TYPE_USERSPACEONUSE: 1, readonly SVG_UNIT_TYPE_OBJECTBOUNDINGBOX: 2 }, SVGUseElement: { new(): SVGUseElement, prototype: SVGUseElement }, SVGViewElement: { new(): SVGViewElement, prototype: SVGViewElement }, Screen: { new(): Screen, prototype: Screen }, ScreenOrientation: { new(): ScreenOrientation, prototype: ScreenOrientation }, ScriptProcessorNode: { new(): ScriptProcessorNode, prototype: ScriptProcessorNode }, SecurityPolicyViolationEvent: { new(type: string, eventInitDict?: SecurityPolicyViolationEventInit): SecurityPolicyViolationEvent, prototype: SecurityPolicyViolationEvent }, Selection: { new(): Selection, prototype: Selection }, ServiceWorker: { new(): ServiceWorker, prototype: ServiceWorker }, ServiceWorkerContainer: { new(): ServiceWorkerContainer, prototype: ServiceWorkerContainer }, ServiceWorkerRegistration: { new(): ServiceWorkerRegistration, prototype: ServiceWorkerRegistration }, ShadowRoot: { new(): ShadowRoot, prototype: ShadowRoot }, SharedWorker: { new(scriptURL: string | URL, options?: string | WorkerOptions): SharedWorker, prototype: SharedWorker }, SourceBuffer: { new(): SourceBuffer, prototype: SourceBuffer }, SourceBufferList: { new(): SourceBufferList, prototype: SourceBufferList }, SpeechRecognitionAlternative: { new(): SpeechRecognitionAlternative, prototype: SpeechRecognitionAlternative }, SpeechRecognitionResult: { new(): SpeechRecognitionResult, prototype: SpeechRecognitionResult }, SpeechRecognitionResultList: { new(): SpeechRecognitionResultList, prototype: SpeechRecognitionResultList }, SpeechSynthesis: { new(): SpeechSynthesis, prototype: SpeechSynthesis }, SpeechSynthesisErrorEvent: { new(type: string, eventInitDict: SpeechSynthesisErrorEventInit): SpeechSynthesisErrorEvent, prototype: SpeechSynthesisErrorEvent }, SpeechSynthesisEvent: { new(type: string, eventInitDict: SpeechSynthesisEventInit): SpeechSynthesisEvent, prototype: SpeechSynthesisEvent }, SpeechSynthesisUtterance: { new(text?: string): SpeechSynthesisUtterance, prototype: SpeechSynthesisUtterance }, SpeechSynthesisVoice: { new(): SpeechSynthesisVoice, prototype: SpeechSynthesisVoice }, StaticRange: { new(init: StaticRangeInit): StaticRange, prototype: StaticRange }, StereoPannerNode: { new(context: BaseAudioContext, options?: StereoPannerOptions): StereoPannerNode, prototype: StereoPannerNode }, Storage: { new(): Storage, prototype: Storage }, StorageEvent: { new(type: string, eventInitDict?: StorageEventInit): StorageEvent, prototype: StorageEvent }, StorageManager: { new(): StorageManager, prototype: StorageManager }, StylePropertyMap: { new(): StylePropertyMap, prototype: StylePropertyMap }, StylePropertyMapReadOnly: { new(): StylePropertyMapReadOnly, prototype: StylePropertyMapReadOnly }, StyleSheet: { new(): StyleSheet, prototype: StyleSheet }, StyleSheetList: { new(): StyleSheetList, prototype: StyleSheetList }, SubmitEvent: { new(type: string, eventInitDict?: SubmitEventInit): SubmitEvent, prototype: SubmitEvent }, SubtleCrypto: { new(): SubtleCrypto, prototype: SubtleCrypto }, Text: { new(data?: string): Text, prototype: Text }, TextDecoder: { new(label?: string, options?: TextDecoderOptions): TextDecoder, prototype: TextDecoder }, TextDecoderStream: { new(label?: string, options?: TextDecoderOptions): TextDecoderStream, prototype: TextDecoderStream }, TextEncoder: { new(): TextEncoder, prototype: TextEncoder }, TextEncoderStream: { new(): TextEncoderStream, prototype: TextEncoderStream }, TextEvent: { new(): TextEvent, prototype: TextEvent }, TextMetrics: { new(): TextMetrics, prototype: TextMetrics }, TextTrack: { new(): TextTrack, prototype: TextTrack }, TextTrackCue: { new(): TextTrackCue, prototype: TextTrackCue }, TextTrackCueList: { new(): TextTrackCueList, prototype: TextTrackCueList }, TextTrackList: { new(): TextTrackList, prototype: TextTrackList }, TimeRanges: { new(): TimeRanges, prototype: TimeRanges }, ToggleEvent: { new(type: string, eventInitDict?: ToggleEventInit): ToggleEvent, prototype: ToggleEvent }, Touch: { new(touchInitDict: TouchInit): Touch, prototype: Touch }, TouchEvent: { new(type: string, eventInitDict?: TouchEventInit): TouchEvent, prototype: TouchEvent }, TouchList: { new(): TouchList, prototype: TouchList }, TrackEvent: { new(type: string, eventInitDict?: TrackEventInit): TrackEvent, prototype: TrackEvent }, TransformStream: { new<I, O>(transformer?: Transformer<I, O>, writableStrategy?: QueuingStrategy<I>, readableStrategy?: QueuingStrategy<O>): TransformStream<I, O>, prototype: TransformStream<any, any> }, TransformStreamDefaultController: { new(): TransformStreamDefaultController<any>, prototype: TransformStreamDefaultController<any> }, TransitionEvent: { new(type: string, transitionEventInitDict?: TransitionEventInit): TransitionEvent, prototype: TransitionEvent }, TreeWalker: { new(): TreeWalker, prototype: TreeWalker }, UIEvent: { new(type: string, eventInitDict?: UIEventInit): UIEvent, prototype: UIEvent }, URL: { new(url: string | URL, base?: string | URL): URL, prototype: URL, canParse: (url: string | URL, base?: string | URL) => boolean, createObjectURL: (obj: Blob | MediaSource) => string, parse: (url: string | URL, base?: string | URL) => URL, revokeObjectURL: (url: string) => void }, webkitURL: { new(url: string | URL, base?: string | URL): URL, prototype: URL, canParse: (url: string | URL, base?: string | URL) => boolean, createObjectURL: (obj: Blob | MediaSource) => string, parse: (url: string | URL, base?: string | URL) => URL, revokeObjectURL: (url: string) => void }, URLSearchParams: { new(init?: string | Record<string, string> | URLSearchParams | string[][]): URLSearchParams, prototype: URLSearchParams }, UserActivation: { new(): UserActivation, prototype: UserActivation }, VTTCue: { new(startTime: number, endTime: number, text: string): VTTCue, prototype: VTTCue }, VTTRegion: { new(): VTTRegion, prototype: VTTRegion }, ValidityState: { new(): ValidityState, prototype: ValidityState }, VideoColorSpace: { new(init?: VideoColorSpaceInit): VideoColorSpace, prototype: VideoColorSpace }, VideoDecoder: { new(init: VideoDecoderInit): VideoDecoder, prototype: VideoDecoder, isConfigSupported: (config: VideoDecoderConfig) => Promise<VideoDecoderSupport> }, VideoEncoder: { new(init: VideoEncoderInit): VideoEncoder, prototype: VideoEncoder, isConfigSupported: (config: VideoEncoderConfig) => Promise<VideoEncoderSupport> }, VideoFrame: { new(image: CanvasImageSource, init?: VideoFrameInit): VideoFrame, new(data: AllowSharedBufferSource, init: VideoFrameBufferInit): VideoFrame, prototype: VideoFrame }, VideoPlaybackQuality: { new(): VideoPlaybackQuality, prototype: VideoPlaybackQuality }, ViewTransition: { new(): ViewTransition, prototype: ViewTransition }, VisualViewport: { new(): VisualViewport, prototype: VisualViewport }, WakeLock: { new(): WakeLock, prototype: WakeLock }, WakeLockSentinel: { new(): WakeLockSentinel, prototype: WakeLockSentinel }, WaveShaperNode: { new(context: BaseAudioContext, options?: WaveShaperOptions): WaveShaperNode, prototype: WaveShaperNode }, WebGL2RenderingContext: { new(): WebGL2RenderingContext, prototype: WebGL2RenderingContext, readonly READ_BUFFER: 3074, readonly UNPACK_ROW_LENGTH: 3314, readonly UNPACK_SKIP_ROWS: 3315, readonly UNPACK_SKIP_PIXELS: 3316, readonly PACK_ROW_LENGTH: 3330, readonly PACK_SKIP_ROWS: 3331, readonly PACK_SKIP_PIXELS: 3332, readonly COLOR: 6144, readonly DEPTH: 6145, readonly STENCIL: 6146, readonly RED: 6403, readonly RGB8: 32849, readonly RGB10_A2: 32857, readonly TEXTURE_BINDING_3D: 32874, readonly UNPACK_SKIP_IMAGES: 32877, readonly UNPACK_IMAGE_HEIGHT: 32878, readonly TEXTURE_3D: 32879, readonly TEXTURE_WRAP_R: 32882, readonly MAX_3D_TEXTURE_SIZE: 32883, readonly UNSIGNED_INT_2_10_10_10_REV: 33640, readonly MAX_ELEMENTS_VERTICES: 33000, readonly MAX_ELEMENTS_INDICES: 33001, readonly TEXTURE_MIN_LOD: 33082, readonly TEXTURE_MAX_LOD: 33083, readonly TEXTURE_BASE_LEVEL: 33084, readonly TEXTURE_MAX_LEVEL: 33085, readonly MIN: 32775, readonly MAX: 32776, readonly DEPTH_COMPONENT24: 33190, readonly MAX_TEXTURE_LOD_BIAS: 34045, readonly TEXTURE_COMPARE_MODE: 34892, readonly TEXTURE_COMPARE_FUNC: 34893, readonly CURRENT_QUERY: 34917, readonly QUERY_RESULT: 34918, readonly QUERY_RESULT_AVAILABLE: 34919, readonly STREAM_READ: 35041, readonly STREAM_COPY: 35042, readonly STATIC_READ: 35045, readonly STATIC_COPY: 35046, readonly DYNAMIC_READ: 35049, readonly DYNAMIC_COPY: 35050, readonly MAX_DRAW_BUFFERS: 34852, readonly DRAW_BUFFER0: 34853, readonly DRAW_BUFFER1: 34854, readonly DRAW_BUFFER2: 34855, readonly DRAW_BUFFER3: 34856, readonly DRAW_BUFFER4: 34857, readonly DRAW_BUFFER5: 34858, readonly DRAW_BUFFER6: 34859, readonly DRAW_BUFFER7: 34860, readonly DRAW_BUFFER8: 34861, readonly DRAW_BUFFER9: 34862, readonly DRAW_BUFFER10: 34863, readonly DRAW_BUFFER11: 34864, readonly DRAW_BUFFER12: 34865, readonly DRAW_BUFFER13: 34866, readonly DRAW_BUFFER14: 34867, readonly DRAW_BUFFER15: 34868, readonly MAX_FRAGMENT_UNIFORM_COMPONENTS: 35657, readonly MAX_VERTEX_UNIFORM_COMPONENTS: 35658, readonly SAMPLER_3D: 35679, readonly SAMPLER_2D_SHADOW: 35682, readonly FRAGMENT_SHADER_DERIVATIVE_HINT: 35723, readonly PIXEL_PACK_BUFFER: 35051, readonly PIXEL_UNPACK_BUFFER: 35052, readonly PIXEL_PACK_BUFFER_BINDING: 35053, readonly PIXEL_UNPACK_BUFFER_BINDING: 35055, readonly FLOAT_MAT2x3: 35685, readonly FLOAT_MAT2x4: 35686, readonly FLOAT_MAT3x2: 35687, readonly FLOAT_MAT3x4: 35688, readonly FLOAT_MAT4x2: 35689, readonly FLOAT_MAT4x3: 35690, readonly SRGB: 35904, readonly SRGB8: 35905, readonly SRGB8_ALPHA8: 35907, readonly COMPARE_REF_TO_TEXTURE: 34894, readonly RGBA32F: 34836, readonly RGB32F: 34837, readonly RGBA16F: 34842, readonly RGB16F: 34843, readonly VERTEX_ATTRIB_ARRAY_INTEGER: 35069, readonly MAX_ARRAY_TEXTURE_LAYERS: 35071, readonly MIN_PROGRAM_TEXEL_OFFSET: 35076, readonly MAX_PROGRAM_TEXEL_OFFSET: 35077, readonly MAX_VARYING_COMPONENTS: 35659, readonly TEXTURE_2D_ARRAY: 35866, readonly TEXTURE_BINDING_2D_ARRAY: 35869, readonly R11F_G11F_B10F: 35898, readonly UNSIGNED_INT_10F_11F_11F_REV: 35899, readonly RGB9_E5: 35901, readonly UNSIGNED_INT_5_9_9_9_REV: 35902, readonly TRANSFORM_FEEDBACK_BUFFER_MODE: 35967, readonly MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS: 35968, readonly TRANSFORM_FEEDBACK_VARYINGS: 35971, readonly TRANSFORM_FEEDBACK_BUFFER_START: 35972, readonly TRANSFORM_FEEDBACK_BUFFER_SIZE: 35973, readonly TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN: 35976, readonly RASTERIZER_DISCARD: 35977, readonly MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS: 35978, readonly MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS: 35979, readonly INTERLEAVED_ATTRIBS: 35980, readonly SEPARATE_ATTRIBS: 35981, readonly TRANSFORM_FEEDBACK_BUFFER: 35982, readonly TRANSFORM_FEEDBACK_BUFFER_BINDING: 35983, readonly RGBA32UI: 36208, readonly RGB32UI: 36209, readonly RGBA16UI: 36214, readonly RGB16UI: 36215, readonly RGBA8UI: 36220, readonly RGB8UI: 36221, readonly RGBA32I: 36226, readonly RGB32I: 36227, readonly RGBA16I: 36232, readonly RGB16I: 36233, readonly RGBA8I: 36238, readonly RGB8I: 36239, readonly RED_INTEGER: 36244, readonly RGB_INTEGER: 36248, readonly RGBA_INTEGER: 36249, readonly SAMPLER_2D_ARRAY: 36289, readonly SAMPLER_2D_ARRAY_SHADOW: 36292, readonly SAMPLER_CUBE_SHADOW: 36293, readonly UNSIGNED_INT_VEC2: 36294, readonly UNSIGNED_INT_VEC3: 36295, readonly UNSIGNED_INT_VEC4: 36296, readonly INT_SAMPLER_2D: 36298, readonly INT_SAMPLER_3D: 36299, readonly INT_SAMPLER_CUBE: 36300, readonly INT_SAMPLER_2D_ARRAY: 36303, readonly UNSIGNED_INT_SAMPLER_2D: 36306, readonly UNSIGNED_INT_SAMPLER_3D: 36307, readonly UNSIGNED_INT_SAMPLER_CUBE: 36308, readonly UNSIGNED_INT_SAMPLER_2D_ARRAY: 36311, readonly DEPTH_COMPONENT32F: 36012, readonly DEPTH32F_STENCIL8: 36013, readonly FLOAT_32_UNSIGNED_INT_24_8_REV: 36269, readonly FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING: 33296, readonly FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: 33297, readonly FRAMEBUFFER_ATTACHMENT_RED_SIZE: 33298, readonly FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: 33299, readonly FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: 33300, readonly FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: 33301, readonly FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: 33302, readonly FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: 33303, readonly FRAMEBUFFER_DEFAULT: 33304, readonly UNSIGNED_INT_24_8: 34042, readonly DEPTH24_STENCIL8: 35056, readonly UNSIGNED_NORMALIZED: 35863, readonly DRAW_FRAMEBUFFER_BINDING: 36006, readonly READ_FRAMEBUFFER: 36008, readonly DRAW_FRAMEBUFFER: 36009, readonly READ_FRAMEBUFFER_BINDING: 36010, readonly RENDERBUFFER_SAMPLES: 36011, readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: 36052, readonly MAX_COLOR_ATTACHMENTS: 36063, readonly COLOR_ATTACHMENT1: 36065, readonly COLOR_ATTACHMENT2: 36066, readonly COLOR_ATTACHMENT3: 36067, readonly COLOR_ATTACHMENT4: 36068, readonly COLOR_ATTACHMENT5: 36069, readonly COLOR_ATTACHMENT6: 36070, readonly COLOR_ATTACHMENT7: 36071, readonly COLOR_ATTACHMENT8: 36072, readonly COLOR_ATTACHMENT9: 36073, readonly COLOR_ATTACHMENT10: 36074, readonly COLOR_ATTACHMENT11: 36075, readonly COLOR_ATTACHMENT12: 36076, readonly COLOR_ATTACHMENT13: 36077, readonly COLOR_ATTACHMENT14: 36078, readonly COLOR_ATTACHMENT15: 36079, readonly FRAMEBUFFER_INCOMPLETE_MULTISAMPLE: 36182, readonly MAX_SAMPLES: 36183, readonly HALF_FLOAT: 5131, readonly RG: 33319, readonly RG_INTEGER: 33320, readonly R8: 33321, readonly RG8: 33323, readonly R16F: 33325, readonly R32F: 33326, readonly RG16F: 33327, readonly RG32F: 33328, readonly R8I: 33329, readonly R8UI: 33330, readonly R16I: 33331, readonly R16UI: 33332, readonly R32I: 33333, readonly R32UI: 33334, readonly RG8I: 33335, readonly RG8UI: 33336, readonly RG16I: 33337, readonly RG16UI: 33338, readonly RG32I: 33339, readonly RG32UI: 33340, readonly VERTEX_ARRAY_BINDING: 34229, readonly R8_SNORM: 36756, readonly RG8_SNORM: 36757, readonly RGB8_SNORM: 36758, readonly RGBA8_SNORM: 36759, readonly SIGNED_NORMALIZED: 36764, readonly COPY_READ_BUFFER: 36662, readonly COPY_WRITE_BUFFER: 36663, readonly COPY_READ_BUFFER_BINDING: 36662, readonly COPY_WRITE_BUFFER_BINDING: 36663, readonly UNIFORM_BUFFER: 35345, readonly UNIFORM_BUFFER_BINDING: 35368, readonly UNIFORM_BUFFER_START: 35369, readonly UNIFORM_BUFFER_SIZE: 35370, readonly MAX_VERTEX_UNIFORM_BLOCKS: 35371, readonly MAX_FRAGMENT_UNIFORM_BLOCKS: 35373, readonly MAX_COMBINED_UNIFORM_BLOCKS: 35374, readonly MAX_UNIFORM_BUFFER_BINDINGS: 35375, readonly MAX_UNIFORM_BLOCK_SIZE: 35376, readonly MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS: 35377, readonly MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS: 35379, readonly UNIFORM_BUFFER_OFFSET_ALIGNMENT: 35380, readonly ACTIVE_UNIFORM_BLOCKS: 35382, readonly UNIFORM_TYPE: 35383, readonly UNIFORM_SIZE: 35384, readonly UNIFORM_BLOCK_INDEX: 35386, readonly UNIFORM_OFFSET: 35387, readonly UNIFORM_ARRAY_STRIDE: 35388, readonly UNIFORM_MATRIX_STRIDE: 35389, readonly UNIFORM_IS_ROW_MAJOR: 35390, readonly UNIFORM_BLOCK_BINDING: 35391, readonly UNIFORM_BLOCK_DATA_SIZE: 35392, readonly UNIFORM_BLOCK_ACTIVE_UNIFORMS: 35394, readonly UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES: 35395, readonly UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER: 35396, readonly UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER: 35398, readonly INVALID_INDEX: 4.294967295e+09, readonly MAX_VERTEX_OUTPUT_COMPONENTS: 37154, readonly MAX_FRAGMENT_INPUT_COMPONENTS: 37157, readonly MAX_SERVER_WAIT_TIMEOUT: 37137, readonly OBJECT_TYPE: 37138, readonly SYNC_CONDITION: 37139, readonly SYNC_STATUS: 37140, readonly SYNC_FLAGS: 37141, readonly SYNC_FENCE: 37142, readonly SYNC_GPU_COMMANDS_COMPLETE: 37143, readonly UNSIGNALED: 37144, readonly SIGNALED: 37145, readonly ALREADY_SIGNALED: 37146, readonly TIMEOUT_EXPIRED: 37147, readonly CONDITION_SATISFIED: 37148, readonly WAIT_FAILED: 37149, readonly SYNC_FLUSH_COMMANDS_BIT: 1, readonly VERTEX_ATTRIB_ARRAY_DIVISOR: 35070, readonly ANY_SAMPLES_PASSED: 35887, readonly ANY_SAMPLES_PASSED_CONSERVATIVE: 36202, readonly SAMPLER_BINDING: 35097, readonly RGB10_A2UI: 36975, readonly INT_2_10_10_10_REV: 36255, readonly TRANSFORM_FEEDBACK: 36386, readonly TRANSFORM_FEEDBACK_PAUSED: 36387, readonly TRANSFORM_FEEDBACK_ACTIVE: 36388, readonly TRANSFORM_FEEDBACK_BINDING: 36389, readonly TEXTURE_IMMUTABLE_FORMAT: 37167, readonly MAX_ELEMENT_INDEX: 36203, readonly TEXTURE_IMMUTABLE_LEVELS: 33503, readonly TIMEOUT_IGNORED: -1, readonly MAX_CLIENT_WAIT_TIMEOUT_WEBGL: 37447, readonly DEPTH_BUFFER_BIT: 256, readonly STENCIL_BUFFER_BIT: 1024, readonly COLOR_BUFFER_BIT: 16384, readonly POINTS: 0, readonly LINES: 1, readonly LINE_LOOP: 2, readonly LINE_STRIP: 3, readonly TRIANGLES: 4, readonly TRIANGLE_STRIP: 5, readonly TRIANGLE_FAN: 6, readonly ZERO: 0, readonly ONE: 1, readonly SRC_COLOR: 768, readonly ONE_MINUS_SRC_COLOR: 769, readonly SRC_ALPHA: 770, readonly ONE_MINUS_SRC_ALPHA: 771, readonly DST_ALPHA: 772, readonly ONE_MINUS_DST_ALPHA: 773, readonly DST_COLOR: 774, readonly ONE_MINUS_DST_COLOR: 775, readonly SRC_ALPHA_SATURATE: 776, readonly FUNC_ADD: 32774, readonly BLEND_EQUATION: 32777, readonly BLEND_EQUATION_RGB: 32777, readonly BLEND_EQUATION_ALPHA: 34877, readonly FUNC_SUBTRACT: 32778, readonly FUNC_REVERSE_SUBTRACT: 32779, readonly BLEND_DST_RGB: 32968, readonly BLEND_SRC_RGB: 32969, readonly BLEND_DST_ALPHA: 32970, readonly BLEND_SRC_ALPHA: 32971, readonly CONSTANT_COLOR: 32769, readonly ONE_MINUS_CONSTANT_COLOR: 32770, readonly CONSTANT_ALPHA: 32771, readonly ONE_MINUS_CONSTANT_ALPHA: 32772, readonly BLEND_COLOR: 32773, readonly ARRAY_BUFFER: 34962, readonly ELEMENT_ARRAY_BUFFER: 34963, readonly ARRAY_BUFFER_BINDING: 34964, readonly ELEMENT_ARRAY_BUFFER_BINDING: 34965, readonly STREAM_DRAW: 35040, readonly STATIC_DRAW: 35044, readonly DYNAMIC_DRAW: 35048, readonly BUFFER_SIZE: 34660, readonly BUFFER_USAGE: 34661, readonly CURRENT_VERTEX_ATTRIB: 34342, readonly FRONT: 1028, readonly BACK: 1029, readonly FRONT_AND_BACK: 1032, readonly CULL_FACE: 2884, readonly BLEND: 3042, readonly DITHER: 3024, readonly STENCIL_TEST: 2960, readonly DEPTH_TEST: 2929, readonly SCISSOR_TEST: 3089, readonly POLYGON_OFFSET_FILL: 32823, readonly SAMPLE_ALPHA_TO_COVERAGE: 32926, readonly SAMPLE_COVERAGE: 32928, readonly NO_ERROR: 0, readonly INVALID_ENUM: 1280, readonly INVALID_VALUE: 1281, readonly INVALID_OPERATION: 1282, readonly OUT_OF_MEMORY: 1285, readonly CW: 2304, readonly CCW: 2305, readonly LINE_WIDTH: 2849, readonly ALIASED_POINT_SIZE_RANGE: 33901, readonly ALIASED_LINE_WIDTH_RANGE: 33902, readonly CULL_FACE_MODE: 2885, readonly FRONT_FACE: 2886, readonly DEPTH_RANGE: 2928, readonly DEPTH_WRITEMASK: 2930, readonly DEPTH_CLEAR_VALUE: 2931, readonly DEPTH_FUNC: 2932, readonly STENCIL_CLEAR_VALUE: 2961, readonly STENCIL_FUNC: 2962, readonly STENCIL_FAIL: 2964, readonly STENCIL_PASS_DEPTH_FAIL: 2965, readonly STENCIL_PASS_DEPTH_PASS: 2966, readonly STENCIL_REF: 2967, readonly STENCIL_VALUE_MASK: 2963, readonly STENCIL_WRITEMASK: 2968, readonly STENCIL_BACK_FUNC: 34816, readonly STENCIL_BACK_FAIL: 34817, readonly STENCIL_BACK_PASS_DEPTH_FAIL: 34818, readonly STENCIL_BACK_PASS_DEPTH_PASS: 34819, readonly STENCIL_BACK_REF: 36003, readonly STENCIL_BACK_VALUE_MASK: 36004, readonly STENCIL_BACK_WRITEMASK: 36005, readonly VIEWPORT: 2978, readonly SCISSOR_BOX: 3088, readonly COLOR_CLEAR_VALUE: 3106, readonly COLOR_WRITEMASK: 3107, readonly UNPACK_ALIGNMENT: 3317, readonly PACK_ALIGNMENT: 3333, readonly MAX_TEXTURE_SIZE: 3379, readonly MAX_VIEWPORT_DIMS: 3386, readonly SUBPIXEL_BITS: 3408, readonly RED_BITS: 3410, readonly GREEN_BITS: 3411, readonly BLUE_BITS: 3412, readonly ALPHA_BITS: 3413, readonly DEPTH_BITS: 3414, readonly STENCIL_BITS: 3415, readonly POLYGON_OFFSET_UNITS: 10752, readonly POLYGON_OFFSET_FACTOR: 32824, readonly TEXTURE_BINDING_2D: 32873, readonly SAMPLE_BUFFERS: 32936, readonly SAMPLES: 32937, readonly SAMPLE_COVERAGE_VALUE: 32938, readonly SAMPLE_COVERAGE_INVERT: 32939, readonly COMPRESSED_TEXTURE_FORMATS: 34467, readonly DONT_CARE: 4352, readonly FASTEST: 4353, readonly NICEST: 4354, readonly GENERATE_MIPMAP_HINT: 33170, readonly BYTE: 5120, readonly UNSIGNED_BYTE: 5121, readonly SHORT: 5122, readonly UNSIGNED_SHORT: 5123, readonly INT: 5124, readonly UNSIGNED_INT: 5125, readonly FLOAT: 5126, readonly DEPTH_COMPONENT: 6402, readonly ALPHA: 6406, readonly RGB: 6407, readonly RGBA: 6408, readonly LUMINANCE: 6409, readonly LUMINANCE_ALPHA: 6410, readonly UNSIGNED_SHORT_4_4_4_4: 32819, readonly UNSIGNED_SHORT_5_5_5_1: 32820, readonly UNSIGNED_SHORT_5_6_5: 33635, readonly FRAGMENT_SHADER: 35632, readonly VERTEX_SHADER: 35633, readonly MAX_VERTEX_ATTRIBS: 34921, readonly MAX_VERTEX_UNIFORM_VECTORS: 36347, readonly MAX_VARYING_VECTORS: 36348, readonly MAX_COMBINED_TEXTURE_IMAGE_UNITS: 35661, readonly MAX_VERTEX_TEXTURE_IMAGE_UNITS: 35660, readonly MAX_TEXTURE_IMAGE_UNITS: 34930, readonly MAX_FRAGMENT_UNIFORM_VECTORS: 36349, readonly SHADER_TYPE: 35663, readonly DELETE_STATUS: 35712, readonly LINK_STATUS: 35714, readonly VALIDATE_STATUS: 35715, readonly ATTACHED_SHADERS: 35717, readonly ACTIVE_UNIFORMS: 35718, readonly ACTIVE_ATTRIBUTES: 35721, readonly SHADING_LANGUAGE_VERSION: 35724, readonly CURRENT_PROGRAM: 35725, readonly NEVER: 512, readonly LESS: 513, readonly EQUAL: 514, readonly LEQUAL: 515, readonly GREATER: 516, readonly NOTEQUAL: 517, readonly GEQUAL: 518, readonly ALWAYS: 519, readonly KEEP: 7680, readonly REPLACE: 7681, readonly INCR: 7682, readonly DECR: 7683, readonly INVERT: 5386, readonly INCR_WRAP: 34055, readonly DECR_WRAP: 34056, readonly VENDOR: 7936, readonly RENDERER: 7937, readonly VERSION: 7938, readonly NEAREST: 9728, readonly LINEAR: 9729, readonly NEAREST_MIPMAP_NEAREST: 9984, readonly LINEAR_MIPMAP_NEAREST: 9985, readonly NEAREST_MIPMAP_LINEAR: 9986, readonly LINEAR_MIPMAP_LINEAR: 9987, readonly TEXTURE_MAG_FILTER: 10240, readonly TEXTURE_MIN_FILTER: 10241, readonly TEXTURE_WRAP_S: 10242, readonly TEXTURE_WRAP_T: 10243, readonly TEXTURE_2D: 3553, readonly TEXTURE: 5890, readonly TEXTURE_CUBE_MAP: 34067, readonly TEXTURE_BINDING_CUBE_MAP: 34068, readonly TEXTURE_CUBE_MAP_POSITIVE_X: 34069, readonly TEXTURE_CUBE_MAP_NEGATIVE_X: 34070, readonly TEXTURE_CUBE_MAP_POSITIVE_Y: 34071, readonly TEXTURE_CUBE_MAP_NEGATIVE_Y: 34072, readonly TEXTURE_CUBE_MAP_POSITIVE_Z: 34073, readonly TEXTURE_CUBE_MAP_NEGATIVE_Z: 34074, readonly MAX_CUBE_MAP_TEXTURE_SIZE: 34076, readonly TEXTURE0: 33984, readonly TEXTURE1: 33985, readonly TEXTURE2: 33986, readonly TEXTURE3: 33987, readonly TEXTURE4: 33988, readonly TEXTURE5: 33989, readonly TEXTURE6: 33990, readonly TEXTURE7: 33991, readonly TEXTURE8: 33992, readonly TEXTURE9: 33993, readonly TEXTURE10: 33994, readonly TEXTURE11: 33995, readonly TEXTURE12: 33996, readonly TEXTURE13: 33997, readonly TEXTURE14: 33998, readonly TEXTURE15: 33999, readonly TEXTURE16: 34000, readonly TEXTURE17: 34001, readonly TEXTURE18: 34002, readonly TEXTURE19: 34003, readonly TEXTURE20: 34004, readonly TEXTURE21: 34005, readonly TEXTURE22: 34006, readonly TEXTURE23: 34007, readonly TEXTURE24: 34008, readonly TEXTURE25: 34009, readonly TEXTURE26: 34010, readonly TEXTURE27: 34011, readonly TEXTURE28: 34012, readonly TEXTURE29: 34013, readonly TEXTURE30: 34014, readonly TEXTURE31: 34015, readonly ACTIVE_TEXTURE: 34016, readonly REPEAT: 10497, readonly CLAMP_TO_EDGE: 33071, readonly MIRRORED_REPEAT: 33648, readonly FLOAT_VEC2: 35664, readonly FLOAT_VEC3: 35665, readonly FLOAT_VEC4: 35666, readonly INT_VEC2: 35667, readonly INT_VEC3: 35668, readonly INT_VEC4: 35669, readonly BOOL: 35670, readonly BOOL_VEC2: 35671, readonly BOOL_VEC3: 35672, readonly BOOL_VEC4: 35673, readonly FLOAT_MAT2: 35674, readonly FLOAT_MAT3: 35675, readonly FLOAT_MAT4: 35676, readonly SAMPLER_2D: 35678, readonly SAMPLER_CUBE: 35680, readonly VERTEX_ATTRIB_ARRAY_ENABLED: 34338, readonly VERTEX_ATTRIB_ARRAY_SIZE: 34339, readonly VERTEX_ATTRIB_ARRAY_STRIDE: 34340, readonly VERTEX_ATTRIB_ARRAY_TYPE: 34341, readonly VERTEX_ATTRIB_ARRAY_NORMALIZED: 34922, readonly VERTEX_ATTRIB_ARRAY_POINTER: 34373, readonly VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: 34975, readonly IMPLEMENTATION_COLOR_READ_TYPE: 35738, readonly IMPLEMENTATION_COLOR_READ_FORMAT: 35739, readonly COMPILE_STATUS: 35713, readonly LOW_FLOAT: 36336, readonly MEDIUM_FLOAT: 36337, readonly HIGH_FLOAT: 36338, readonly LOW_INT: 36339, readonly MEDIUM_INT: 36340, readonly HIGH_INT: 36341, readonly FRAMEBUFFER: 36160, readonly RENDERBUFFER: 36161, readonly RGBA4: 32854, readonly RGB5_A1: 32855, readonly RGBA8: 32856, readonly RGB565: 36194, readonly DEPTH_COMPONENT16: 33189, readonly STENCIL_INDEX8: 36168, readonly DEPTH_STENCIL: 34041, readonly RENDERBUFFER_WIDTH: 36162, readonly RENDERBUFFER_HEIGHT: 36163, readonly RENDERBUFFER_INTERNAL_FORMAT: 36164, readonly RENDERBUFFER_RED_SIZE: 36176, readonly RENDERBUFFER_GREEN_SIZE: 36177, readonly RENDERBUFFER_BLUE_SIZE: 36178, readonly RENDERBUFFER_ALPHA_SIZE: 36179, readonly RENDERBUFFER_DEPTH_SIZE: 36180, readonly RENDERBUFFER_STENCIL_SIZE: 36181, readonly FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: 36048, readonly FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: 36049, readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: 36050, readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: 36051, readonly COLOR_ATTACHMENT0: 36064, readonly DEPTH_ATTACHMENT: 36096, readonly STENCIL_ATTACHMENT: 36128, readonly DEPTH_STENCIL_ATTACHMENT: 33306, readonly NONE: 0, readonly FRAMEBUFFER_COMPLETE: 36053, readonly FRAMEBUFFER_INCOMPLETE_ATTACHMENT: 36054, readonly FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: 36055, readonly FRAMEBUFFER_INCOMPLETE_DIMENSIONS: 36057, readonly FRAMEBUFFER_UNSUPPORTED: 36061, readonly FRAMEBUFFER_BINDING: 36006, readonly RENDERBUFFER_BINDING: 36007, readonly MAX_RENDERBUFFER_SIZE: 34024, readonly INVALID_FRAMEBUFFER_OPERATION: 1286, readonly UNPACK_FLIP_Y_WEBGL: 37440, readonly UNPACK_PREMULTIPLY_ALPHA_WEBGL: 37441, readonly CONTEXT_LOST_WEBGL: 37442, readonly UNPACK_COLORSPACE_CONVERSION_WEBGL: 37443, readonly BROWSER_DEFAULT_WEBGL: 37444 }, WebGLActiveInfo: { new(): WebGLActiveInfo, prototype: WebGLActiveInfo }, WebGLBuffer: { new(): WebGLBuffer, prototype: WebGLBuffer }, WebGLContextEvent: { new(type: string, eventInit?: WebGLContextEventInit): WebGLContextEvent, prototype: WebGLContextEvent }, WebGLFramebuffer: { new(): WebGLFramebuffer, prototype: WebGLFramebuffer }, WebGLProgram: { new(): WebGLProgram, prototype: WebGLProgram }, WebGLQuery: { new(): WebGLQuery, prototype: WebGLQuery }, WebGLRenderbuffer: { new(): WebGLRenderbuffer, prototype: WebGLRenderbuffer }, WebGLRenderingContext: { new(): WebGLRenderingContext, prototype: WebGLRenderingContext, readonly DEPTH_BUFFER_BIT: 256, readonly STENCIL_BUFFER_BIT: 1024, readonly COLOR_BUFFER_BIT: 16384, readonly POINTS: 0, readonly LINES: 1, readonly LINE_LOOP: 2, readonly LINE_STRIP: 3, readonly TRIANGLES: 4, readonly TRIANGLE_STRIP: 5, readonly TRIANGLE_FAN: 6, readonly ZERO: 0, readonly ONE: 1, readonly SRC_COLOR: 768, readonly ONE_MINUS_SRC_COLOR: 769, readonly SRC_ALPHA: 770, readonly ONE_MINUS_SRC_ALPHA: 771, readonly DST_ALPHA: 772, readonly ONE_MINUS_DST_ALPHA: 773, readonly DST_COLOR: 774, readonly ONE_MINUS_DST_COLOR: 775, readonly SRC_ALPHA_SATURATE: 776, readonly FUNC_ADD: 32774, readonly BLEND_EQUATION: 32777, readonly BLEND_EQUATION_RGB: 32777, readonly BLEND_EQUATION_ALPHA: 34877, readonly FUNC_SUBTRACT: 32778, readonly FUNC_REVERSE_SUBTRACT: 32779, readonly BLEND_DST_RGB: 32968, readonly BLEND_SRC_RGB: 32969, readonly BLEND_DST_ALPHA: 32970, readonly BLEND_SRC_ALPHA: 32971, readonly CONSTANT_COLOR: 32769, readonly ONE_MINUS_CONSTANT_COLOR: 32770, readonly CONSTANT_ALPHA: 32771, readonly ONE_MINUS_CONSTANT_ALPHA: 32772, readonly BLEND_COLOR: 32773, readonly ARRAY_BUFFER: 34962, readonly ELEMENT_ARRAY_BUFFER: 34963, readonly ARRAY_BUFFER_BINDING: 34964, readonly ELEMENT_ARRAY_BUFFER_BINDING: 34965, readonly STREAM_DRAW: 35040, readonly STATIC_DRAW: 35044, readonly DYNAMIC_DRAW: 35048, readonly BUFFER_SIZE: 34660, readonly BUFFER_USAGE: 34661, readonly CURRENT_VERTEX_ATTRIB: 34342, readonly FRONT: 1028, readonly BACK: 1029, readonly FRONT_AND_BACK: 1032, readonly CULL_FACE: 2884, readonly BLEND: 3042, readonly DITHER: 3024, readonly STENCIL_TEST: 2960, readonly DEPTH_TEST: 2929, readonly SCISSOR_TEST: 3089, readonly POLYGON_OFFSET_FILL: 32823, readonly SAMPLE_ALPHA_TO_COVERAGE: 32926, readonly SAMPLE_COVERAGE: 32928, readonly NO_ERROR: 0, readonly INVALID_ENUM: 1280, readonly INVALID_VALUE: 1281, readonly INVALID_OPERATION: 1282, readonly OUT_OF_MEMORY: 1285, readonly CW: 2304, readonly CCW: 2305, readonly LINE_WIDTH: 2849, readonly ALIASED_POINT_SIZE_RANGE: 33901, readonly ALIASED_LINE_WIDTH_RANGE: 33902, readonly CULL_FACE_MODE: 2885, readonly FRONT_FACE: 2886, readonly DEPTH_RANGE: 2928, readonly DEPTH_WRITEMASK: 2930, readonly DEPTH_CLEAR_VALUE: 2931, readonly DEPTH_FUNC: 2932, readonly STENCIL_CLEAR_VALUE: 2961, readonly STENCIL_FUNC: 2962, readonly STENCIL_FAIL: 2964, readonly STENCIL_PASS_DEPTH_FAIL: 2965, readonly STENCIL_PASS_DEPTH_PASS: 2966, readonly STENCIL_REF: 2967, readonly STENCIL_VALUE_MASK: 2963, readonly STENCIL_WRITEMASK: 2968, readonly STENCIL_BACK_FUNC: 34816, readonly STENCIL_BACK_FAIL: 34817, readonly STENCIL_BACK_PASS_DEPTH_FAIL: 34818, readonly STENCIL_BACK_PASS_DEPTH_PASS: 34819, readonly STENCIL_BACK_REF: 36003, readonly STENCIL_BACK_VALUE_MASK: 36004, readonly STENCIL_BACK_WRITEMASK: 36005, readonly VIEWPORT: 2978, readonly SCISSOR_BOX: 3088, readonly COLOR_CLEAR_VALUE: 3106, readonly COLOR_WRITEMASK: 3107, readonly UNPACK_ALIGNMENT: 3317, readonly PACK_ALIGNMENT: 3333, readonly MAX_TEXTURE_SIZE: 3379, readonly MAX_VIEWPORT_DIMS: 3386, readonly SUBPIXEL_BITS: 3408, readonly RED_BITS: 3410, readonly GREEN_BITS: 3411, readonly BLUE_BITS: 3412, readonly ALPHA_BITS: 3413, readonly DEPTH_BITS: 3414, readonly STENCIL_BITS: 3415, readonly POLYGON_OFFSET_UNITS: 10752, readonly POLYGON_OFFSET_FACTOR: 32824, readonly TEXTURE_BINDING_2D: 32873, readonly SAMPLE_BUFFERS: 32936, readonly SAMPLES: 32937, readonly SAMPLE_COVERAGE_VALUE: 32938, readonly SAMPLE_COVERAGE_INVERT: 32939, readonly COMPRESSED_TEXTURE_FORMATS: 34467, readonly DONT_CARE: 4352, readonly FASTEST: 4353, readonly NICEST: 4354, readonly GENERATE_MIPMAP_HINT: 33170, readonly BYTE: 5120, readonly UNSIGNED_BYTE: 5121, readonly SHORT: 5122, readonly UNSIGNED_SHORT: 5123, readonly INT: 5124, readonly UNSIGNED_INT: 5125, readonly FLOAT: 5126, readonly DEPTH_COMPONENT: 6402, readonly ALPHA: 6406, readonly RGB: 6407, readonly RGBA: 6408, readonly LUMINANCE: 6409, readonly LUMINANCE_ALPHA: 6410, readonly UNSIGNED_SHORT_4_4_4_4: 32819, readonly UNSIGNED_SHORT_5_5_5_1: 32820, readonly UNSIGNED_SHORT_5_6_5: 33635, readonly FRAGMENT_SHADER: 35632, readonly VERTEX_SHADER: 35633, readonly MAX_VERTEX_ATTRIBS: 34921, readonly MAX_VERTEX_UNIFORM_VECTORS: 36347, readonly MAX_VARYING_VECTORS: 36348, readonly MAX_COMBINED_TEXTURE_IMAGE_UNITS: 35661, readonly MAX_VERTEX_TEXTURE_IMAGE_UNITS: 35660, readonly MAX_TEXTURE_IMAGE_UNITS: 34930, readonly MAX_FRAGMENT_UNIFORM_VECTORS: 36349, readonly SHADER_TYPE: 35663, readonly DELETE_STATUS: 35712, readonly LINK_STATUS: 35714, readonly VALIDATE_STATUS: 35715, readonly ATTACHED_SHADERS: 35717, readonly ACTIVE_UNIFORMS: 35718, readonly ACTIVE_ATTRIBUTES: 35721, readonly SHADING_LANGUAGE_VERSION: 35724, readonly CURRENT_PROGRAM: 35725, readonly NEVER: 512, readonly LESS: 513, readonly EQUAL: 514, readonly LEQUAL: 515, readonly GREATER: 516, readonly NOTEQUAL: 517, readonly GEQUAL: 518, readonly ALWAYS: 519, readonly KEEP: 7680, readonly REPLACE: 7681, readonly INCR: 7682, readonly DECR: 7683, readonly INVERT: 5386, readonly INCR_WRAP: 34055, readonly DECR_WRAP: 34056, readonly VENDOR: 7936, readonly RENDERER: 7937, readonly VERSION: 7938, readonly NEAREST: 9728, readonly LINEAR: 9729, readonly NEAREST_MIPMAP_NEAREST: 9984, readonly LINEAR_MIPMAP_NEAREST: 9985, readonly NEAREST_MIPMAP_LINEAR: 9986, readonly LINEAR_MIPMAP_LINEAR: 9987, readonly TEXTURE_MAG_FILTER: 10240, readonly TEXTURE_MIN_FILTER: 10241, readonly TEXTURE_WRAP_S: 10242, readonly TEXTURE_WRAP_T: 10243, readonly TEXTURE_2D: 3553, readonly TEXTURE: 5890, readonly TEXTURE_CUBE_MAP: 34067, readonly TEXTURE_BINDING_CUBE_MAP: 34068, readonly TEXTURE_CUBE_MAP_POSITIVE_X: 34069, readonly TEXTURE_CUBE_MAP_NEGATIVE_X: 34070, readonly TEXTURE_CUBE_MAP_POSITIVE_Y: 34071, readonly TEXTURE_CUBE_MAP_NEGATIVE_Y: 34072, readonly TEXTURE_CUBE_MAP_POSITIVE_Z: 34073, readonly TEXTURE_CUBE_MAP_NEGATIVE_Z: 34074, readonly MAX_CUBE_MAP_TEXTURE_SIZE: 34076, readonly TEXTURE0: 33984, readonly TEXTURE1: 33985, readonly TEXTURE2: 33986, readonly TEXTURE3: 33987, readonly TEXTURE4: 33988, readonly TEXTURE5: 33989, readonly TEXTURE6: 33990, readonly TEXTURE7: 33991, readonly TEXTURE8: 33992, readonly TEXTURE9: 33993, readonly TEXTURE10: 33994, readonly TEXTURE11: 33995, readonly TEXTURE12: 33996, readonly TEXTURE13: 33997, readonly TEXTURE14: 33998, readonly TEXTURE15: 33999, readonly TEXTURE16: 34000, readonly TEXTURE17: 34001, readonly TEXTURE18: 34002, readonly TEXTURE19: 34003, readonly TEXTURE20: 34004, readonly TEXTURE21: 34005, readonly TEXTURE22: 34006, readonly TEXTURE23: 34007, readonly TEXTURE24: 34008, readonly TEXTURE25: 34009, readonly TEXTURE26: 34010, readonly TEXTURE27: 34011, readonly TEXTURE28: 34012, readonly TEXTURE29: 34013, readonly TEXTURE30: 34014, readonly TEXTURE31: 34015, readonly ACTIVE_TEXTURE: 34016, readonly REPEAT: 10497, readonly CLAMP_TO_EDGE: 33071, readonly MIRRORED_REPEAT: 33648, readonly FLOAT_VEC2: 35664, readonly FLOAT_VEC3: 35665, readonly FLOAT_VEC4: 35666, readonly INT_VEC2: 35667, readonly INT_VEC3: 35668, readonly INT_VEC4: 35669, readonly BOOL: 35670, readonly BOOL_VEC2: 35671, readonly BOOL_VEC3: 35672, readonly BOOL_VEC4: 35673, readonly FLOAT_MAT2: 35674, readonly FLOAT_MAT3: 35675, readonly FLOAT_MAT4: 35676, readonly SAMPLER_2D: 35678, readonly SAMPLER_CUBE: 35680, readonly VERTEX_ATTRIB_ARRAY_ENABLED: 34338, readonly VERTEX_ATTRIB_ARRAY_SIZE: 34339, readonly VERTEX_ATTRIB_ARRAY_STRIDE: 34340, readonly VERTEX_ATTRIB_ARRAY_TYPE: 34341, readonly VERTEX_ATTRIB_ARRAY_NORMALIZED: 34922, readonly VERTEX_ATTRIB_ARRAY_POINTER: 34373, readonly VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: 34975, readonly IMPLEMENTATION_COLOR_READ_TYPE: 35738, readonly IMPLEMENTATION_COLOR_READ_FORMAT: 35739, readonly COMPILE_STATUS: 35713, readonly LOW_FLOAT: 36336, readonly MEDIUM_FLOAT: 36337, readonly HIGH_FLOAT: 36338, readonly LOW_INT: 36339, readonly MEDIUM_INT: 36340, readonly HIGH_INT: 36341, readonly FRAMEBUFFER: 36160, readonly RENDERBUFFER: 36161, readonly RGBA4: 32854, readonly RGB5_A1: 32855, readonly RGBA8: 32856, readonly RGB565: 36194, readonly DEPTH_COMPONENT16: 33189, readonly STENCIL_INDEX8: 36168, readonly DEPTH_STENCIL: 34041, readonly RENDERBUFFER_WIDTH: 36162, readonly RENDERBUFFER_HEIGHT: 36163, readonly RENDERBUFFER_INTERNAL_FORMAT: 36164, readonly RENDERBUFFER_RED_SIZE: 36176, readonly RENDERBUFFER_GREEN_SIZE: 36177, readonly RENDERBUFFER_BLUE_SIZE: 36178, readonly RENDERBUFFER_ALPHA_SIZE: 36179, readonly RENDERBUFFER_DEPTH_SIZE: 36180, readonly RENDERBUFFER_STENCIL_SIZE: 36181, readonly FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: 36048, readonly FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: 36049, readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: 36050, readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: 36051, readonly COLOR_ATTACHMENT0: 36064, readonly DEPTH_ATTACHMENT: 36096, readonly STENCIL_ATTACHMENT: 36128, readonly DEPTH_STENCIL_ATTACHMENT: 33306, readonly NONE: 0, readonly FRAMEBUFFER_COMPLETE: 36053, readonly FRAMEBUFFER_INCOMPLETE_ATTACHMENT: 36054, readonly FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: 36055, readonly FRAMEBUFFER_INCOMPLETE_DIMENSIONS: 36057, readonly FRAMEBUFFER_UNSUPPORTED: 36061, readonly FRAMEBUFFER_BINDING: 36006, readonly RENDERBUFFER_BINDING: 36007, readonly MAX_RENDERBUFFER_SIZE: 34024, readonly INVALID_FRAMEBUFFER_OPERATION: 1286, readonly UNPACK_FLIP_Y_WEBGL: 37440, readonly UNPACK_PREMULTIPLY_ALPHA_WEBGL: 37441, readonly CONTEXT_LOST_WEBGL: 37442, readonly UNPACK_COLORSPACE_CONVERSION_WEBGL: 37443, readonly BROWSER_DEFAULT_WEBGL: 37444 }, WebGLSampler: { new(): WebGLSampler, prototype: WebGLSampler }, WebGLShader: { new(): WebGLShader, prototype: WebGLShader }, WebGLShaderPrecisionFormat: { new(): WebGLShaderPrecisionFormat, prototype: WebGLShaderPrecisionFormat }, WebGLSync: { new(): WebGLSync, prototype: WebGLSync }, WebGLTexture: { new(): WebGLTexture, prototype: WebGLTexture }, WebGLTransformFeedback: { new(): WebGLTransformFeedback, prototype: WebGLTransformFeedback }, WebGLUniformLocation: { new(): WebGLUniformLocation, prototype: WebGLUniformLocation }, WebGLVertexArrayObject: { new(): WebGLVertexArrayObject, prototype: WebGLVertexArrayObject }, WebSocket: { new(url: string | URL, protocols?: string | string[]): WebSocket, prototype: WebSocket, readonly CONNECTING: 0, readonly OPEN: 1, readonly CLOSING: 2, readonly CLOSED: 3 }, WebTransport: { new(url: string | URL, options?: WebTransportOptions): WebTransport, prototype: WebTransport }, WebTransportBidirectionalStream: { new(): WebTransportBidirectionalStream, prototype: WebTransportBidirectionalStream }, WebTransportDatagramDuplexStream: { new(): WebTransportDatagramDuplexStream, prototype: WebTransportDatagramDuplexStream }, WebTransportError: { new(message?: string, options?: WebTransportErrorOptions): WebTransportError, prototype: WebTransportError }, WheelEvent: { new(type: string, eventInitDict?: WheelEventInit): WheelEvent, prototype: WheelEvent, readonly DOM_DELTA_PIXEL: 0, readonly DOM_DELTA_LINE: 1, readonly DOM_DELTA_PAGE: 2 }, Window: { new(): Window, prototype: Window }, Worker: { new(scriptURL: string | URL, options?: WorkerOptions): Worker, prototype: Worker }, Worklet: { new(): Worklet, prototype: Worklet }, WritableStream: { new<W>(underlyingSink?: UnderlyingSink<W>, strategy?: QueuingStrategy<W>): WritableStream<W>, prototype: WritableStream<any> }, WritableStreamDefaultController: { new(): WritableStreamDefaultController, prototype: WritableStreamDefaultController }, WritableStreamDefaultWriter: { new<W>(stream: WritableStream<W>): WritableStreamDefaultWriter<W>, prototype: WritableStreamDefaultWriter<any> }, XMLDocument: { new(): XMLDocument, prototype: XMLDocument }, XMLHttpRequest: { new(): XMLHttpRequest, prototype: XMLHttpRequest, readonly UNSENT: 0, readonly OPENED: 1, readonly HEADERS_RECEIVED: 2, readonly LOADING: 3, readonly DONE: 4 }, XMLHttpRequestEventTarget: { new(): XMLHttpRequestEventTarget, prototype: XMLHttpRequestEventTarget }, XMLHttpRequestUpload: { new(): XMLHttpRequestUpload, prototype: XMLHttpRequestUpload }, XMLSerializer: { new(): XMLSerializer, prototype: XMLSerializer }, XPathEvaluator: { new(): XPathEvaluator, prototype: XPathEvaluator }, XPathExpression: { new(): XPathExpression, prototype: XPathExpression }, XPathResult: { new(): XPathResult, prototype: XPathResult, readonly ANY_TYPE: 0, readonly NUMBER_TYPE: 1, readonly STRING_TYPE: 2, readonly BOOLEAN_TYPE: 3, readonly UNORDERED_NODE_ITERATOR_TYPE: 4, readonly ORDERED_NODE_ITERATOR_TYPE: 5, readonly UNORDERED_NODE_SNAPSHOT_TYPE: 6, readonly ORDERED_NODE_SNAPSHOT_TYPE: 7, readonly ANY_UNORDERED_NODE_TYPE: 8, readonly FIRST_ORDERED_NODE_TYPE: 9 }, XSLTProcessor: { new(): XSLTProcessor, prototype: XSLTProcessor }, console: Console, CSS: { highlights: HighlightRegistry, Hz: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, Q: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, cap: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, ch: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, cm: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, cqb: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, cqh: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, cqi: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, cqmax: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, cqmin: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, cqw: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, deg: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, dpcm: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, dpi: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, dppx: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, dvb: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, dvh: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, dvi: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, dvmax: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, dvmin: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, dvw: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, em: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, escape: { (ident: string): string, (ident: string): string }, ex: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, fr: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, grad: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, ic: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, kHz: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, lh: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, lvb: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, lvh: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, lvi: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, lvmax: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, lvmin: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, lvw: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, mm: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, ms: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, number: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, pc: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, percent: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, pt: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, px: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, rad: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, rcap: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, rch: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, registerProperty: { (definition: PropertyDefinition): void, (definition: PropertyDefinition): void }, rem: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, rex: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, ric: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, rlh: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, s: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, supports: { (property: string, value: string): boolean, (conditionText: string): boolean, (property: string, value: string): boolean, (conditionText: string): boolean }, svb: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, svh: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, svi: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, svmax: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, svmin: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, svw: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, turn: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, vb: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, vh: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, vi: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, vmax: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, vmin: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, vw: { (value: number): CSSUnitValue, (value: number): CSSUnitValue } }, WebAssembly: { CompileError: { (message?: string): CompileError, new(message?: string): CompileError, prototype: CompileError }, Global: { new<T>(descriptor: GlobalDescriptor<T>, v?: ValueTypeMap[T]): Global<T>, prototype: Global<keyof ValueTypeMap> }, Instance: { new(module: Module, importObject?: Imports): Instance, prototype: Instance }, LinkError: { (message?: string): LinkError, new(message?: string): LinkError, prototype: LinkError }, Memory: { new(descriptor: MemoryDescriptor): Memory, prototype: Memory }, Module: { new(bytes: BufferSource): Module, prototype: Module, customSections: (moduleObject: Module, sectionName: string) => ArrayBuffer[], exports: (moduleObject: Module) => ModuleExportDescriptor[], imports: (moduleObject: Module) => ModuleImportDescriptor[] }, RuntimeError: { (message?: string): RuntimeError, new(message?: string): RuntimeError, prototype: RuntimeError }, Table: { new(descriptor: TableDescriptor, value?: any): Table, prototype: Table }, compile: { (bytes: BufferSource): Promise<Module>, (bytes: BufferSource): Promise<Module>, (bytes: BufferSource): Promise<Module> }, compileStreaming: { (source: Response | PromiseLike<Response>): Promise<Module>, (source: Response | PromiseLike<Response>): Promise<Module>, (source: Response | PromiseLike<Response>): Promise<Module> }, instantiate: { (bytes: BufferSource, importObject?: Imports): Promise<WebAssemblyInstantiatedSource>, (moduleObject: Module, importObject?: Imports): Promise<Instance>, (bytes: BufferSource, importObject?: Imports): Promise<WebAssemblyInstantiatedSource>, (moduleObject: Module, importObject?: Imports): Promise<Instance>, (bytes: BufferSource, importObject?: Imports): Promise<WebAssemblyInstantiatedSource>, (moduleObject: Module, importObject?: Imports): Promise<Instance> }, instantiateStreaming: { (source: Response | PromiseLike<Response>, importObject?: Imports): Promise<WebAssemblyInstantiatedSource>, (source: Response | PromiseLike<Response>, importObject?: Imports): Promise<WebAssemblyInstantiatedSource>, (source: Response | PromiseLike<Response>, importObject?: Imports): Promise<WebAssemblyInstantiatedSource> }, validate: { (bytes: BufferSource): boolean, (bytes: BufferSource): boolean, (bytes: BufferSource): boolean } }, Audio: new(src?: string) => HTMLAudioElement, Image: new(width?: number, height?: number) => HTMLImageElement, Option: new(text?: string, value?: string, defaultSelected?: boolean, selected?: boolean) => HTMLOptionElement, clientInformation: Navigator, closed: boolean, customElements: CustomElementRegistry, devicePixelRatio: number, document: Document, event: Event, external: External, frameElement: Element, frames: Window, history: History, innerHeight: number, innerWidth: number, length: number, location: Location, locationbar: BarProp, menubar: BarProp, navigator: Navigator, ondevicemotion: (ev: DeviceMotionEvent) => any, ondeviceorientation: (ev: DeviceOrientationEvent) => any, ondeviceorientationabsolute: (ev: DeviceOrientationEvent) => any, onorientationchange: (ev: Event) => any, opener: any, orientation: number, outerHeight: number, outerWidth: number, pageXOffset: number, pageYOffset: number, parent: Window, personalbar: BarProp, screen: Screen, screenLeft: number, screenTop: number, screenX: number, screenY: number, scrollX: number, scrollY: number, scrollbars: BarProp, self: Window & ???, speechSynthesis: SpeechSynthesis, status: string, statusbar: BarProp, toolbar: BarProp, top: Window, visualViewport: VisualViewport, window: Window & ???, alert: { (message?: any): void, (message?: any): void }, blur: { (): void, (): void }, cancelIdleCallback: { (handle: number): void, (handle: number): void }, captureEvents: { (): void, (): void }, close: { (): void, (): void, (): void }, confirm: { (message?: string): boolean, (message?: string): boolean }, focus: { (): void, (): void }, getComputedStyle: { (elt: Element, pseudoElt?: string): CSSStyleDeclaration, (elt: Element, pseudoElt?: string): CSSStyleDeclaration }, getSelection: { (): Selection, (): Selection }, matchMedia: { (query: string): MediaQueryList, (query: string): MediaQueryList }, moveBy: { (x: number, y: number): void, (x: number, y: number): void }, moveTo: { (x: number, y: number): void, (x: number, y: number): void }, open: { (url?: string | URL, target?: string, features?: string): Window, (url?: string | URL, target?: string, features?: string): Window }, postMessage: { (message: any, targetOrigin: string, transfer?: Transferable[]): void, (message: any, options?: WindowPostMessageOptions): void, (message: any, targetOrigin: string, transfer?: Transferable[]): void, (message: any, options?: WindowPostMessageOptions): void, (message: any, transfer: Transferable[]): void, (message: any, options?: StructuredSerializeOptions): void }, print: { (): void, (): void }, prompt: { (message?: string, _default?: string): string, (message?: string, _default?: string): string }, releaseEvents: { (): void, (): void }, requestIdleCallback: { (callback: IdleRequestCallback, options?: IdleRequestOptions): number, (callback: IdleRequestCallback, options?: IdleRequestOptions): number }, resizeBy: { (x: number, y: number): void, (x: number, y: number): void }, resizeTo: { (width: number, height: number): void, (width: number, height: number): void }, scroll: { (options?: ScrollToOptions): void, (x: number, y: number): void, (options?: ScrollToOptions): void, (x: number, y: number): void }, scrollBy: { (options?: ScrollToOptions): void, (x: number, y: number): void, (options?: ScrollToOptions): void, (x: number, y: number): void }, scrollTo: { (options?: ScrollToOptions): void, (x: number, y: number): void, (options?: ScrollToOptions): void, (x: number, y: number): void }, stop: { (): void, (): void }, toString: { (): string, (): string }, dispatchEvent: { (event: Event): boolean, (event: Event): boolean, (event: Event): boolean, (event: Event): boolean }, cancelAnimationFrame: { (handle: number): void, (handle: number): void, (handle: number): void }, requestAnimationFrame: { (callback: FrameRequestCallback): number, (callback: FrameRequestCallback): number, (callback: FrameRequestCallback): number }, onabort: (ev: UIEvent) => any, onanimationcancel: (ev: AnimationEvent) => any, onanimationend: (ev: AnimationEvent) => any, onanimationiteration: (ev: AnimationEvent) => any, onanimationstart: (ev: AnimationEvent) => any, onauxclick: (ev: MouseEvent) => any, onbeforeinput: (ev: InputEvent) => any, onbeforetoggle: (ev: Event) => any, onblur: (ev: FocusEvent) => any, oncancel: (ev: Event) => any, oncanplay: (ev: Event) => any, oncanplaythrough: (ev: Event) => any, onchange: (ev: Event) => any, onclick: (ev: MouseEvent) => any, onclose: (ev: Event) => any, oncontextlost: (ev: Event) => any, oncontextmenu: (ev: MouseEvent) => any, oncontextrestored: (ev: Event) => any, oncopy: (ev: ClipboardEvent) => any, oncuechange: (ev: Event) => any, oncut: (ev: ClipboardEvent) => any, ondblclick: (ev: MouseEvent) => any, ondrag: (ev: DragEvent) => any, ondragend: (ev: DragEvent) => any, ondragenter: (ev: DragEvent) => any, ondragleave: (ev: DragEvent) => any, ondragover: (ev: DragEvent) => any, ondragstart: (ev: DragEvent) => any, ondrop: (ev: DragEvent) => any, ondurationchange: (ev: Event) => any, onemptied: (ev: Event) => any, onended: (ev: Event) => any, onerror: OnErrorEventHandlerNonNull, onfocus: (ev: FocusEvent) => any, onformdata: (ev: FormDataEvent) => any, ongotpointercapture: (ev: PointerEvent) => any, oninput: (ev: Event) => any, oninvalid: (ev: Event) => any, onkeydown: (ev: KeyboardEvent) => any, onkeypress: (ev: KeyboardEvent) => any, onkeyup: (ev: KeyboardEvent) => any, onload: (ev: Event) => any, onloadeddata: (ev: Event) => any, onloadedmetadata: (ev: Event) => any, onloadstart: (ev: Event) => any, onlostpointercapture: (ev: PointerEvent) => any, onmousedown: (ev: MouseEvent) => any, onmouseenter: (ev: MouseEvent) => any, onmouseleave: (ev: MouseEvent) => any, onmousemove: (ev: MouseEvent) => any, onmouseout: (ev: MouseEvent) => any, onmouseover: (ev: MouseEvent) => any, onmouseup: (ev: MouseEvent) => any, onpaste: (ev: ClipboardEvent) => any, onpause: (ev: Event) => any, onplay: (ev: Event) => any, onplaying: (ev: Event) => any, onpointercancel: (ev: PointerEvent) => any, onpointerdown: (ev: PointerEvent) => any, onpointerenter: (ev: PointerEvent) => any, onpointerleave: (ev: PointerEvent) => any, onpointermove: (ev: PointerEvent) => any, onpointerout: (ev: PointerEvent) => any, onpointerover: (ev: PointerEvent) => any, onpointerup: (ev: PointerEvent) => any, onprogress: (ev: ProgressEvent<EventTarget>) => any, onratechange: (ev: Event) => any, onreset: (ev: Event) => any, onresize: (ev: UIEvent) => any, onscroll: (ev: Event) => any, onscrollend: (ev: Event) => any, onsecuritypolicyviolation: (ev: SecurityPolicyViolationEvent) => any, onseeked: (ev: Event) => any, onseeking: (ev: Event) => any, onselect: (ev: Event) => any, onselectionchange: (ev: Event) => any, onselectstart: (ev: Event) => any, onslotchange: (ev: Event) => any, onstalled: (ev: Event) => any, onsubmit: (ev: SubmitEvent) => any, onsuspend: (ev: Event) => any, ontimeupdate: (ev: Event) => any, ontoggle: (ev: Event) => any, ontouchcancel: (ev: TouchEvent) => any, ontouchend: (ev: TouchEvent) => any, ontouchmove: (ev: TouchEvent) => any, ontouchstart: (ev: TouchEvent) => any, ontransitioncancel: (ev: TransitionEvent) => any, ontransitionend: (ev: TransitionEvent) => any, ontransitionrun: (ev: TransitionEvent) => any, ontransitionstart: (ev: TransitionEvent) => any, onvolumechange: (ev: Event) => any, onwaiting: (ev: Event) => any, onwebkitanimationend: (ev: Event) => any, onwebkitanimationiteration: (ev: Event) => any, onwebkitanimationstart: (ev: Event) => any, onwebkittransitionend: (ev: Event) => any, onwheel: (ev: WheelEvent) => any, onafterprint: (ev: Event) => any, onbeforeprint: (ev: Event) => any, onbeforeunload: (ev: BeforeUnloadEvent) => any, ongamepadconnected: (ev: GamepadEvent) => any, ongamepaddisconnected: (ev: GamepadEvent) => any, onhashchange: (ev: HashChangeEvent) => any, onlanguagechange: (ev: Event) => any, onmessage: (ev: MessageEvent<any>) => any, onmessageerror: (ev: MessageEvent<any>) => any, onoffline: (ev: Event) => any, ononline: (ev: Event) => any, onpagehide: (ev: PageTransitionEvent) => any, onpageshow: (ev: PageTransitionEvent) => any, onpopstate: (ev: PopStateEvent) => any, onrejectionhandled: (ev: PromiseRejectionEvent) => any, onstorage: (ev: StorageEvent) => any, onunhandledrejection: (ev: PromiseRejectionEvent) => any, onunload: (ev: Event) => any, localStorage: Storage, caches: CacheStorage, crossOriginIsolated: boolean, crypto: Crypto, indexedDB: IDBFactory, isSecureContext: boolean, origin: string, performance: Performance, atob: { (data: string): string, (data: string): string, (data: string): string }, btoa: { (data: string): string, (data: string): string, (data: string): string }, clearInterval: { (id: number): void, (id: number): void, (id: number): void }, clearTimeout: { (id: number): void, (id: number): void, (id: number): void }, createImageBitmap: { (image: ImageBitmapSource, options?: ImageBitmapOptions): Promise<ImageBitmap>, (image: ImageBitmapSource, sx: number, sy: number, sw: number, sh: number, options?: ImageBitmapOptions): Promise<ImageBitmap>, (image: ImageBitmapSource, options?: ImageBitmapOptions): Promise<ImageBitmap>, (image: ImageBitmapSource, sx: number, sy: number, sw: number, sh: number, options?: ImageBitmapOptions): Promise<ImageBitmap>, (image: ImageBitmapSource, options?: ImageBitmapOptions): Promise<ImageBitmap>, (image: ImageBitmapSource, sx: number, sy: number, sw: number, sh: number, options?: ImageBitmapOptions): Promise<ImageBitmap> }, fetch: { (input: URL | RequestInfo, init?: RequestInit): Promise<Response>, (input: URL | RequestInfo, init?: RequestInit): Promise<Response>, (input: URL | RequestInfo, init?: RequestInit): Promise<Response> }, queueMicrotask: { (callback: VoidFunction): void, (callback: VoidFunction): void, (callback: VoidFunction): void }, reportError: { (e: any): void, (e: any): void, (e: any): void }, setInterval: { (handler: TimerHandler, timeout?: number, ...arguments: any[]): number, (handler: TimerHandler, timeout?: number, ...arguments: any[]): number, (handler: TimerHandler, timeout?: number, ...arguments: any[]): number }, setTimeout: { (handler: TimerHandler, timeout?: number, ...arguments: any[]): number, (handler: TimerHandler, timeout?: number, ...arguments: any[]): number, (handler: TimerHandler, timeout?: number, ...arguments: any[]): number }, structuredClone: { <T>(value: T, options?: StructuredSerializeOptions): T, <T>(value: T, options?: StructuredSerializeOptions): T, <T>(value: T, options?: StructuredSerializeOptions): T }, sessionStorage: Storage, addEventListener: { <K>(type: K, listener: (ev: WindowEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void, (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void, <K>(type: K, listener: (ev: WindowEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void, (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void, <K>(type: K, listener: (ev: DedicatedWorkerGlobalScopeEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void, (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void }, removeEventListener: { <K>(type: K, listener: (ev: WindowEventMap[K]) => any, options?: boolean | EventListenerOptions): void, (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void, <K>(type: K, listener: (ev: WindowEventMap[K]) => any, options?: boolean | EventListenerOptions): void, (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void, <K>(type: K, listener: (ev: DedicatedWorkerGlobalScopeEventMap[K]) => any, options?: boolean | EventListenerOptions): void, (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void }, readonly globalThis: ???, undefined: undefined }', but here has type 'WorkerGlobalScope & { Reflect: { apply: { <T, A, R>(target: (...args: A) => R, thisArgument: T, argumentsList: Readonly<A>): R, (target: Function, thisArgument: any, argumentsList: ArrayLike<any>): any, <T, A, R>(target: (...args: A) => R, thisArgument: T, argumentsList: Readonly<A>): R, (target: Function, thisArgument: any, argumentsList: ArrayLike<any>): any }, construct: { <A, R>(target: new(...args: A) => R, argumentsList: Readonly<A>, newTarget?: new(...args: any) => any): R, (target: Function, argumentsList: ArrayLike<any>, newTarget?: Function): any, <A, R>(target: new(...args: A) => R, argumentsList: Readonly<A>, newTarget?: new(...args: any) => any): R, (target: Function, argumentsList: ArrayLike<any>, newTarget?: Function): any }, defineProperty: { (target: object, propertyKey: PropertyKey, attributes: PropertyDescriptor & ThisType<any>): boolean, (target: object, propertyKey: PropertyKey, attributes: PropertyDescriptor & ThisType<any>): boolean }, deleteProperty: { (target: object, propertyKey: PropertyKey): boolean, (target: object, propertyKey: PropertyKey): boolean }, get: { <T, P>(target: T, propertyKey: P, receiver?: unknown): , <T, P>(target: T, propertyKey: P, receiver?: unknown):  }, getOwnPropertyDescriptor: { <T, P>(target: T, propertyKey: P): TypedPropertyDescriptor<>, <T, P>(target: T, propertyKey: P): TypedPropertyDescriptor<> }, getPrototypeOf: { (target: object): object, (target: object): object }, has: { (target: object, propertyKey: PropertyKey): boolean, (target: object, propertyKey: PropertyKey): boolean }, isExtensible: { (target: object): boolean, (target: object): boolean }, ownKeys: { (target: object): (string | symbol)[], (target: object): (string | symbol)[] }, preventExtensions: { (target: object): boolean, (target: object): boolean }, set: { <T, P>(target: T, propertyKey: P, value: , receiver?: any): boolean, (target: object, propertyKey: PropertyKey, value: any, receiver?: any): boolean, <T, P>(target: T, propertyKey: P, value: , receiver?: any): boolean, (target: object, propertyKey: PropertyKey, value: any, receiver?: any): boolean }, setPrototypeOf: { (target: object, proto: object): boolean, (target: object, proto: object): boolean } }, importScripts: { (...urls: string[]): void, (...urls: (string | URL)[]): void, (...urls: string[]): void }, ActiveXObject: ActiveXObject, NaN: number, Infinity: number, eval: { (x: string): any, (x: string): any }, AggregateError: AggregateErrorConstructor, parseInt: { (string: string, radix?: number): number, (string: string, radix?: number): number }, SharedArrayBuffer: SharedArrayBufferConstructor, WeakRef: WeakRefConstructor, parseFloat: { (string: string): number, (string: string): number }, Symbol: SymbolConstructor, isNaN: { (number: number): boolean, (number: number): boolean }, SuppressedError: SuppressedErrorConstructor, isFinite: { (number: number): boolean, (number: number): boolean }, decodeURI: { (encodedURI: string): string, (encodedURI: string): string }, Map: MapConstructor, decodeURIComponent: { (encodedURIComponent: string): string, (encodedURIComponent: string): string }, encodeURI: { (uri: string): string, (uri: string): string }, encodeURIComponent: { (uriComponent: string | number | boolean): string, (uriComponent: string | number | boolean): string }, escape: { (string: string): string, (string: string): string }, FinalizationRegistry: FinalizationRegistryConstructor, Promise: PromiseConstructor, unescape: { (string: string): string, (string: string): string }, WeakMap: WeakMapConstructor, WScript: { Echo: (s: any) => void, StdErr: TextStreamWriter, StdOut: TextStreamWriter, Arguments: { length: number, Item: (n: number) => string }, ScriptFullName: string, Quit: (exitCode?: number) => number, BuildVersion: number, FullName: string, Interactive: boolean, Name: string, Path: string, ScriptName: string, StdIn: TextStreamReader, Version: string, ConnectObject: (objEventSource: any, strPrefix: string) => void, CreateObject: (strProgID: string, strPrefix?: string) => any, DisconnectObject: (obj: any) => void, GetObject: (strPathname: string, strProgID?: string, strPrefix?: string) => any, Sleep: (intTime: number) => void }, DisposableStack: DisposableStackConstructor, Set: SetConstructor, WeakSet: WeakSetConstructor, Proxy: ProxyConstructor, BigInt: BigIntConstructor, AsyncDisposableStack: AsyncDisposableStackConstructor, WSH: { Echo: (s: any) => void, StdErr: TextStreamWriter, StdOut: TextStreamWriter, Arguments: { length: number, Item: (n: number) => string }, ScriptFullName: string, Quit: (exitCode?: number) => number, BuildVersion: number, FullName: string, Interactive: boolean, Name: string, Path: string, ScriptName: string, StdIn: TextStreamReader, Version: string, ConnectObject: (objEventSource: any, strPrefix: string) => void, CreateObject: (strProgID: string, strPrefix?: string) => any, DisconnectObject: (obj: any) => void, GetObject: (strPathname: string, strProgID?: string, strPrefix?: string) => any, Sleep: (intTime: number) => void }, Atomics: Atomics, Enumerator: EnumeratorConstructor, Iterator: IteratorConstructor, VBArray: VBArrayConstructor, Object: ObjectConstructor, Function: FunctionConstructor, BigInt64Array: BigInt64ArrayConstructor, String: StringConstructor, Boolean: BooleanConstructor, Number: NumberConstructor, Math: Math, BigUint64Array: BigUint64ArrayConstructor, Date: DateConstructor, RegExp: RegExpConstructor, Error: ErrorConstructor, EvalError: EvalErrorConstructor, RangeError: RangeErrorConstructor, ReferenceError: ReferenceErrorConstructor, SyntaxError: SyntaxErrorConstructor, TypeError: TypeErrorConstructor, URIError: URIErrorConstructor, JSON: JSON, NodeFilter: { readonly FILTER_ACCEPT: 1, readonly FILTER_REJECT: 2, readonly FILTER_SKIP: 3, readonly SHOW_ALL: 4.294967295e+09, readonly SHOW_ELEMENT: 1, readonly SHOW_ATTRIBUTE: 2, readonly SHOW_TEXT: 4, readonly SHOW_CDATA_SECTION: 8, readonly SHOW_ENTITY_REFERENCE: 16, readonly SHOW_ENTITY: 32, readonly SHOW_PROCESSING_INSTRUCTION: 64, readonly SHOW_COMMENT: 128, readonly SHOW_DOCUMENT: 256, readonly SHOW_DOCUMENT_TYPE: 512, readonly SHOW_DOCUMENT_FRAGMENT: 1024, readonly SHOW_NOTATION: 2048 }, AbortController: { new(): AbortController, prototype: AbortController }, AbortSignal: { new(): AbortSignal, prototype: AbortSignal, abort: (reason?: any) => AbortSignal, any: (signals: AbortSignal[]) => AbortSignal, timeout: (milliseconds: number) => AbortSignal }, AbstractRange: { new(): AbstractRange, prototype: AbstractRange }, AnalyserNode: { new(context: BaseAudioContext, options?: AnalyserOptions): AnalyserNode, prototype: AnalyserNode }, Array: ArrayConstructor, Animation: { new(effect?: AnimationEffect, timeline?: AnimationTimeline): Animation, prototype: Animation }, Client: { new(): Client, prototype: Client }, AnimationEffect: { new(): AnimationEffect, prototype: AnimationEffect }, Clients: { new(): Clients, prototype: Clients }, AnimationEvent: { new(type: string, animationEventInitDict?: AnimationEventInit): AnimationEvent, prototype: AnimationEvent }, AnimationPlaybackEvent: { new(type: string, eventInitDict?: AnimationPlaybackEventInit): AnimationPlaybackEvent, prototype: AnimationPlaybackEvent }, AnimationTimeline: { new(): AnimationTimeline, prototype: AnimationTimeline }, Attr: { new(): Attr, prototype: Attr }, ArrayBuffer: ArrayBufferConstructor, AudioBuffer: { new(options: AudioBufferOptions): AudioBuffer, prototype: AudioBuffer }, AudioBufferSourceNode: { new(context: BaseAudioContext, options?: AudioBufferSourceOptions): AudioBufferSourceNode, prototype: AudioBufferSourceNode }, AudioContext: { new(contextOptions?: AudioContextOptions): AudioContext, prototype: AudioContext }, AudioDestinationNode: { new(): AudioDestinationNode, prototype: AudioDestinationNode }, DataView: DataViewConstructor, AudioListener: { new(): AudioListener, prototype: AudioListener }, AudioNode: { new(): AudioNode, prototype: AudioNode }, AudioData: { new(init: AudioDataInit): AudioData, prototype: AudioData }, AudioParam: { new(): AudioParam, prototype: AudioParam }, AudioParamMap: { new(): AudioParamMap, prototype: AudioParamMap }, AudioProcessingEvent: { new(type: string, eventInitDict: AudioProcessingEventInit): AudioProcessingEvent, prototype: AudioProcessingEvent }, AudioDecoder: { new(init: AudioDecoderInit): AudioDecoder, prototype: AudioDecoder, isConfigSupported: (config: AudioDecoderConfig) => Promise<AudioDecoderSupport> }, AudioScheduledSourceNode: { new(): AudioScheduledSourceNode, prototype: AudioScheduledSourceNode }, AudioWorklet: { new(): AudioWorklet, prototype: AudioWorklet }, AudioEncoder: { new(init: AudioEncoderInit): AudioEncoder, prototype: AudioEncoder, isConfigSupported: (config: AudioEncoderConfig) => Promise<AudioEncoderSupport> }, AudioWorkletNode: { new(context: BaseAudioContext, name: string, options?: AudioWorkletNodeOptions): AudioWorkletNode, prototype: AudioWorkletNode }, AuthenticatorAssertionResponse: { new(): AuthenticatorAssertionResponse, prototype: AuthenticatorAssertionResponse }, AuthenticatorAttestationResponse: { new(): AuthenticatorAttestationResponse, prototype: AuthenticatorAttestationResponse }, AuthenticatorResponse: { new(): AuthenticatorResponse, prototype: AuthenticatorResponse }, BarProp: { new(): BarProp, prototype: BarProp }, DedicatedWorkerGlobalScope: { new(): DedicatedWorkerGlobalScope, prototype: DedicatedWorkerGlobalScope }, Int8Array: Int8ArrayConstructor, BaseAudioContext: { new(): BaseAudioContext, prototype: BaseAudioContext }, BeforeUnloadEvent: { new(): BeforeUnloadEvent, prototype: BeforeUnloadEvent }, BiquadFilterNode: { new(context: BaseAudioContext, options?: BiquadFilterOptions): BiquadFilterNode, prototype: BiquadFilterNode }, Blob: { new(blobParts?: BlobPart[], options?: BlobPropertyBag): Blob, prototype: Blob }, BlobEvent: { new(type: string, eventInitDict: BlobEventInit): BlobEvent, prototype: BlobEvent }, BroadcastChannel: { new(name: string): BroadcastChannel, prototype: BroadcastChannel }, ByteLengthQueuingStrategy: { new(init: QueuingStrategyInit): ByteLengthQueuingStrategy, prototype: ByteLengthQueuingStrategy }, CDATASection: { new(): CDATASection, prototype: CDATASection }, CSSAnimation: { new(): CSSAnimation, prototype: CSSAnimation }, CSSConditionRule: { new(): CSSConditionRule, prototype: CSSConditionRule }, CSSContainerRule: { new(): CSSContainerRule, prototype: CSSContainerRule }, Uint8Array: Uint8ArrayConstructor, CSSCounterStyleRule: { new(): CSSCounterStyleRule, prototype: CSSCounterStyleRule }, CSSFontFaceRule: { new(): CSSFontFaceRule, prototype: CSSFontFaceRule }, CSSFontFeatureValuesRule: { new(): CSSFontFeatureValuesRule, prototype: CSSFontFeatureValuesRule }, ExtendableEvent: { new(type: string, eventInitDict?: ExtendableEventInit): ExtendableEvent, prototype: ExtendableEvent }, CSSFontPaletteValuesRule: { new(): CSSFontPaletteValuesRule, prototype: CSSFontPaletteValuesRule }, ExtendableMessageEvent: { new(type: string, eventInitDict?: ExtendableMessageEventInit): ExtendableMessageEvent, prototype: ExtendableMessageEvent }, CSSGroupingRule: { new(): CSSGroupingRule, prototype: CSSGroupingRule }, CSSImageValue: { new(): CSSImageValue, prototype: CSSImageValue }, CSSImportRule: { new(): CSSImportRule, prototype: CSSImportRule }, FetchEvent: { new(type: string, eventInitDict: FetchEventInit): FetchEvent, prototype: FetchEvent }, CSSKeyframeRule: { new(): CSSKeyframeRule, prototype: CSSKeyframeRule }, CSSKeyframesRule: { new(): CSSKeyframesRule, prototype: CSSKeyframesRule }, CSSKeywordValue: { new(value: string): CSSKeywordValue, prototype: CSSKeywordValue }, CSSLayerBlockRule: { new(): CSSLayerBlockRule, prototype: CSSLayerBlockRule }, CSSLayerStatementRule: { new(): CSSLayerStatementRule, prototype: CSSLayerStatementRule }, CSSMathClamp: { new(lower: CSSNumberish, value: CSSNumberish, upper: CSSNumberish): CSSMathClamp, prototype: CSSMathClamp }, CSSMathInvert: { new(arg: CSSNumberish): CSSMathInvert, prototype: CSSMathInvert }, CSSMathMax: { new(...args: CSSNumberish[]): CSSMathMax, prototype: CSSMathMax }, CSSMathMin: { new(...args: CSSNumberish[]): CSSMathMin, prototype: CSSMathMin }, CSSMathNegate: { new(arg: CSSNumberish): CSSMathNegate, prototype: CSSMathNegate }, CSSMathProduct: { new(...args: CSSNumberish[]): CSSMathProduct, prototype: CSSMathProduct }, CSSMathSum: { new(...args: CSSNumberish[]): CSSMathSum, prototype: CSSMathSum }, CSSMathValue: { new(): CSSMathValue, prototype: CSSMathValue }, CSSMatrixComponent: { new(matrix: DOMMatrixReadOnly, options?: CSSMatrixComponentOptions): CSSMatrixComponent, prototype: CSSMatrixComponent }, FileReaderSync: { new(): FileReaderSync, prototype: FileReaderSync }, CSSMediaRule: { new(): CSSMediaRule, prototype: CSSMediaRule }, CSSNamespaceRule: { new(): CSSNamespaceRule, prototype: CSSNamespaceRule }, CSSNumericArray: { new(): CSSNumericArray, prototype: CSSNumericArray }, Uint8ClampedArray: Uint8ClampedArrayConstructor, CSSNumericValue: { new(): CSSNumericValue, prototype: CSSNumericValue, parse: (cssText: string) => CSSNumericValue }, FileSystemSyncAccessHandle: { new(): FileSystemSyncAccessHandle, prototype: FileSystemSyncAccessHandle }, CSSPageRule: { new(): CSSPageRule, prototype: CSSPageRule }, CSSPerspective: { new(length: CSSPerspectiveValue): CSSPerspective, prototype: CSSPerspective }, CSSPropertyRule: { new(): CSSPropertyRule, prototype: CSSPropertyRule }, CSSRotate: { new(angle: CSSNumericValue): CSSRotate, new(x: CSSNumberish, y: CSSNumberish, z: CSSNumberish, angle: CSSNumericValue): CSSRotate, prototype: CSSRotate }, CSSRule: { new(): CSSRule, prototype: CSSRule, readonly STYLE_RULE: 1, readonly CHARSET_RULE: 2, readonly IMPORT_RULE: 3, readonly MEDIA_RULE: 4, readonly FONT_FACE_RULE: 5, readonly PAGE_RULE: 6, readonly NAMESPACE_RULE: 10, readonly KEYFRAMES_RULE: 7, readonly KEYFRAME_RULE: 8, readonly SUPPORTS_RULE: 12, readonly COUNTER_STYLE_RULE: 11, readonly FONT_FEATURE_VALUES_RULE: 14 }, CSSRuleList: { new(): CSSRuleList, prototype: CSSRuleList }, CSSScale: { new(x: CSSNumberish, y: CSSNumberish, z?: CSSNumberish): CSSScale, prototype: CSSScale }, CSSScopeRule: { new(): CSSScopeRule, prototype: CSSScopeRule }, CSSSkew: { new(ax: CSSNumericValue, ay: CSSNumericValue): CSSSkew, prototype: CSSSkew }, CSSSkewX: { new(ax: CSSNumericValue): CSSSkewX, prototype: CSSSkewX }, CSSSkewY: { new(ay: CSSNumericValue): CSSSkewY, prototype: CSSSkewY }, CSSStartingStyleRule: { new(): CSSStartingStyleRule, prototype: CSSStartingStyleRule }, Int16Array: Int16ArrayConstructor, Uint16Array: Uint16ArrayConstructor, Int32Array: Int32ArrayConstructor, MediaStreamTrackProcessor: { new(init: MediaStreamTrackProcessorInit): MediaStreamTrackProcessor, prototype: MediaStreamTrackProcessor }, Uint32Array: Uint32ArrayConstructor, NotificationEvent: { new(type: string, eventInitDict: NotificationEventInit): NotificationEvent, prototype: NotificationEvent }, CSSStyleDeclaration: { new(): CSSStyleDeclaration, prototype: CSSStyleDeclaration }, CSSStyleRule: { new(): CSSStyleRule, prototype: CSSStyleRule }, Float32Array: Float32ArrayConstructor, CSSStyleSheet: { new(options?: CSSStyleSheetInit): CSSStyleSheet, prototype: CSSStyleSheet }, CSSStyleValue: { new(): CSSStyleValue, prototype: CSSStyleValue, parse: (property: string, cssText: string) => CSSStyleValue, parseAll: (property: string, cssText: string) => CSSStyleValue[] }, CSSSupportsRule: { new(): CSSSupportsRule, prototype: CSSSupportsRule }, CSSTransformComponent: { new(): CSSTransformComponent, prototype: CSSTransformComponent }, CSSTransformValue: { new(transforms: CSSTransformComponent[]): CSSTransformValue, prototype: CSSTransformValue }, CSSTransition: { new(): CSSTransition, prototype: CSSTransition }, CSSTranslate: { new(x: CSSNumericValue, y: CSSNumericValue, z?: CSSNumericValue): CSSTranslate, prototype: CSSTranslate }, CSSUnitValue: { new(value: number, unit: string): CSSUnitValue, prototype: CSSUnitValue }, CSSUnparsedValue: { new(members: CSSUnparsedSegment[]): CSSUnparsedValue, prototype: CSSUnparsedValue }, CSSVariableReferenceValue: { new(variable: string, fallback?: CSSUnparsedValue): CSSVariableReferenceValue, prototype: CSSVariableReferenceValue }, Cache: { new(): Cache, prototype: Cache }, CacheStorage: { new(): CacheStorage, prototype: CacheStorage }, CanvasCaptureMediaStreamTrack: { new(): CanvasCaptureMediaStreamTrack, prototype: CanvasCaptureMediaStreamTrack }, Float64Array: Float64ArrayConstructor, Intl: { getCanonicalLocales: { (locale?: string | readonly string[]): string[], (locale?: string | readonly string[]): string[] }, readonly PluralRules: PluralRulesConstructor, readonly Segmenter: { new(locales?: LocalesArgument, options?: SegmenterOptions): Segmenter, prototype: Segmenter, supportedLocalesOf: (locales: LocalesArgument, options?: Pick<SegmenterOptions, "localeMatcher">) => string[] }, supportedValuesOf: { (key: "unit" | "currency" | "calendar" | "collation" | "numberingSystem" | "timeZone"): string[], (key: "unit" | "currency" | "calendar" | "collation" | "numberingSystem" | "timeZone"): string[] }, readonly ListFormat: { new(locales?: LocalesArgument, options?: ListFormatOptions): ListFormat, prototype: ListFormat, supportedLocalesOf: (locales: LocalesArgument, options?: Pick<ListFormatOptions, "localeMatcher">) => string[] }, readonly RelativeTimeFormat: { new(locales?: LocalesArgument, options?: RelativeTimeFormatOptions): RelativeTimeFormat, supportedLocalesOf: (locales?: LocalesArgument, options?: RelativeTimeFormatOptions) => string[] }, readonly Locale: new(tag: string | Locale, options?: LocaleOptions) => Locale, readonly DisplayNames: { new(locales: LocalesArgument, options: DisplayNamesOptions): DisplayNames, prototype: DisplayNames, supportedLocalesOf: (locales?: LocalesArgument, options?: { localeMatcher?: RelativeTimeFormatLocaleMatcher }) => string[] }, Collator: CollatorConstructor, NumberFormat: NumberFormatConstructor, DateTimeFormat: DateTimeFormatConstructor }, CanvasGradient: { new(): CanvasGradient, prototype: CanvasGradient }, PushEvent: { new(type: string, eventInitDict?: PushEventInit): PushEvent, prototype: PushEvent }, PushMessageData: { new(): PushMessageData, prototype: PushMessageData }, CanvasPattern: { new(): CanvasPattern, prototype: CanvasPattern }, CanvasRenderingContext2D: { new(): CanvasRenderingContext2D, prototype: CanvasRenderingContext2D }, RTCRtpScriptTransformer: { new(): RTCRtpScriptTransformer, prototype: RTCRtpScriptTransformer }, RTCTransformEvent: { new(): RTCTransformEvent, prototype: RTCTransformEvent }, ChannelMergerNode: { new(context: BaseAudioContext, options?: ChannelMergerOptions): ChannelMergerNode, prototype: ChannelMergerNode }, ChannelSplitterNode: { new(context: BaseAudioContext, options?: ChannelSplitterOptions): ChannelSplitterNode, prototype: ChannelSplitterNode }, CharacterData: { new(): CharacterData, prototype: CharacterData }, Clipboard: { new(): Clipboard, prototype: Clipboard }, ClipboardEvent: { new(type: string, eventInitDict?: ClipboardEventInit): ClipboardEvent, prototype: ClipboardEvent }, ClipboardItem: { new(items: Record<string, string | Blob | PromiseLike<string | Blob>>, options?: ClipboardItemOptions): ClipboardItem, prototype: ClipboardItem, supports: (type: string) => boolean }, CloseEvent: { new(type: string, eventInitDict?: CloseEventInit): CloseEvent, prototype: CloseEvent }, Comment: { new(data?: string): Comment, prototype: Comment }, CompositionEvent: { new(type: string, eventInitDict?: CompositionEventInit): CompositionEvent, prototype: CompositionEvent }, CompressionStream: { new(format: CompressionFormat): CompressionStream, prototype: CompressionStream }, ConstantSourceNode: { new(context: BaseAudioContext, options?: ConstantSourceOptions): ConstantSourceNode, prototype: ConstantSourceNode }, ContentVisibilityAutoStateChangeEvent: { new(type: string, eventInitDict?: ContentVisibilityAutoStateChangeEventInit): ContentVisibilityAutoStateChangeEvent, prototype: ContentVisibilityAutoStateChangeEvent }, ConvolverNode: { new(context: BaseAudioContext, options?: ConvolverOptions): ConvolverNode, prototype: ConvolverNode }, CountQueuingStrategy: { new(init: QueuingStrategyInit): CountQueuingStrategy, prototype: CountQueuingStrategy }, Credential: { new(): Credential, prototype: Credential }, CredentialsContainer: { new(): CredentialsContainer, prototype: CredentialsContainer }, CaretPosition: { new(): CaretPosition, prototype: CaretPosition }, Crypto: { new(): Crypto, prototype: Crypto }, CryptoKey: { new(): CryptoKey, prototype: CryptoKey }, CustomElementRegistry: { new(): CustomElementRegistry, prototype: CustomElementRegistry }, CustomEvent: { new<T>(type: string, eventInitDict?: CustomEventInit<T>): CustomEvent<T>, prototype: CustomEvent<any> }, CustomStateSet: { new(): CustomStateSet, prototype: CustomStateSet }, DOMException: { new(message?: string, name?: string): DOMException, prototype: DOMException, readonly INDEX_SIZE_ERR: 1, readonly DOMSTRING_SIZE_ERR: 2, readonly HIERARCHY_REQUEST_ERR: 3, readonly WRONG_DOCUMENT_ERR: 4, readonly INVALID_CHARACTER_ERR: 5, readonly NO_DATA_ALLOWED_ERR: 6, readonly NO_MODIFICATION_ALLOWED_ERR: 7, readonly NOT_FOUND_ERR: 8, readonly NOT_SUPPORTED_ERR: 9, readonly INUSE_ATTRIBUTE_ERR: 10, readonly INVALID_STATE_ERR: 11, readonly SYNTAX_ERR: 12, readonly INVALID_MODIFICATION_ERR: 13, readonly NAMESPACE_ERR: 14, readonly INVALID_ACCESS_ERR: 15, readonly VALIDATION_ERR: 16, readonly TYPE_MISMATCH_ERR: 17, readonly SECURITY_ERR: 18, readonly NETWORK_ERR: 19, readonly ABORT_ERR: 20, readonly URL_MISMATCH_ERR: 21, readonly QUOTA_EXCEEDED_ERR: 22, readonly TIMEOUT_ERR: 23, readonly INVALID_NODE_TYPE_ERR: 24, readonly DATA_CLONE_ERR: 25 }, DOMImplementation: { new(): DOMImplementation, prototype: DOMImplementation }, ServiceWorkerGlobalScope: { new(): ServiceWorkerGlobalScope, prototype: ServiceWorkerGlobalScope }, DOMMatrix: { new(init?: string | number[]): DOMMatrix, prototype: DOMMatrix, fromFloat32Array: (array32: Float32Array<ArrayBufferLike>) => DOMMatrix, fromFloat64Array: (array64: Float64Array<ArrayBufferLike>) => DOMMatrix, fromMatrix: (other?: DOMMatrixInit) => DOMMatrix }, SVGMatrix: { new(init?: string | number[]): DOMMatrix, prototype: DOMMatrix, fromFloat32Array: (array32: Float32Array<ArrayBufferLike>) => DOMMatrix, fromFloat64Array: (array64: Float64Array<ArrayBufferLike>) => DOMMatrix, fromMatrix: (other?: DOMMatrixInit) => DOMMatrix }, WebKitCSSMatrix: { new(init?: string | number[]): DOMMatrix, prototype: DOMMatrix, fromFloat32Array: (array32: Float32Array<ArrayBufferLike>) => DOMMatrix, fromFloat64Array: (array64: Float64Array<ArrayBufferLike>) => DOMMatrix, fromMatrix: (other?: DOMMatrixInit) => DOMMatrix }, DOMMatrixReadOnly: { new(init?: string | number[]): DOMMatrixReadOnly, prototype: DOMMatrixReadOnly, fromFloat32Array: (array32: Float32Array<ArrayBufferLike>) => DOMMatrixReadOnly, fromFloat64Array: (array64: Float64Array<ArrayBufferLike>) => DOMMatrixReadOnly, fromMatrix: (other?: DOMMatrixInit) => DOMMatrixReadOnly }, DOMParser: { new(): DOMParser, prototype: DOMParser }, DOMPoint: { new(x?: number, y?: number, z?: number, w?: number): DOMPoint, prototype: DOMPoint, fromPoint: (other?: DOMPointInit) => DOMPoint }, SharedWorkerGlobalScope: { new(): SharedWorkerGlobalScope, prototype: SharedWorkerGlobalScope }, SVGPoint: { new(x?: number, y?: number, z?: number, w?: number): DOMPoint, prototype: DOMPoint, fromPoint: (other?: DOMPointInit) => DOMPoint }, DOMPointReadOnly: { new(x?: number, y?: number, z?: number, w?: number): DOMPointReadOnly, prototype: DOMPointReadOnly, fromPoint: (other?: DOMPointInit) => DOMPointReadOnly }, DOMQuad: { new(p1?: DOMPointInit, p2?: DOMPointInit, p3?: DOMPointInit, p4?: DOMPointInit): DOMQuad, prototype: DOMQuad, fromQuad: (other?: DOMQuadInit) => DOMQuad, fromRect: (other?: DOMRectInit) => DOMQuad }, DOMRect: { new(x?: number, y?: number, width?: number, height?: number): DOMRect, prototype: DOMRect, fromRect: (other?: DOMRectInit) => DOMRect }, SVGRect: { new(x?: number, y?: number, width?: number, height?: number): DOMRect, prototype: DOMRect, fromRect: (other?: DOMRectInit) => DOMRect }, DOMRectList: { new(): DOMRectList, prototype: DOMRectList }, DOMRectReadOnly: { new(x?: number, y?: number, width?: number, height?: number): DOMRectReadOnly, prototype: DOMRectReadOnly, fromRect: (other?: DOMRectInit) => DOMRectReadOnly }, DOMStringList: { new(): DOMStringList, prototype: DOMStringList }, DOMStringMap: { new(): DOMStringMap, prototype: DOMStringMap }, DOMTokenList: { new(): DOMTokenList, prototype: DOMTokenList }, DataTransfer: { new(): DataTransfer, prototype: DataTransfer }, DataTransferItem: { new(): DataTransferItem, prototype: DataTransferItem }, DataTransferItemList: { new(): DataTransferItemList, prototype: DataTransferItemList }, DecompressionStream: { new(format: CompressionFormat): DecompressionStream, prototype: DecompressionStream }, DelayNode: { new(context: BaseAudioContext, options?: DelayOptions): DelayNode, prototype: DelayNode }, DeviceMotionEvent: { new(type: string, eventInitDict?: DeviceMotionEventInit): DeviceMotionEvent, prototype: DeviceMotionEvent }, DeviceOrientationEvent: { new(type: string, eventInitDict?: DeviceOrientationEventInit): DeviceOrientationEvent, prototype: DeviceOrientationEvent }, Document: { new(): Document, prototype: Document, parseHTMLUnsafe: (html: string) => Document }, DocumentFragment: { new(): DocumentFragment, prototype: DocumentFragment }, DocumentTimeline: { new(options?: DocumentTimelineOptions): DocumentTimeline, prototype: DocumentTimeline }, DocumentType: { new(): DocumentType, prototype: DocumentType }, DragEvent: { new(type: string, eventInitDict?: DragEventInit): DragEvent, prototype: DragEvent }, DynamicsCompressorNode: { new(context: BaseAudioContext, options?: DynamicsCompressorOptions): DynamicsCompressorNode, prototype: DynamicsCompressorNode }, Element: { new(): Element, prototype: Element }, ElementInternals: { new(): ElementInternals, prototype: ElementInternals }, EncodedVideoChunk: { new(init: EncodedVideoChunkInit): EncodedVideoChunk, prototype: EncodedVideoChunk }, ErrorEvent: { new(type: string, eventInitDict?: ErrorEventInit): ErrorEvent, prototype: ErrorEvent }, Event: { new(type: string, eventInitDict?: EventInit): Event, prototype: Event, readonly NONE: 0, readonly CAPTURING_PHASE: 1, readonly AT_TARGET: 2, readonly BUBBLING_PHASE: 3 }, EventCounts: { new(): EventCounts, prototype: EventCounts }, EventSource: { new(url: string | URL, eventSourceInitDict?: EventSourceInit): EventSource, prototype: EventSource, readonly CONNECTING: 0, readonly OPEN: 1, readonly CLOSED: 2 }, EventTarget: { new(): EventTarget, prototype: EventTarget }, External: { new(): External, prototype: External }, File: { new(fileBits: BlobPart[], fileName: string, options?: FilePropertyBag): File, prototype: File }, FileList: { new(): FileList, prototype: FileList }, FileReader: { new(): FileReader, prototype: FileReader, readonly EMPTY: 0, readonly LOADING: 1, readonly DONE: 2 }, FileSystem: { new(): FileSystem, prototype: FileSystem }, FileSystemDirectoryEntry: { new(): FileSystemDirectoryEntry, prototype: FileSystemDirectoryEntry }, EncodedAudioChunk: { new(init: EncodedAudioChunkInit): EncodedAudioChunk, prototype: EncodedAudioChunk }, FileSystemDirectoryHandle: { new(): FileSystemDirectoryHandle, prototype: FileSystemDirectoryHandle }, FileSystemDirectoryReader: { new(): FileSystemDirectoryReader, prototype: FileSystemDirectoryReader }, FileSystemEntry: { new(): FileSystemEntry, prototype: FileSystemEntry }, FileSystemFileEntry: { new(): FileSystemFileEntry, prototype: FileSystemFileEntry }, FileSystemFileHandle: { new(): FileSystemFileHandle, prototype: FileSystemFileHandle }, FileSystemHandle: { new(): FileSystemHandle, prototype: FileSystemHandle }, FileSystemWritableFileStream: { new(): FileSystemWritableFileStream, prototype: FileSystemWritableFileStream }, FocusEvent: { new(type: string, eventInitDict?: FocusEventInit): FocusEvent, prototype: FocusEvent }, FontFace: { new(family: string, source: string | BinaryData, descriptors?: FontFaceDescriptors): FontFace, prototype: FontFace }, FontFaceSet: { new(initialFaces: FontFace[]): FontFaceSet, prototype: FontFaceSet }, FontFaceSetLoadEvent: { new(type: string, eventInitDict?: FontFaceSetLoadEventInit): FontFaceSetLoadEvent, prototype: FontFaceSetLoadEvent }, FormData: { new(form?: HTMLFormElement, submitter?: HTMLElement): FormData, prototype: FormData }, FormDataEvent: { new(type: string, eventInitDict: FormDataEventInit): FormDataEvent, prototype: FormDataEvent }, GainNode: { new(context: BaseAudioContext, options?: GainOptions): GainNode, prototype: GainNode }, Gamepad: { new(): Gamepad, prototype: Gamepad }, GamepadButton: { new(): GamepadButton, prototype: GamepadButton }, GamepadEvent: { new(type: string, eventInitDict: GamepadEventInit): GamepadEvent, prototype: GamepadEvent }, GamepadHapticActuator: { new(): GamepadHapticActuator, prototype: GamepadHapticActuator }, Geolocation: { new(): Geolocation, prototype: Geolocation }, GeolocationCoordinates: { new(): GeolocationCoordinates, prototype: GeolocationCoordinates }, GeolocationPosition: { new(): GeolocationPosition, prototype: GeolocationPosition }, GeolocationPositionError: { new(): GeolocationPositionError, prototype: GeolocationPositionError, readonly PERMISSION_DENIED: 1, readonly POSITION_UNAVAILABLE: 2, readonly TIMEOUT: 3 }, FragmentDirective: { new(): FragmentDirective, prototype: FragmentDirective }, HTMLAllCollection: { new(): HTMLAllCollection, prototype: HTMLAllCollection }, HTMLAnchorElement: { new(): HTMLAnchorElement, prototype: HTMLAnchorElement }, HTMLAreaElement: { new(): HTMLAreaElement, prototype: HTMLAreaElement }, HTMLAudioElement: { new(): HTMLAudioElement, prototype: HTMLAudioElement }, HTMLBRElement: { new(): HTMLBRElement, prototype: HTMLBRElement }, HTMLBaseElement: { new(): HTMLBaseElement, prototype: HTMLBaseElement }, HTMLBodyElement: { new(): HTMLBodyElement, prototype: HTMLBodyElement }, WindowClient: { new(): WindowClient, prototype: WindowClient }, HTMLButtonElement: { new(): HTMLButtonElement, prototype: HTMLButtonElement }, HTMLCanvasElement: { new(): HTMLCanvasElement, prototype: HTMLCanvasElement }, HTMLCollection: { new(): HTMLCollection, prototype: HTMLCollection }, HTMLDListElement: { new(): HTMLDListElement, prototype: HTMLDListElement }, WorkerGlobalScope: { new(): WorkerGlobalScope, prototype: WorkerGlobalScope }, HTMLDataElement: { new(): HTMLDataElement, prototype: HTMLDataElement }, HTMLDataListElement: { new(): HTMLDataListElement, prototype: HTMLDataListElement }, WorkerLocation: { new(): WorkerLocation, prototype: WorkerLocation }, WorkerNavigator: { new(): WorkerNavigator, prototype: WorkerNavigator }, HTMLDetailsElement: { new(): HTMLDetailsElement, prototype: HTMLDetailsElement }, HTMLDialogElement: { new(): HTMLDialogElement, prototype: HTMLDialogElement }, HTMLDirectoryElement: { new(): HTMLDirectoryElement, prototype: HTMLDirectoryElement }, HTMLDivElement: { new(): HTMLDivElement, prototype: HTMLDivElement }, HTMLDocument: { new(): HTMLDocument, prototype: HTMLDocument }, HTMLElement: { new(): HTMLElement, prototype: HTMLElement }, HTMLEmbedElement: { new(): HTMLEmbedElement, prototype: HTMLEmbedElement }, HTMLFieldSetElement: { new(): HTMLFieldSetElement, prototype: HTMLFieldSetElement }, HTMLFontElement: { new(): HTMLFontElement, prototype: HTMLFontElement }, HTMLFormControlsCollection: { new(): HTMLFormControlsCollection, prototype: HTMLFormControlsCollection }, HTMLFormElement: { new(): HTMLFormElement, prototype: HTMLFormElement }, HTMLFrameElement: { new(): HTMLFrameElement, prototype: HTMLFrameElement }, HTMLFrameSetElement: { new(): HTMLFrameSetElement, prototype: HTMLFrameSetElement }, HTMLHRElement: { new(): HTMLHRElement, prototype: HTMLHRElement }, onrtctransform: (ev: RTCTransformEvent) => any, HTMLHeadElement: { new(): HTMLHeadElement, prototype: HTMLHeadElement }, HTMLHeadingElement: { new(): HTMLHeadingElement, prototype: HTMLHeadingElement }, HTMLHtmlElement: { new(): HTMLHtmlElement, prototype: HTMLHtmlElement }, fonts: FontFaceSet, HTMLIFrameElement: { new(): HTMLIFrameElement, prototype: HTMLIFrameElement }, HTMLImageElement: { new(): HTMLImageElement, prototype: HTMLImageElement }, HTMLInputElement: { new(): HTMLInputElement, prototype: HTMLInputElement }, HTMLLIElement: { new(): HTMLLIElement, prototype: HTMLLIElement }, HTMLLabelElement: { new(): HTMLLabelElement, prototype: HTMLLabelElement }, HTMLLegendElement: { new(): HTMLLegendElement, prototype: HTMLLegendElement }, HTMLLinkElement: { new(): HTMLLinkElement, prototype: HTMLLinkElement }, HTMLMapElement: { new(): HTMLMapElement, prototype: HTMLMapElement }, HTMLMarqueeElement: { new(): HTMLMarqueeElement, prototype: HTMLMarqueeElement }, HTMLMediaElement: { new(): HTMLMediaElement, prototype: HTMLMediaElement, readonly NETWORK_EMPTY: 0, readonly NETWORK_IDLE: 1, readonly NETWORK_LOADING: 2, readonly NETWORK_NO_SOURCE: 3, readonly HAVE_NOTHING: 0, readonly HAVE_METADATA: 1, readonly HAVE_CURRENT_DATA: 2, readonly HAVE_FUTURE_DATA: 3, readonly HAVE_ENOUGH_DATA: 4 }, HTMLMenuElement: { new(): HTMLMenuElement, prototype: HTMLMenuElement }, HTMLMetaElement: { new(): HTMLMetaElement, prototype: HTMLMetaElement }, HTMLMeterElement: { new(): HTMLMeterElement, prototype: HTMLMeterElement }, HTMLModElement: { new(): HTMLModElement, prototype: HTMLModElement }, HTMLOListElement: { new(): HTMLOListElement, prototype: HTMLOListElement }, HTMLObjectElement: { new(): HTMLObjectElement, prototype: HTMLObjectElement }, HTMLOptGroupElement: { new(): HTMLOptGroupElement, prototype: HTMLOptGroupElement }, HTMLOptionElement: { new(): HTMLOptionElement, prototype: HTMLOptionElement }, HTMLOptionsCollection: { new(): HTMLOptionsCollection, prototype: HTMLOptionsCollection }, HTMLOutputElement: { new(): HTMLOutputElement, prototype: HTMLOutputElement }, HTMLParagraphElement: { new(): HTMLParagraphElement, prototype: HTMLParagraphElement }, HTMLParamElement: { new(): HTMLParamElement, prototype: HTMLParamElement }, HTMLPictureElement: { new(): HTMLPictureElement, prototype: HTMLPictureElement }, HTMLPreElement: { new(): HTMLPreElement, prototype: HTMLPreElement }, HTMLProgressElement: { new(): HTMLProgressElement, prototype: HTMLProgressElement }, HTMLQuoteElement: { new(): HTMLQuoteElement, prototype: HTMLQuoteElement }, HTMLScriptElement: { new(): HTMLScriptElement, prototype: HTMLScriptElement, supports: (type: string) => boolean }, HTMLSelectElement: { new(): HTMLSelectElement, prototype: HTMLSelectElement }, HTMLSlotElement: { new(): HTMLSlotElement, prototype: HTMLSlotElement }, HTMLSourceElement: { new(): HTMLSourceElement, prototype: HTMLSourceElement }, HTMLSpanElement: { new(): HTMLSpanElement, prototype: HTMLSpanElement }, HTMLStyleElement: { new(): HTMLStyleElement, prototype: HTMLStyleElement }, HTMLTableCaptionElement: { new(): HTMLTableCaptionElement, prototype: HTMLTableCaptionElement }, HTMLTableCellElement: { new(): HTMLTableCellElement, prototype: HTMLTableCellElement }, HTMLTableColElement: { new(): HTMLTableColElement, prototype: HTMLTableColElement }, HTMLTableElement: { new(): HTMLTableElement, prototype: HTMLTableElement }, HTMLTableRowElement: { new(): HTMLTableRowElement, prototype: HTMLTableRowElement }, HTMLTableSectionElement: { new(): HTMLTableSectionElement, prototype: HTMLTableSectionElement }, HTMLTemplateElement: { new(): HTMLTemplateElement, prototype: HTMLTemplateElement }, HTMLTextAreaElement: { new(): HTMLTextAreaElement, prototype: HTMLTextAreaElement }, HTMLTimeElement: { new(): HTMLTimeElement, prototype: HTMLTimeElement }, HTMLTitleElement: { new(): HTMLTitleElement, prototype: HTMLTitleElement }, HTMLTrackElement: { new(): HTMLTrackElement, prototype: HTMLTrackElement, readonly NONE: 0, readonly LOADING: 1, readonly LOADED: 2, readonly ERROR: 3 }, HTMLUListElement: { new(): HTMLUListElement, prototype: HTMLUListElement }, HTMLUnknownElement: { new(): HTMLUnknownElement, prototype: HTMLUnknownElement }, HTMLVideoElement: { new(): HTMLVideoElement, prototype: HTMLVideoElement }, HashChangeEvent: { new(type: string, eventInitDict?: HashChangeEventInit): HashChangeEvent, prototype: HashChangeEvent }, Headers: { new(init?: HeadersInit): Headers, prototype: Headers }, Highlight: { new(...initialRanges: AbstractRange[]): Highlight, prototype: Highlight }, HighlightRegistry: { new(): HighlightRegistry, prototype: HighlightRegistry }, History: { new(): History, prototype: History }, IDBCursor: { new(): IDBCursor, prototype: IDBCursor }, IDBCursorWithValue: { new(): IDBCursorWithValue, prototype: IDBCursorWithValue }, IDBDatabase: { new(): IDBDatabase, prototype: IDBDatabase }, IDBFactory: { new(): IDBFactory, prototype: IDBFactory }, IDBIndex: { new(): IDBIndex, prototype: IDBIndex }, IDBKeyRange: { new(): IDBKeyRange, prototype: IDBKeyRange, bound: (lower: any, upper: any, lowerOpen?: boolean, upperOpen?: boolean) => IDBKeyRange, lowerBound: (lower: any, open?: boolean) => IDBKeyRange, only: (value: any) => IDBKeyRange, upperBound: (upper: any, open?: boolean) => IDBKeyRange }, IDBObjectStore: { new(): IDBObjectStore, prototype: IDBObjectStore }, IDBOpenDBRequest: { new(): IDBOpenDBRequest, prototype: IDBOpenDBRequest }, IDBRequest: { new(): IDBRequest<any>, prototype: IDBRequest<any> }, IDBTransaction: { new(): IDBTransaction, prototype: IDBTransaction }, IDBVersionChangeEvent: { new(type: string, eventInitDict?: IDBVersionChangeEventInit): IDBVersionChangeEvent, prototype: IDBVersionChangeEvent }, IIRFilterNode: { new(context: BaseAudioContext, options: IIRFilterOptions): IIRFilterNode, prototype: IIRFilterNode }, IdleDeadline: { new(): IdleDeadline, prototype: IdleDeadline }, ImageBitmap: { new(): ImageBitmap, prototype: ImageBitmap }, ImageBitmapRenderingContext: { new(): ImageBitmapRenderingContext, prototype: ImageBitmapRenderingContext }, ImageData: { new(sw: number, sh: number, settings?: ImageDataSettings): ImageData, new(data: Uint8ClampedArray<ArrayBufferLike>, sw: number, sh?: number, settings?: ImageDataSettings): ImageData, prototype: ImageData }, InputDeviceInfo: { new(): InputDeviceInfo, prototype: InputDeviceInfo }, InputEvent: { new(type: string, eventInitDict?: InputEventInit): InputEvent, prototype: InputEvent }, IntersectionObserver: { new(callback: IntersectionObserverCallback, options?: IntersectionObserverInit): IntersectionObserver, prototype: IntersectionObserver }, IntersectionObserverEntry: { new(intersectionObserverEntryInit: IntersectionObserverEntryInit): IntersectionObserverEntry, prototype: IntersectionObserverEntry }, KeyboardEvent: { new(type: string, eventInitDict?: KeyboardEventInit): KeyboardEvent, prototype: KeyboardEvent, readonly DOM_KEY_LOCATION_STANDARD: 0, readonly DOM_KEY_LOCATION_LEFT: 1, readonly DOM_KEY_LOCATION_RIGHT: 2, readonly DOM_KEY_LOCATION_NUMPAD: 3 }, KeyframeEffect: { new(target: Element, keyframes: Keyframe[] | PropertyIndexedKeyframes, options?: number | KeyframeEffectOptions): KeyframeEffect, new(source: KeyframeEffect): KeyframeEffect, prototype: KeyframeEffect }, LargestContentfulPaint: { new(): LargestContentfulPaint, prototype: LargestContentfulPaint }, Location: { new(): Location, prototype: Location }, Lock: { new(): Lock, prototype: Lock }, LockManager: { new(): LockManager, prototype: LockManager }, MIDIAccess: { new(): MIDIAccess, prototype: MIDIAccess }, MIDIConnectionEvent: { new(type: string, eventInitDict?: MIDIConnectionEventInit): MIDIConnectionEvent, prototype: MIDIConnectionEvent }, MIDIInput: { new(): MIDIInput, prototype: MIDIInput }, MIDIInputMap: { new(): MIDIInputMap, prototype: MIDIInputMap }, MIDIMessageEvent: { new(type: string, eventInitDict?: MIDIMessageEventInit): MIDIMessageEvent, prototype: MIDIMessageEvent }, MIDIOutput: { new(): MIDIOutput, prototype: MIDIOutput }, MIDIOutputMap: { new(): MIDIOutputMap, prototype: MIDIOutputMap }, MIDIPort: { new(): MIDIPort, prototype: MIDIPort }, MathMLElement: { new(): MathMLElement, prototype: MathMLElement }, MediaCapabilities: { new(): MediaCapabilities, prototype: MediaCapabilities }, MediaDeviceInfo: { new(): MediaDeviceInfo, prototype: MediaDeviceInfo }, MediaDevices: { new(): MediaDevices, prototype: MediaDevices }, MediaElementAudioSourceNode: { new(context: AudioContext, options: MediaElementAudioSourceOptions): MediaElementAudioSourceNode, prototype: MediaElementAudioSourceNode }, MediaEncryptedEvent: { new(type: string, eventInitDict?: MediaEncryptedEventInit): MediaEncryptedEvent, prototype: MediaEncryptedEvent }, MediaError: { new(): MediaError, prototype: MediaError, readonly MEDIA_ERR_ABORTED: 1, readonly MEDIA_ERR_NETWORK: 2, readonly MEDIA_ERR_DECODE: 3, readonly MEDIA_ERR_SRC_NOT_SUPPORTED: 4 }, MediaKeyMessageEvent: { new(type: string, eventInitDict: MediaKeyMessageEventInit): MediaKeyMessageEvent, prototype: MediaKeyMessageEvent }, MediaKeySession: { new(): MediaKeySession, prototype: MediaKeySession }, MediaKeyStatusMap: { new(): MediaKeyStatusMap, prototype: MediaKeyStatusMap }, MediaKeySystemAccess: { new(): MediaKeySystemAccess, prototype: MediaKeySystemAccess }, MediaKeys: { new(): MediaKeys, prototype: MediaKeys }, MediaList: { new(): MediaList, prototype: MediaList }, MediaMetadata: { new(init?: MediaMetadataInit): MediaMetadata, prototype: MediaMetadata }, MediaQueryList: { new(): MediaQueryList, prototype: MediaQueryList }, MediaQueryListEvent: { new(type: string, eventInitDict?: MediaQueryListEventInit): MediaQueryListEvent, prototype: MediaQueryListEvent }, MediaRecorder: { new(stream: MediaStream, options?: MediaRecorderOptions): MediaRecorder, prototype: MediaRecorder, isTypeSupported: (type: string) => boolean }, MediaSession: { new(): MediaSession, prototype: MediaSession }, MediaSource: { new(): MediaSource, prototype: MediaSource, readonly canConstructInDedicatedWorker: boolean, isTypeSupported: (type: string) => boolean }, MediaSourceHandle: { new(): MediaSourceHandle, prototype: MediaSourceHandle }, MediaStream: { new(): MediaStream, new(stream: MediaStream): MediaStream, new(tracks: MediaStreamTrack[]): MediaStream, prototype: MediaStream }, MediaStreamAudioDestinationNode: { new(context: AudioContext, options?: AudioNodeOptions): MediaStreamAudioDestinationNode, prototype: MediaStreamAudioDestinationNode }, MediaStreamAudioSourceNode: { new(context: AudioContext, options: MediaStreamAudioSourceOptions): MediaStreamAudioSourceNode, prototype: MediaStreamAudioSourceNode }, MediaStreamTrack: { new(): MediaStreamTrack, prototype: MediaStreamTrack }, MediaStreamTrackEvent: { new(type: string, eventInitDict: MediaStreamTrackEventInit): MediaStreamTrackEvent, prototype: MediaStreamTrackEvent }, MessageChannel: { new(): MessageChannel, prototype: MessageChannel }, MessageEvent: { new<T>(type: string, eventInitDict?: MessageEventInit<T>): MessageEvent<T>, prototype: MessageEvent<any> }, MessagePort: { new(): MessagePort, prototype: MessagePort }, MimeType: { new(): MimeType, prototype: MimeType }, MimeTypeArray: { new(): MimeTypeArray, prototype: MimeTypeArray }, MouseEvent: { new(type: string, eventInitDict?: MouseEventInit): MouseEvent, prototype: MouseEvent }, MutationEvent: { new(): MutationEvent, prototype: MutationEvent, readonly MODIFICATION: 1, readonly ADDITION: 2, readonly REMOVAL: 3 }, MutationObserver: { new(callback: MutationCallback): MutationObserver, prototype: MutationObserver }, MutationRecord: { new(): MutationRecord, prototype: MutationRecord }, NamedNodeMap: { new(): NamedNodeMap, prototype: NamedNodeMap }, NavigationPreloadManager: { new(): NavigationPreloadManager, prototype: NavigationPreloadManager }, Navigator: { new(): Navigator, prototype: Navigator }, Node: { new(): Node, prototype: Node, readonly ELEMENT_NODE: 1, readonly ATTRIBUTE_NODE: 2, readonly TEXT_NODE: 3, readonly CDATA_SECTION_NODE: 4, readonly ENTITY_REFERENCE_NODE: 5, readonly ENTITY_NODE: 6, readonly PROCESSING_INSTRUCTION_NODE: 7, readonly COMMENT_NODE: 8, readonly DOCUMENT_NODE: 9, readonly DOCUMENT_TYPE_NODE: 10, readonly DOCUMENT_FRAGMENT_NODE: 11, readonly NOTATION_NODE: 12, readonly DOCUMENT_POSITION_DISCONNECTED: 1, readonly DOCUMENT_POSITION_PRECEDING: 2, readonly DOCUMENT_POSITION_FOLLOWING: 4, readonly DOCUMENT_POSITION_CONTAINS: 8, readonly DOCUMENT_POSITION_CONTAINED_BY: 16, readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: 32 }, NodeIterator: { new(): NodeIterator, prototype: NodeIterator }, NodeList: { new(): NodeList, prototype: NodeList }, Notification: { new(title: string, options?: NotificationOptions): Notification, prototype: Notification, readonly permission: NotificationPermission, requestPermission: (deprecatedCallback?: NotificationPermissionCallback) => Promise<NotificationPermission> }, OfflineAudioCompletionEvent: { new(type: string, eventInitDict: OfflineAudioCompletionEventInit): OfflineAudioCompletionEvent, prototype: OfflineAudioCompletionEvent }, OfflineAudioContext: { new(contextOptions: OfflineAudioContextOptions): OfflineAudioContext, new(numberOfChannels: number, length: number, sampleRate: number): OfflineAudioContext, prototype: OfflineAudioContext }, OffscreenCanvas: { new(width: number, height: number): OffscreenCanvas, prototype: OffscreenCanvas }, OffscreenCanvasRenderingContext2D: { new(): OffscreenCanvasRenderingContext2D, prototype: OffscreenCanvasRenderingContext2D }, OscillatorNode: { new(context: BaseAudioContext, options?: OscillatorOptions): OscillatorNode, prototype: OscillatorNode }, OverconstrainedError: { new(constraint: string, message?: string): OverconstrainedError, prototype: OverconstrainedError }, PageTransitionEvent: { new(type: string, eventInitDict?: PageTransitionEventInit): PageTransitionEvent, prototype: PageTransitionEvent }, PannerNode: { new(context: BaseAudioContext, options?: PannerOptions): PannerNode, prototype: PannerNode }, Path2D: { new(path?: string | Path2D): Path2D, prototype: Path2D }, PaymentMethodChangeEvent: { new(type: string, eventInitDict?: PaymentMethodChangeEventInit): PaymentMethodChangeEvent, prototype: PaymentMethodChangeEvent }, PaymentRequest: { new(methodData: PaymentMethodData[], details: PaymentDetailsInit): PaymentRequest, prototype: PaymentRequest }, PaymentRequestUpdateEvent: { new(type: string, eventInitDict?: PaymentRequestUpdateEventInit): PaymentRequestUpdateEvent, prototype: PaymentRequestUpdateEvent }, PaymentResponse: { new(): PaymentResponse, prototype: PaymentResponse }, Performance: { new(): Performance, prototype: Performance }, PerformanceEntry: { new(): PerformanceEntry, prototype: PerformanceEntry }, PerformanceEventTiming: { new(): PerformanceEventTiming, prototype: PerformanceEventTiming }, PerformanceMark: { new(markName: string, markOptions?: PerformanceMarkOptions): PerformanceMark, prototype: PerformanceMark }, PerformanceMeasure: { new(): PerformanceMeasure, prototype: PerformanceMeasure }, PerformanceNavigation: { new(): PerformanceNavigation, prototype: PerformanceNavigation, readonly TYPE_NAVIGATE: 0, readonly TYPE_RELOAD: 1, readonly TYPE_BACK_FORWARD: 2, readonly TYPE_RESERVED: 255 }, PerformanceNavigationTiming: { new(): PerformanceNavigationTiming, prototype: PerformanceNavigationTiming }, PerformanceObserver: { new(callback: PerformanceObserverCallback): PerformanceObserver, prototype: PerformanceObserver, readonly supportedEntryTypes: readonly string[] }, PerformanceObserverEntryList: { new(): PerformanceObserverEntryList, prototype: PerformanceObserverEntryList }, PerformancePaintTiming: { new(): PerformancePaintTiming, prototype: PerformancePaintTiming }, PerformanceResourceTiming: { new(): PerformanceResourceTiming, prototype: PerformanceResourceTiming }, PerformanceServerTiming: { new(): PerformanceServerTiming, prototype: PerformanceServerTiming }, PerformanceTiming: { new(): PerformanceTiming, prototype: PerformanceTiming }, PeriodicWave: { new(context: BaseAudioContext, options?: PeriodicWaveOptions): PeriodicWave, prototype: PeriodicWave }, PermissionStatus: { new(): PermissionStatus, prototype: PermissionStatus }, Permissions: { new(): Permissions, prototype: Permissions }, PictureInPictureEvent: { new(type: string, eventInitDict: PictureInPictureEventInit): PictureInPictureEvent, prototype: PictureInPictureEvent }, PictureInPictureWindow: { new(): PictureInPictureWindow, prototype: PictureInPictureWindow }, Plugin: { new(): Plugin, prototype: Plugin }, PluginArray: { new(): PluginArray, prototype: PluginArray }, PaymentAddress: { new(): PaymentAddress, prototype: PaymentAddress }, PointerEvent: { new(type: string, eventInitDict?: PointerEventInit): PointerEvent, prototype: PointerEvent }, PopStateEvent: { new(type: string, eventInitDict?: PopStateEventInit): PopStateEvent, prototype: PopStateEvent }, ProcessingInstruction: { new(): ProcessingInstruction, prototype: ProcessingInstruction }, ProgressEvent: { new(type: string, eventInitDict?: ProgressEventInit): ProgressEvent<EventTarget>, prototype: ProgressEvent<EventTarget> }, PromiseRejectionEvent: { new(type: string, eventInitDict: PromiseRejectionEventInit): PromiseRejectionEvent, prototype: PromiseRejectionEvent }, PublicKeyCredential: { new(): PublicKeyCredential, prototype: PublicKeyCredential, isConditionalMediationAvailable: () => Promise<boolean>, isUserVerifyingPlatformAuthenticatorAvailable: () => Promise<boolean> }, PushManager: { new(): PushManager, prototype: PushManager, readonly supportedContentEncodings: readonly string[] }, PushSubscription: { new(): PushSubscription, prototype: PushSubscription }, PushSubscriptionOptions: { new(): PushSubscriptionOptions, prototype: PushSubscriptionOptions }, RTCCertificate: { new(): RTCCertificate, prototype: RTCCertificate }, RTCDTMFSender: { new(): RTCDTMFSender, prototype: RTCDTMFSender }, RTCDTMFToneChangeEvent: { new(type: string, eventInitDict?: RTCDTMFToneChangeEventInit): RTCDTMFToneChangeEvent, prototype: RTCDTMFToneChangeEvent }, RTCDataChannel: { new(): RTCDataChannel, prototype: RTCDataChannel }, RTCDataChannelEvent: { new(type: string, eventInitDict: RTCDataChannelEventInit): RTCDataChannelEvent, prototype: RTCDataChannelEvent }, RTCDtlsTransport: { new(): RTCDtlsTransport, prototype: RTCDtlsTransport }, RTCEncodedAudioFrame: { new(): RTCEncodedAudioFrame, prototype: RTCEncodedAudioFrame }, RTCEncodedVideoFrame: { new(): RTCEncodedVideoFrame, prototype: RTCEncodedVideoFrame }, RTCError: { new(init: RTCErrorInit, message?: string): RTCError, prototype: RTCError }, RTCErrorEvent: { new(type: string, eventInitDict: RTCErrorEventInit): RTCErrorEvent, prototype: RTCErrorEvent }, RTCIceCandidate: { new(candidateInitDict?: RTCIceCandidateInit): RTCIceCandidate, prototype: RTCIceCandidate }, RTCIceTransport: { new(): RTCIceTransport, prototype: RTCIceTransport }, RTCPeerConnection: { new(configuration?: RTCConfiguration): RTCPeerConnection, prototype: RTCPeerConnection, generateCertificate: (keygenAlgorithm: AlgorithmIdentifier) => Promise<RTCCertificate> }, RTCPeerConnectionIceErrorEvent: { new(type: string, eventInitDict: RTCPeerConnectionIceErrorEventInit): RTCPeerConnectionIceErrorEvent, prototype: RTCPeerConnectionIceErrorEvent }, RTCPeerConnectionIceEvent: { new(type: string, eventInitDict?: RTCPeerConnectionIceEventInit): RTCPeerConnectionIceEvent, prototype: RTCPeerConnectionIceEvent }, RTCRtpReceiver: { new(): RTCRtpReceiver, prototype: RTCRtpReceiver, getCapabilities: (kind: string) => RTCRtpCapabilities }, RTCRtpScriptTransform: { new(worker: Worker, options?: any, transfer?: any[]): RTCRtpScriptTransform, prototype: RTCRtpScriptTransform }, RTCRtpSender: { new(): RTCRtpSender, prototype: RTCRtpSender, getCapabilities: (kind: string) => RTCRtpCapabilities }, RTCRtpTransceiver: { new(): RTCRtpTransceiver, prototype: RTCRtpTransceiver }, RTCSctpTransport: { new(): RTCSctpTransport, prototype: RTCSctpTransport }, RTCSessionDescription: { new(descriptionInitDict: RTCSessionDescriptionInit): RTCSessionDescription, prototype: RTCSessionDescription }, RTCStatsReport: { new(): RTCStatsReport, prototype: RTCStatsReport }, RTCTrackEvent: { new(type: string, eventInitDict: RTCTrackEventInit): RTCTrackEvent, prototype: RTCTrackEvent }, RadioNodeList: { new(): RadioNodeList, prototype: RadioNodeList }, Range: { new(): Range, prototype: Range, readonly START_TO_START: 0, readonly START_TO_END: 1, readonly END_TO_END: 2, readonly END_TO_START: 3 }, ReadableByteStreamController: { new(): ReadableByteStreamController, prototype: ReadableByteStreamController }, ReadableStream: { new(underlyingSource: UnderlyingByteSource, strategy?: { highWaterMark?: number }): ReadableStream<Uint8Array<ArrayBufferLike>>, new<R>(underlyingSource: UnderlyingDefaultSource<R>, strategy?: QueuingStrategy<R>): ReadableStream<R>, new<R>(underlyingSource?: UnderlyingSource<R>, strategy?: QueuingStrategy<R>): ReadableStream<R>, prototype: ReadableStream<any> }, ReadableStreamBYOBReader: { new(stream: ReadableStream<any>): ReadableStreamBYOBReader, prototype: ReadableStreamBYOBReader }, ReadableStreamBYOBRequest: { new(): ReadableStreamBYOBRequest, prototype: ReadableStreamBYOBRequest }, ReadableStreamDefaultController: { new(): ReadableStreamDefaultController<any>, prototype: ReadableStreamDefaultController<any> }, ReadableStreamDefaultReader: { new<R>(stream: ReadableStream<R>): ReadableStreamDefaultReader<R>, prototype: ReadableStreamDefaultReader<any> }, RemotePlayback: { new(): RemotePlayback, prototype: RemotePlayback }, Report: { new(): Report, prototype: Report }, ReportBody: { new(): ReportBody, prototype: ReportBody }, ReportingObserver: { new(callback: ReportingObserverCallback, options?: ReportingObserverOptions): ReportingObserver, prototype: ReportingObserver }, Request: { new(input: URL | RequestInfo, init?: RequestInit): Request, prototype: Request }, ResizeObserver: { new(callback: ResizeObserverCallback): ResizeObserver, prototype: ResizeObserver }, ResizeObserverEntry: { new(): ResizeObserverEntry, prototype: ResizeObserverEntry }, ResizeObserverSize: { new(): ResizeObserverSize, prototype: ResizeObserverSize }, Response: { new(body?: BodyInit, init?: ResponseInit): Response, prototype: Response, error: () => Response, json: (data: any, init?: ResponseInit) => Response, redirect: (url: string | URL, status?: number) => Response }, SVGAElement: { new(): SVGAElement, prototype: SVGAElement }, SVGAngle: { new(): SVGAngle, prototype: SVGAngle, readonly SVG_ANGLETYPE_UNKNOWN: 0, readonly SVG_ANGLETYPE_UNSPECIFIED: 1, readonly SVG_ANGLETYPE_DEG: 2, readonly SVG_ANGLETYPE_RAD: 3, readonly SVG_ANGLETYPE_GRAD: 4 }, SVGAnimateElement: { new(): SVGAnimateElement, prototype: SVGAnimateElement }, SVGAnimateMotionElement: { new(): SVGAnimateMotionElement, prototype: SVGAnimateMotionElement }, SVGAnimateTransformElement: { new(): SVGAnimateTransformElement, prototype: SVGAnimateTransformElement }, SVGAnimatedAngle: { new(): SVGAnimatedAngle, prototype: SVGAnimatedAngle }, SVGAnimatedBoolean: { new(): SVGAnimatedBoolean, prototype: SVGAnimatedBoolean }, SVGAnimatedEnumeration: { new(): SVGAnimatedEnumeration, prototype: SVGAnimatedEnumeration }, SVGAnimatedInteger: { new(): SVGAnimatedInteger, prototype: SVGAnimatedInteger }, SVGAnimatedLength: { new(): SVGAnimatedLength, prototype: SVGAnimatedLength }, SVGAnimatedLengthList: { new(): SVGAnimatedLengthList, prototype: SVGAnimatedLengthList }, SVGAnimatedNumber: { new(): SVGAnimatedNumber, prototype: SVGAnimatedNumber }, SVGAnimatedNumberList: { new(): SVGAnimatedNumberList, prototype: SVGAnimatedNumberList }, SVGAnimatedPreserveAspectRatio: { new(): SVGAnimatedPreserveAspectRatio, prototype: SVGAnimatedPreserveAspectRatio }, SVGAnimatedRect: { new(): SVGAnimatedRect, prototype: SVGAnimatedRect }, SVGAnimatedString: { new(): SVGAnimatedString, prototype: SVGAnimatedString }, SVGAnimatedTransformList: { new(): SVGAnimatedTransformList, prototype: SVGAnimatedTransformList }, SVGAnimationElement: { new(): SVGAnimationElement, prototype: SVGAnimationElement }, SVGCircleElement: { new(): SVGCircleElement, prototype: SVGCircleElement }, SVGClipPathElement: { new(): SVGClipPathElement, prototype: SVGClipPathElement }, SVGComponentTransferFunctionElement: { new(): SVGComponentTransferFunctionElement, prototype: SVGComponentTransferFunctionElement, readonly SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN: 0, readonly SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY: 1, readonly SVG_FECOMPONENTTRANSFER_TYPE_TABLE: 2, readonly SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE: 3, readonly SVG_FECOMPONENTTRANSFER_TYPE_LINEAR: 4, readonly SVG_FECOMPONENTTRANSFER_TYPE_GAMMA: 5 }, SVGDefsElement: { new(): SVGDefsElement, prototype: SVGDefsElement }, SVGDescElement: { new(): SVGDescElement, prototype: SVGDescElement }, SVGElement: { new(): SVGElement, prototype: SVGElement }, SVGEllipseElement: { new(): SVGEllipseElement, prototype: SVGEllipseElement }, SVGFEBlendElement: { new(): SVGFEBlendElement, prototype: SVGFEBlendElement, readonly SVG_FEBLEND_MODE_UNKNOWN: 0, readonly SVG_FEBLEND_MODE_NORMAL: 1, readonly SVG_FEBLEND_MODE_MULTIPLY: 2, readonly SVG_FEBLEND_MODE_SCREEN: 3, readonly SVG_FEBLEND_MODE_DARKEN: 4, readonly SVG_FEBLEND_MODE_LIGHTEN: 5, readonly SVG_FEBLEND_MODE_OVERLAY: 6, readonly SVG_FEBLEND_MODE_COLOR_DODGE: 7, readonly SVG_FEBLEND_MODE_COLOR_BURN: 8, readonly SVG_FEBLEND_MODE_HARD_LIGHT: 9, readonly SVG_FEBLEND_MODE_SOFT_LIGHT: 10, readonly SVG_FEBLEND_MODE_DIFFERENCE: 11, readonly SVG_FEBLEND_MODE_EXCLUSION: 12, readonly SVG_FEBLEND_MODE_HUE: 13, readonly SVG_FEBLEND_MODE_SATURATION: 14, readonly SVG_FEBLEND_MODE_COLOR: 15, readonly SVG_FEBLEND_MODE_LUMINOSITY: 16 }, SVGFEColorMatrixElement: { new(): SVGFEColorMatrixElement, prototype: SVGFEColorMatrixElement, readonly SVG_FECOLORMATRIX_TYPE_UNKNOWN: 0, readonly SVG_FECOLORMATRIX_TYPE_MATRIX: 1, readonly SVG_FECOLORMATRIX_TYPE_SATURATE: 2, readonly SVG_FECOLORMATRIX_TYPE_HUEROTATE: 3, readonly SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA: 4 }, SVGFEComponentTransferElement: { new(): SVGFEComponentTransferElement, prototype: SVGFEComponentTransferElement }, SVGFECompositeElement: { new(): SVGFECompositeElement, prototype: SVGFECompositeElement, readonly SVG_FECOMPOSITE_OPERATOR_UNKNOWN: 0, readonly SVG_FECOMPOSITE_OPERATOR_OVER: 1, readonly SVG_FECOMPOSITE_OPERATOR_IN: 2, readonly SVG_FECOMPOSITE_OPERATOR_OUT: 3, readonly SVG_FECOMPOSITE_OPERATOR_ATOP: 4, readonly SVG_FECOMPOSITE_OPERATOR_XOR: 5, readonly SVG_FECOMPOSITE_OPERATOR_ARITHMETIC: 6 }, SVGFEConvolveMatrixElement: { new(): SVGFEConvolveMatrixElement, prototype: SVGFEConvolveMatrixElement, readonly SVG_EDGEMODE_UNKNOWN: 0, readonly SVG_EDGEMODE_DUPLICATE: 1, readonly SVG_EDGEMODE_WRAP: 2, readonly SVG_EDGEMODE_NONE: 3 }, SVGFEDiffuseLightingElement: { new(): SVGFEDiffuseLightingElement, prototype: SVGFEDiffuseLightingElement }, SVGFEDisplacementMapElement: { new(): SVGFEDisplacementMapElement, prototype: SVGFEDisplacementMapElement, readonly SVG_CHANNEL_UNKNOWN: 0, readonly SVG_CHANNEL_R: 1, readonly SVG_CHANNEL_G: 2, readonly SVG_CHANNEL_B: 3, readonly SVG_CHANNEL_A: 4 }, SVGFEDistantLightElement: { new(): SVGFEDistantLightElement, prototype: SVGFEDistantLightElement }, SVGFEDropShadowElement: { new(): SVGFEDropShadowElement, prototype: SVGFEDropShadowElement }, SVGFEFloodElement: { new(): SVGFEFloodElement, prototype: SVGFEFloodElement }, SVGFEFuncAElement: { new(): SVGFEFuncAElement, prototype: SVGFEFuncAElement }, SVGFEFuncBElement: { new(): SVGFEFuncBElement, prototype: SVGFEFuncBElement }, SVGFEFuncGElement: { new(): SVGFEFuncGElement, prototype: SVGFEFuncGElement }, SVGFEFuncRElement: { new(): SVGFEFuncRElement, prototype: SVGFEFuncRElement }, SVGFEGaussianBlurElement: { new(): SVGFEGaussianBlurElement, prototype: SVGFEGaussianBlurElement }, SVGFEImageElement: { new(): SVGFEImageElement, prototype: SVGFEImageElement }, SVGFEMergeElement: { new(): SVGFEMergeElement, prototype: SVGFEMergeElement }, SVGFEMergeNodeElement: { new(): SVGFEMergeNodeElement, prototype: SVGFEMergeNodeElement }, SVGFEMorphologyElement: { new(): SVGFEMorphologyElement, prototype: SVGFEMorphologyElement, readonly SVG_MORPHOLOGY_OPERATOR_UNKNOWN: 0, readonly SVG_MORPHOLOGY_OPERATOR_ERODE: 1, readonly SVG_MORPHOLOGY_OPERATOR_DILATE: 2 }, SVGFEOffsetElement: { new(): SVGFEOffsetElement, prototype: SVGFEOffsetElement }, SVGFEPointLightElement: { new(): SVGFEPointLightElement, prototype: SVGFEPointLightElement }, SVGFESpecularLightingElement: { new(): SVGFESpecularLightingElement, prototype: SVGFESpecularLightingElement }, SVGFESpotLightElement: { new(): SVGFESpotLightElement, prototype: SVGFESpotLightElement }, SVGFETileElement: { new(): SVGFETileElement, prototype: SVGFETileElement }, SVGFETurbulenceElement: { new(): SVGFETurbulenceElement, prototype: SVGFETurbulenceElement, readonly SVG_TURBULENCE_TYPE_UNKNOWN: 0, readonly SVG_TURBULENCE_TYPE_FRACTALNOISE: 1, readonly SVG_TURBULENCE_TYPE_TURBULENCE: 2, readonly SVG_STITCHTYPE_UNKNOWN: 0, readonly SVG_STITCHTYPE_STITCH: 1, readonly SVG_STITCHTYPE_NOSTITCH: 2 }, SVGFilterElement: { new(): SVGFilterElement, prototype: SVGFilterElement }, SVGForeignObjectElement: { new(): SVGForeignObjectElement, prototype: SVGForeignObjectElement }, SVGGElement: { new(): SVGGElement, prototype: SVGGElement }, SVGGeometryElement: { new(): SVGGeometryElement, prototype: SVGGeometryElement }, SVGGradientElement: { new(): SVGGradientElement, prototype: SVGGradientElement, readonly SVG_SPREADMETHOD_UNKNOWN: 0, readonly SVG_SPREADMETHOD_PAD: 1, readonly SVG_SPREADMETHOD_REFLECT: 2, readonly SVG_SPREADMETHOD_REPEAT: 3 }, SVGGraphicsElement: { new(): SVGGraphicsElement, prototype: SVGGraphicsElement }, SVGImageElement: { new(): SVGImageElement, prototype: SVGImageElement }, SVGLength: { new(): SVGLength, prototype: SVGLength, readonly SVG_LENGTHTYPE_UNKNOWN: 0, readonly SVG_LENGTHTYPE_NUMBER: 1, readonly SVG_LENGTHTYPE_PERCENTAGE: 2, readonly SVG_LENGTHTYPE_EMS: 3, readonly SVG_LENGTHTYPE_EXS: 4, readonly SVG_LENGTHTYPE_PX: 5, readonly SVG_LENGTHTYPE_CM: 6, readonly SVG_LENGTHTYPE_MM: 7, readonly SVG_LENGTHTYPE_IN: 8, readonly SVG_LENGTHTYPE_PT: 9, readonly SVG_LENGTHTYPE_PC: 10 }, SVGLengthList: { new(): SVGLengthList, prototype: SVGLengthList }, SVGLineElement: { new(): SVGLineElement, prototype: SVGLineElement }, SVGLinearGradientElement: { new(): SVGLinearGradientElement, prototype: SVGLinearGradientElement }, SVGMPathElement: { new(): SVGMPathElement, prototype: SVGMPathElement }, SVGMarkerElement: { new(): SVGMarkerElement, prototype: SVGMarkerElement, readonly SVG_MARKERUNITS_UNKNOWN: 0, readonly SVG_MARKERUNITS_USERSPACEONUSE: 1, readonly SVG_MARKERUNITS_STROKEWIDTH: 2, readonly SVG_MARKER_ORIENT_UNKNOWN: 0, readonly SVG_MARKER_ORIENT_AUTO: 1, readonly SVG_MARKER_ORIENT_ANGLE: 2 }, SVGMaskElement: { new(): SVGMaskElement, prototype: SVGMaskElement }, SVGMetadataElement: { new(): SVGMetadataElement, prototype: SVGMetadataElement }, SVGNumber: { new(): SVGNumber, prototype: SVGNumber }, SVGNumberList: { new(): SVGNumberList, prototype: SVGNumberList }, SVGPathElement: { new(): SVGPathElement, prototype: SVGPathElement }, SVGPatternElement: { new(): SVGPatternElement, prototype: SVGPatternElement }, SVGPointList: { new(): SVGPointList, prototype: SVGPointList }, SVGPolygonElement: { new(): SVGPolygonElement, prototype: SVGPolygonElement }, SVGPolylineElement: { new(): SVGPolylineElement, prototype: SVGPolylineElement }, SVGPreserveAspectRatio: { new(): SVGPreserveAspectRatio, prototype: SVGPreserveAspectRatio, readonly SVG_PRESERVEASPECTRATIO_UNKNOWN: 0, readonly SVG_PRESERVEASPECTRATIO_NONE: 1, readonly SVG_PRESERVEASPECTRATIO_XMINYMIN: 2, readonly SVG_PRESERVEASPECTRATIO_XMIDYMIN: 3, readonly SVG_PRESERVEASPECTRATIO_XMAXYMIN: 4, readonly SVG_PRESERVEASPECTRATIO_XMINYMID: 5, readonly SVG_PRESERVEASPECTRATIO_XMIDYMID: 6, readonly SVG_PRESERVEASPECTRATIO_XMAXYMID: 7, readonly SVG_PRESERVEASPECTRATIO_XMINYMAX: 8, readonly SVG_PRESERVEASPECTRATIO_XMIDYMAX: 9, readonly SVG_PRESERVEASPECTRATIO_XMAXYMAX: 10, readonly SVG_MEETORSLICE_UNKNOWN: 0, readonly SVG_MEETORSLICE_MEET: 1, readonly SVG_MEETORSLICE_SLICE: 2 }, SVGRadialGradientElement: { new(): SVGRadialGradientElement, prototype: SVGRadialGradientElement }, SVGRectElement: { new(): SVGRectElement, prototype: SVGRectElement }, SVGSVGElement: { new(): SVGSVGElement, prototype: SVGSVGElement }, SVGScriptElement: { new(): SVGScriptElement, prototype: SVGScriptElement }, SVGSetElement: { new(): SVGSetElement, prototype: SVGSetElement }, SVGStopElement: { new(): SVGStopElement, prototype: SVGStopElement }, SVGStringList: { new(): SVGStringList, prototype: SVGStringList }, SVGStyleElement: { new(): SVGStyleElement, prototype: SVGStyleElement }, SVGSwitchElement: { new(): SVGSwitchElement, prototype: SVGSwitchElement }, SVGSymbolElement: { new(): SVGSymbolElement, prototype: SVGSymbolElement }, SVGTSpanElement: { new(): SVGTSpanElement, prototype: SVGTSpanElement }, SVGTextContentElement: { new(): SVGTextContentElement, prototype: SVGTextContentElement, readonly LENGTHADJUST_UNKNOWN: 0, readonly LENGTHADJUST_SPACING: 1, readonly LENGTHADJUST_SPACINGANDGLYPHS: 2 }, SVGTextElement: { new(): SVGTextElement, prototype: SVGTextElement }, SVGTextPathElement: { new(): SVGTextPathElement, prototype: SVGTextPathElement, readonly TEXTPATH_METHODTYPE_UNKNOWN: 0, readonly TEXTPATH_METHODTYPE_ALIGN: 1, readonly TEXTPATH_METHODTYPE_STRETCH: 2, readonly TEXTPATH_SPACINGTYPE_UNKNOWN: 0, readonly TEXTPATH_SPACINGTYPE_AUTO: 1, readonly TEXTPATH_SPACINGTYPE_EXACT: 2 }, SVGTextPositioningElement: { new(): SVGTextPositioningElement, prototype: SVGTextPositioningElement }, SVGTitleElement: { new(): SVGTitleElement, prototype: SVGTitleElement }, SVGTransform: { new(): SVGTransform, prototype: SVGTransform, readonly SVG_TRANSFORM_UNKNOWN: 0, readonly SVG_TRANSFORM_MATRIX: 1, readonly SVG_TRANSFORM_TRANSLATE: 2, readonly SVG_TRANSFORM_SCALE: 3, readonly SVG_TRANSFORM_ROTATE: 4, readonly SVG_TRANSFORM_SKEWX: 5, readonly SVG_TRANSFORM_SKEWY: 6 }, SVGTransformList: { new(): SVGTransformList, prototype: SVGTransformList }, SVGUnitTypes: { new(): SVGUnitTypes, prototype: SVGUnitTypes, readonly SVG_UNIT_TYPE_UNKNOWN: 0, readonly SVG_UNIT_TYPE_USERSPACEONUSE: 1, readonly SVG_UNIT_TYPE_OBJECTBOUNDINGBOX: 2 }, SVGUseElement: { new(): SVGUseElement, prototype: SVGUseElement }, SVGViewElement: { new(): SVGViewElement, prototype: SVGViewElement }, Screen: { new(): Screen, prototype: Screen }, ScreenOrientation: { new(): ScreenOrientation, prototype: ScreenOrientation }, ScriptProcessorNode: { new(): ScriptProcessorNode, prototype: ScriptProcessorNode }, SecurityPolicyViolationEvent: { new(type: string, eventInitDict?: SecurityPolicyViolationEventInit): SecurityPolicyViolationEvent, prototype: SecurityPolicyViolationEvent }, Selection: { new(): Selection, prototype: Selection }, ServiceWorker: { new(): ServiceWorker, prototype: ServiceWorker }, ServiceWorkerContainer: { new(): ServiceWorkerContainer, prototype: ServiceWorkerContainer }, ServiceWorkerRegistration: { new(): ServiceWorkerRegistration, prototype: ServiceWorkerRegistration }, ShadowRoot: { new(): ShadowRoot, prototype: ShadowRoot }, SharedWorker: { new(scriptURL: string | URL, options?: string | WorkerOptions): SharedWorker, prototype: SharedWorker }, SourceBuffer: { new(): SourceBuffer, prototype: SourceBuffer }, SourceBufferList: { new(): SourceBufferList, prototype: SourceBufferList }, SpeechRecognitionAlternative: { new(): SpeechRecognitionAlternative, prototype: SpeechRecognitionAlternative }, SpeechRecognitionResult: { new(): SpeechRecognitionResult, prototype: SpeechRecognitionResult }, SpeechRecognitionResultList: { new(): SpeechRecognitionResultList, prototype: SpeechRecognitionResultList }, SpeechSynthesis: { new(): SpeechSynthesis, prototype: SpeechSynthesis }, SpeechSynthesisErrorEvent: { new(type: string, eventInitDict: SpeechSynthesisErrorEventInit): SpeechSynthesisErrorEvent, prototype: SpeechSynthesisErrorEvent }, SpeechSynthesisEvent: { new(type: string, eventInitDict: SpeechSynthesisEventInit): SpeechSynthesisEvent, prototype: SpeechSynthesisEvent }, SpeechSynthesisUtterance: { new(text?: string): SpeechSynthesisUtterance, prototype: SpeechSynthesisUtterance }, SpeechSynthesisVoice: { new(): SpeechSynthesisVoice, prototype: SpeechSynthesisVoice }, StaticRange: { new(init: StaticRangeInit): StaticRange, prototype: StaticRange }, StereoPannerNode: { new(context: BaseAudioContext, options?: StereoPannerOptions): StereoPannerNode, prototype: StereoPannerNode }, Storage: { new(): Storage, prototype: Storage }, StorageEvent: { new(type: string, eventInitDict?: StorageEventInit): StorageEvent, prototype: StorageEvent }, StorageManager: { new(): StorageManager, prototype: StorageManager }, StylePropertyMap: { new(): StylePropertyMap, prototype: StylePropertyMap }, StylePropertyMapReadOnly: { new(): StylePropertyMapReadOnly, prototype: StylePropertyMapReadOnly }, StyleSheet: { new(): StyleSheet, prototype: StyleSheet }, StyleSheetList: { new(): StyleSheetList, prototype: StyleSheetList }, SubmitEvent: { new(type: string, eventInitDict?: SubmitEventInit): SubmitEvent, prototype: SubmitEvent }, SubtleCrypto: { new(): SubtleCrypto, prototype: SubtleCrypto }, Text: { new(data?: string): Text, prototype: Text }, TextDecoder: { new(label?: string, options?: TextDecoderOptions): TextDecoder, prototype: TextDecoder }, TextDecoderStream: { new(label?: string, options?: TextDecoderOptions): TextDecoderStream, prototype: TextDecoderStream }, TextEncoder: { new(): TextEncoder, prototype: TextEncoder }, TextEncoderStream: { new(): TextEncoderStream, prototype: TextEncoderStream }, TextEvent: { new(): TextEvent, prototype: TextEvent }, TextMetrics: { new(): TextMetrics, prototype: TextMetrics }, TextTrack: { new(): TextTrack, prototype: TextTrack }, TextTrackCue: { new(): TextTrackCue, prototype: TextTrackCue }, TextTrackCueList: { new(): TextTrackCueList, prototype: TextTrackCueList }, TextTrackList: { new(): TextTrackList, prototype: TextTrackList }, TimeRanges: { new(): TimeRanges, prototype: TimeRanges }, ToggleEvent: { new(type: string, eventInitDict?: ToggleEventInit): ToggleEvent, prototype: ToggleEvent }, Touch: { new(touchInitDict: TouchInit): Touch, prototype: Touch }, TouchEvent: { new(type: string, eventInitDict?: TouchEventInit): TouchEvent, prototype: TouchEvent }, TouchList: { new(): TouchList, prototype: TouchList }, TrackEvent: { new(type: string, eventInitDict?: TrackEventInit): TrackEvent, prototype: TrackEvent }, TransformStream: { new<I, O>(transformer?: Transformer<I, O>, writableStrategy?: QueuingStrategy<I>, readableStrategy?: QueuingStrategy<O>): TransformStream<I, O>, prototype: TransformStream<any, any> }, TransformStreamDefaultController: { new(): TransformStreamDefaultController<any>, prototype: TransformStreamDefaultController<any> }, TransitionEvent: { new(type: string, transitionEventInitDict?: TransitionEventInit): TransitionEvent, prototype: TransitionEvent }, TreeWalker: { new(): TreeWalker, prototype: TreeWalker }, UIEvent: { new(type: string, eventInitDict?: UIEventInit): UIEvent, prototype: UIEvent }, URL: { new(url: string | URL, base?: string | URL): URL, prototype: URL, canParse: (url: string | URL, base?: string | URL) => boolean, createObjectURL: (obj: Blob | MediaSource) => string, parse: (url: string | URL, base?: string | URL) => URL, revokeObjectURL: (url: string) => void }, webkitURL: { new(url: string | URL, base?: string | URL): URL, prototype: URL, canParse: (url: string | URL, base?: string | URL) => boolean, createObjectURL: (obj: Blob | MediaSource) => string, parse: (url: string | URL, base?: string | URL) => URL, revokeObjectURL: (url: string) => void }, URLSearchParams: { new(init?: string | Record<string, string> | URLSearchParams | string[][]): URLSearchParams, prototype: URLSearchParams }, UserActivation: { new(): UserActivation, prototype: UserActivation }, VTTCue: { new(startTime: number, endTime: number, text: string): VTTCue, prototype: VTTCue }, VTTRegion: { new(): VTTRegion, prototype: VTTRegion }, ValidityState: { new(): ValidityState, prototype: ValidityState }, VideoColorSpace: { new(init?: VideoColorSpaceInit): VideoColorSpace, prototype: VideoColorSpace }, VideoDecoder: { new(init: VideoDecoderInit): VideoDecoder, prototype: VideoDecoder, isConfigSupported: (config: VideoDecoderConfig) => Promise<VideoDecoderSupport> }, VideoEncoder: { new(init: VideoEncoderInit): VideoEncoder, prototype: VideoEncoder, isConfigSupported: (config: VideoEncoderConfig) => Promise<VideoEncoderSupport> }, VideoFrame: { new(image: CanvasImageSource, init?: VideoFrameInit): VideoFrame, new(data: AllowSharedBufferSource, init: VideoFrameBufferInit): VideoFrame, prototype: VideoFrame }, VideoPlaybackQuality: { new(): VideoPlaybackQuality, prototype: VideoPlaybackQuality }, ViewTransition: { new(): ViewTransition, prototype: ViewTransition }, VisualViewport: { new(): VisualViewport, prototype: VisualViewport }, WakeLock: { new(): WakeLock, prototype: WakeLock }, WakeLockSentinel: { new(): WakeLockSentinel, prototype: WakeLockSentinel }, WaveShaperNode: { new(context: BaseAudioContext, options?: WaveShaperOptions): WaveShaperNode, prototype: WaveShaperNode }, WebGL2RenderingContext: { new(): WebGL2RenderingContext, prototype: WebGL2RenderingContext, readonly READ_BUFFER: 3074, readonly UNPACK_ROW_LENGTH: 3314, readonly UNPACK_SKIP_ROWS: 3315, readonly UNPACK_SKIP_PIXELS: 3316, readonly PACK_ROW_LENGTH: 3330, readonly PACK_SKIP_ROWS: 3331, readonly PACK_SKIP_PIXELS: 3332, readonly COLOR: 6144, readonly DEPTH: 6145, readonly STENCIL: 6146, readonly RED: 6403, readonly RGB8: 32849, readonly RGB10_A2: 32857, readonly TEXTURE_BINDING_3D: 32874, readonly UNPACK_SKIP_IMAGES: 32877, readonly UNPACK_IMAGE_HEIGHT: 32878, readonly TEXTURE_3D: 32879, readonly TEXTURE_WRAP_R: 32882, readonly MAX_3D_TEXTURE_SIZE: 32883, readonly UNSIGNED_INT_2_10_10_10_REV: 33640, readonly MAX_ELEMENTS_VERTICES: 33000, readonly MAX_ELEMENTS_INDICES: 33001, readonly TEXTURE_MIN_LOD: 33082, readonly TEXTURE_MAX_LOD: 33083, readonly TEXTURE_BASE_LEVEL: 33084, readonly TEXTURE_MAX_LEVEL: 33085, readonly MIN: 32775, readonly MAX: 32776, readonly DEPTH_COMPONENT24: 33190, readonly MAX_TEXTURE_LOD_BIAS: 34045, readonly TEXTURE_COMPARE_MODE: 34892, readonly TEXTURE_COMPARE_FUNC: 34893, readonly CURRENT_QUERY: 34917, readonly QUERY_RESULT: 34918, readonly QUERY_RESULT_AVAILABLE: 34919, readonly STREAM_READ: 35041, readonly STREAM_COPY: 35042, readonly STATIC_READ: 35045, readonly STATIC_COPY: 35046, readonly DYNAMIC_READ: 35049, readonly DYNAMIC_COPY: 35050, readonly MAX_DRAW_BUFFERS: 34852, readonly DRAW_BUFFER0: 34853, readonly DRAW_BUFFER1: 34854, readonly DRAW_BUFFER2: 34855, readonly DRAW_BUFFER3: 34856, readonly DRAW_BUFFER4: 34857, readonly DRAW_BUFFER5: 34858, readonly DRAW_BUFFER6: 34859, readonly DRAW_BUFFER7: 34860, readonly DRAW_BUFFER8: 34861, readonly DRAW_BUFFER9: 34862, readonly DRAW_BUFFER10: 34863, readonly DRAW_BUFFER11: 34864, readonly DRAW_BUFFER12: 34865, readonly DRAW_BUFFER13: 34866, readonly DRAW_BUFFER14: 34867, readonly DRAW_BUFFER15: 34868, readonly MAX_FRAGMENT_UNIFORM_COMPONENTS: 35657, readonly MAX_VERTEX_UNIFORM_COMPONENTS: 35658, readonly SAMPLER_3D: 35679, readonly SAMPLER_2D_SHADOW: 35682, readonly FRAGMENT_SHADER_DERIVATIVE_HINT: 35723, readonly PIXEL_PACK_BUFFER: 35051, readonly PIXEL_UNPACK_BUFFER: 35052, readonly PIXEL_PACK_BUFFER_BINDING: 35053, readonly PIXEL_UNPACK_BUFFER_BINDING: 35055, readonly FLOAT_MAT2x3: 35685, readonly FLOAT_MAT2x4: 35686, readonly FLOAT_MAT3x2: 35687, readonly FLOAT_MAT3x4: 35688, readonly FLOAT_MAT4x2: 35689, readonly FLOAT_MAT4x3: 35690, readonly SRGB: 35904, readonly SRGB8: 35905, readonly SRGB8_ALPHA8: 35907, readonly COMPARE_REF_TO_TEXTURE: 34894, readonly RGBA32F: 34836, readonly RGB32F: 34837, readonly RGBA16F: 34842, readonly RGB16F: 34843, readonly VERTEX_ATTRIB_ARRAY_INTEGER: 35069, readonly MAX_ARRAY_TEXTURE_LAYERS: 35071, readonly MIN_PROGRAM_TEXEL_OFFSET: 35076, readonly MAX_PROGRAM_TEXEL_OFFSET: 35077, readonly MAX_VARYING_COMPONENTS: 35659, readonly TEXTURE_2D_ARRAY: 35866, readonly TEXTURE_BINDING_2D_ARRAY: 35869, readonly R11F_G11F_B10F: 35898, readonly UNSIGNED_INT_10F_11F_11F_REV: 35899, readonly RGB9_E5: 35901, readonly UNSIGNED_INT_5_9_9_9_REV: 35902, readonly TRANSFORM_FEEDBACK_BUFFER_MODE: 35967, readonly MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS: 35968, readonly TRANSFORM_FEEDBACK_VARYINGS: 35971, readonly TRANSFORM_FEEDBACK_BUFFER_START: 35972, readonly TRANSFORM_FEEDBACK_BUFFER_SIZE: 35973, readonly TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN: 35976, readonly RASTERIZER_DISCARD: 35977, readonly MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS: 35978, readonly MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS: 35979, readonly INTERLEAVED_ATTRIBS: 35980, readonly SEPARATE_ATTRIBS: 35981, readonly TRANSFORM_FEEDBACK_BUFFER: 35982, readonly TRANSFORM_FEEDBACK_BUFFER_BINDING: 35983, readonly RGBA32UI: 36208, readonly RGB32UI: 36209, readonly RGBA16UI: 36214, readonly RGB16UI: 36215, readonly RGBA8UI: 36220, readonly RGB8UI: 36221, readonly RGBA32I: 36226, readonly RGB32I: 36227, readonly RGBA16I: 36232, readonly RGB16I: 36233, readonly RGBA8I: 36238, readonly RGB8I: 36239, readonly RED_INTEGER: 36244, readonly RGB_INTEGER: 36248, readonly RGBA_INTEGER: 36249, readonly SAMPLER_2D_ARRAY: 36289, readonly SAMPLER_2D_ARRAY_SHADOW: 36292, readonly SAMPLER_CUBE_SHADOW: 36293, readonly UNSIGNED_INT_VEC2: 36294, readonly UNSIGNED_INT_VEC3: 36295, readonly UNSIGNED_INT_VEC4: 36296, readonly INT_SAMPLER_2D: 36298, readonly INT_SAMPLER_3D: 36299, readonly INT_SAMPLER_CUBE: 36300, readonly INT_SAMPLER_2D_ARRAY: 36303, readonly UNSIGNED_INT_SAMPLER_2D: 36306, readonly UNSIGNED_INT_SAMPLER_3D: 36307, readonly UNSIGNED_INT_SAMPLER_CUBE: 36308, readonly UNSIGNED_INT_SAMPLER_2D_ARRAY: 36311, readonly DEPTH_COMPONENT32F: 36012, readonly DEPTH32F_STENCIL8: 36013, readonly FLOAT_32_UNSIGNED_INT_24_8_REV: 36269, readonly FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING: 33296, readonly FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: 33297, readonly FRAMEBUFFER_ATTACHMENT_RED_SIZE: 33298, readonly FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: 33299, readonly FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: 33300, readonly FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: 33301, readonly FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: 33302, readonly FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: 33303, readonly FRAMEBUFFER_DEFAULT: 33304, readonly UNSIGNED_INT_24_8: 34042, readonly DEPTH24_STENCIL8: 35056, readonly UNSIGNED_NORMALIZED: 35863, readonly DRAW_FRAMEBUFFER_BINDING: 36006, readonly READ_FRAMEBUFFER: 36008, readonly DRAW_FRAMEBUFFER: 36009, readonly READ_FRAMEBUFFER_BINDING: 36010, readonly RENDERBUFFER_SAMPLES: 36011, readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: 36052, readonly MAX_COLOR_ATTACHMENTS: 36063, readonly COLOR_ATTACHMENT1: 36065, readonly COLOR_ATTACHMENT2: 36066, readonly COLOR_ATTACHMENT3: 36067, readonly COLOR_ATTACHMENT4: 36068, readonly COLOR_ATTACHMENT5: 36069, readonly COLOR_ATTACHMENT6: 36070, readonly COLOR_ATTACHMENT7: 36071, readonly COLOR_ATTACHMENT8: 36072, readonly COLOR_ATTACHMENT9: 36073, readonly COLOR_ATTACHMENT10: 36074, readonly COLOR_ATTACHMENT11: 36075, readonly COLOR_ATTACHMENT12: 36076, readonly COLOR_ATTACHMENT13: 36077, readonly COLOR_ATTACHMENT14: 36078, readonly COLOR_ATTACHMENT15: 36079, readonly FRAMEBUFFER_INCOMPLETE_MULTISAMPLE: 36182, readonly MAX_SAMPLES: 36183, readonly HALF_FLOAT: 5131, readonly RG: 33319, readonly RG_INTEGER: 33320, readonly R8: 33321, readonly RG8: 33323, readonly R16F: 33325, readonly R32F: 33326, readonly RG16F: 33327, readonly RG32F: 33328, readonly R8I: 33329, readonly R8UI: 33330, readonly R16I: 33331, readonly R16UI: 33332, readonly R32I: 33333, readonly R32UI: 33334, readonly RG8I: 33335, readonly RG8UI: 33336, readonly RG16I: 33337, readonly RG16UI: 33338, readonly RG32I: 33339, readonly RG32UI: 33340, readonly VERTEX_ARRAY_BINDING: 34229, readonly R8_SNORM: 36756, readonly RG8_SNORM: 36757, readonly RGB8_SNORM: 36758, readonly RGBA8_SNORM: 36759, readonly SIGNED_NORMALIZED: 36764, readonly COPY_READ_BUFFER: 36662, readonly COPY_WRITE_BUFFER: 36663, readonly COPY_READ_BUFFER_BINDING: 36662, readonly COPY_WRITE_BUFFER_BINDING: 36663, readonly UNIFORM_BUFFER: 35345, readonly UNIFORM_BUFFER_BINDING: 35368, readonly UNIFORM_BUFFER_START: 35369, readonly UNIFORM_BUFFER_SIZE: 35370, readonly MAX_VERTEX_UNIFORM_BLOCKS: 35371, readonly MAX_FRAGMENT_UNIFORM_BLOCKS: 35373, readonly MAX_COMBINED_UNIFORM_BLOCKS: 35374, readonly MAX_UNIFORM_BUFFER_BINDINGS: 35375, readonly MAX_UNIFORM_BLOCK_SIZE: 35376, readonly MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS: 35377, readonly MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS: 35379, readonly UNIFORM_BUFFER_OFFSET_ALIGNMENT: 35380, readonly ACTIVE_UNIFORM_BLOCKS: 35382, readonly UNIFORM_TYPE: 35383, readonly UNIFORM_SIZE: 35384, readonly UNIFORM_BLOCK_INDEX: 35386, readonly UNIFORM_OFFSET: 35387, readonly UNIFORM_ARRAY_STRIDE: 35388, readonly UNIFORM_MATRIX_STRIDE: 35389, readonly UNIFORM_IS_ROW_MAJOR: 35390, readonly UNIFORM_BLOCK_BINDING: 35391, readonly UNIFORM_BLOCK_DATA_SIZE: 35392, readonly UNIFORM_BLOCK_ACTIVE_UNIFORMS: 35394, readonly UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES: 35395, readonly UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER: 35396, readonly UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER: 35398, readonly INVALID_INDEX: 4.294967295e+09, readonly MAX_VERTEX_OUTPUT_COMPONENTS: 37154, readonly MAX_FRAGMENT_INPUT_COMPONENTS: 37157, readonly MAX_SERVER_WAIT_TIMEOUT: 37137, readonly OBJECT_TYPE: 37138, readonly SYNC_CONDITION: 37139, readonly SYNC_STATUS: 37140, readonly SYNC_FLAGS: 37141, readonly SYNC_FENCE: 37142, readonly SYNC_GPU_COMMANDS_COMPLETE: 37143, readonly UNSIGNALED: 37144, readonly SIGNALED: 37145, readonly ALREADY_SIGNALED: 37146, readonly TIMEOUT_EXPIRED: 37147, readonly CONDITION_SATISFIED: 37148, readonly WAIT_FAILED: 37149, readonly SYNC_FLUSH_COMMANDS_BIT: 1, readonly VERTEX_ATTRIB_ARRAY_DIVISOR: 35070, readonly ANY_SAMPLES_PASSED: 35887, readonly ANY_SAMPLES_PASSED_CONSERVATIVE: 36202, readonly SAMPLER_BINDING: 35097, readonly RGB10_A2UI: 36975, readonly INT_2_10_10_10_REV: 36255, readonly TRANSFORM_FEEDBACK: 36386, readonly TRANSFORM_FEEDBACK_PAUSED: 36387, readonly TRANSFORM_FEEDBACK_ACTIVE: 36388, readonly TRANSFORM_FEEDBACK_BINDING: 36389, readonly TEXTURE_IMMUTABLE_FORMAT: 37167, readonly MAX_ELEMENT_INDEX: 36203, readonly TEXTURE_IMMUTABLE_LEVELS: 33503, readonly TIMEOUT_IGNORED: -1, readonly MAX_CLIENT_WAIT_TIMEOUT_WEBGL: 37447, readonly DEPTH_BUFFER_BIT: 256, readonly STENCIL_BUFFER_BIT: 1024, readonly COLOR_BUFFER_BIT: 16384, readonly POINTS: 0, readonly LINES: 1, readonly LINE_LOOP: 2, readonly LINE_STRIP: 3, readonly TRIANGLES: 4, readonly TRIANGLE_STRIP: 5, readonly TRIANGLE_FAN: 6, readonly ZERO: 0, readonly ONE: 1, readonly SRC_COLOR: 768, readonly ONE_MINUS_SRC_COLOR: 769, readonly SRC_ALPHA: 770, readonly ONE_MINUS_SRC_ALPHA: 771, readonly DST_ALPHA: 772, readonly ONE_MINUS_DST_ALPHA: 773, readonly DST_COLOR: 774, readonly ONE_MINUS_DST_COLOR: 775, readonly SRC_ALPHA_SATURATE: 776, readonly FUNC_ADD: 32774, readonly BLEND_EQUATION: 32777, readonly BLEND_EQUATION_RGB: 32777, readonly BLEND_EQUATION_ALPHA: 34877, readonly FUNC_SUBTRACT: 32778, readonly FUNC_REVERSE_SUBTRACT: 32779, readonly BLEND_DST_RGB: 32968, readonly BLEND_SRC_RGB: 32969, readonly BLEND_DST_ALPHA: 32970, readonly BLEND_SRC_ALPHA: 32971, readonly CONSTANT_COLOR: 32769, readonly ONE_MINUS_CONSTANT_COLOR: 32770, readonly CONSTANT_ALPHA: 32771, readonly ONE_MINUS_CONSTANT_ALPHA: 32772, readonly BLEND_COLOR: 32773, readonly ARRAY_BUFFER: 34962, readonly ELEMENT_ARRAY_BUFFER: 34963, readonly ARRAY_BUFFER_BINDING: 34964, readonly ELEMENT_ARRAY_BUFFER_BINDING: 34965, readonly STREAM_DRAW: 35040, readonly STATIC_DRAW: 35044, readonly DYNAMIC_DRAW: 35048, readonly BUFFER_SIZE: 34660, readonly BUFFER_USAGE: 34661, readonly CURRENT_VERTEX_ATTRIB: 34342, readonly FRONT: 1028, readonly BACK: 1029, readonly FRONT_AND_BACK: 1032, readonly CULL_FACE: 2884, readonly BLEND: 3042, readonly DITHER: 3024, readonly STENCIL_TEST: 2960, readonly DEPTH_TEST: 2929, readonly SCISSOR_TEST: 3089, readonly POLYGON_OFFSET_FILL: 32823, readonly SAMPLE_ALPHA_TO_COVERAGE: 32926, readonly SAMPLE_COVERAGE: 32928, readonly NO_ERROR: 0, readonly INVALID_ENUM: 1280, readonly INVALID_VALUE: 1281, readonly INVALID_OPERATION: 1282, readonly OUT_OF_MEMORY: 1285, readonly CW: 2304, readonly CCW: 2305, readonly LINE_WIDTH: 2849, readonly ALIASED_POINT_SIZE_RANGE: 33901, readonly ALIASED_LINE_WIDTH_RANGE: 33902, readonly CULL_FACE_MODE: 2885, readonly FRONT_FACE: 2886, readonly DEPTH_RANGE: 2928, readonly DEPTH_WRITEMASK: 2930, readonly DEPTH_CLEAR_VALUE: 2931, readonly DEPTH_FUNC: 2932, readonly STENCIL_CLEAR_VALUE: 2961, readonly STENCIL_FUNC: 2962, readonly STENCIL_FAIL: 2964, readonly STENCIL_PASS_DEPTH_FAIL: 2965, readonly STENCIL_PASS_DEPTH_PASS: 2966, readonly STENCIL_REF: 2967, readonly STENCIL_VALUE_MASK: 2963, readonly STENCIL_WRITEMASK: 2968, readonly STENCIL_BACK_FUNC: 34816, readonly STENCIL_BACK_FAIL: 34817, readonly STENCIL_BACK_PASS_DEPTH_FAIL: 34818, readonly STENCIL_BACK_PASS_DEPTH_PASS: 34819, readonly STENCIL_BACK_REF: 36003, readonly STENCIL_BACK_VALUE_MASK: 36004, readonly STENCIL_BACK_WRITEMASK: 36005, readonly VIEWPORT: 2978, readonly SCISSOR_BOX: 3088, readonly COLOR_CLEAR_VALUE: 3106, readonly COLOR_WRITEMASK: 3107, readonly UNPACK_ALIGNMENT: 3317, readonly PACK_ALIGNMENT: 3333, readonly MAX_TEXTURE_SIZE: 3379, readonly MAX_VIEWPORT_DIMS: 3386, readonly SUBPIXEL_BITS: 3408, readonly RED_BITS: 3410, readonly GREEN_BITS: 3411, readonly BLUE_BITS: 3412, readonly ALPHA_BITS: 3413, readonly DEPTH_BITS: 3414, readonly STENCIL_BITS: 3415, readonly POLYGON_OFFSET_UNITS: 10752, readonly POLYGON_OFFSET_FACTOR: 32824, readonly TEXTURE_BINDING_2D: 32873, readonly SAMPLE_BUFFERS: 32936, readonly SAMPLES: 32937, readonly SAMPLE_COVERAGE_VALUE: 32938, readonly SAMPLE_COVERAGE_INVERT: 32939, readonly COMPRESSED_TEXTURE_FORMATS: 34467, readonly DONT_CARE: 4352, readonly FASTEST: 4353, readonly NICEST: 4354, readonly GENERATE_MIPMAP_HINT: 33170, readonly BYTE: 5120, readonly UNSIGNED_BYTE: 5121, readonly SHORT: 5122, readonly UNSIGNED_SHORT: 5123, readonly INT: 5124, readonly UNSIGNED_INT: 5125, readonly FLOAT: 5126, readonly DEPTH_COMPONENT: 6402, readonly ALPHA: 6406, readonly RGB: 6407, readonly RGBA: 6408, readonly LUMINANCE: 6409, readonly LUMINANCE_ALPHA: 6410, readonly UNSIGNED_SHORT_4_4_4_4: 32819, readonly UNSIGNED_SHORT_5_5_5_1: 32820, readonly UNSIGNED_SHORT_5_6_5: 33635, readonly FRAGMENT_SHADER: 35632, readonly VERTEX_SHADER: 35633, readonly MAX_VERTEX_ATTRIBS: 34921, readonly MAX_VERTEX_UNIFORM_VECTORS: 36347, readonly MAX_VARYING_VECTORS: 36348, readonly MAX_COMBINED_TEXTURE_IMAGE_UNITS: 35661, readonly MAX_VERTEX_TEXTURE_IMAGE_UNITS: 35660, readonly MAX_TEXTURE_IMAGE_UNITS: 34930, readonly MAX_FRAGMENT_UNIFORM_VECTORS: 36349, readonly SHADER_TYPE: 35663, readonly DELETE_STATUS: 35712, readonly LINK_STATUS: 35714, readonly VALIDATE_STATUS: 35715, readonly ATTACHED_SHADERS: 35717, readonly ACTIVE_UNIFORMS: 35718, readonly ACTIVE_ATTRIBUTES: 35721, readonly SHADING_LANGUAGE_VERSION: 35724, readonly CURRENT_PROGRAM: 35725, readonly NEVER: 512, readonly LESS: 513, readonly EQUAL: 514, readonly LEQUAL: 515, readonly GREATER: 516, readonly NOTEQUAL: 517, readonly GEQUAL: 518, readonly ALWAYS: 519, readonly KEEP: 7680, readonly REPLACE: 7681, readonly INCR: 7682, readonly DECR: 7683, readonly INVERT: 5386, readonly INCR_WRAP: 34055, readonly DECR_WRAP: 34056, readonly VENDOR: 7936, readonly RENDERER: 7937, readonly VERSION: 7938, readonly NEAREST: 9728, readonly LINEAR: 9729, readonly NEAREST_MIPMAP_NEAREST: 9984, readonly LINEAR_MIPMAP_NEAREST: 9985, readonly NEAREST_MIPMAP_LINEAR: 9986, readonly LINEAR_MIPMAP_LINEAR: 9987, readonly TEXTURE_MAG_FILTER: 10240, readonly TEXTURE_MIN_FILTER: 10241, readonly TEXTURE_WRAP_S: 10242, readonly TEXTURE_WRAP_T: 10243, readonly TEXTURE_2D: 3553, readonly TEXTURE: 5890, readonly TEXTURE_CUBE_MAP: 34067, readonly TEXTURE_BINDING_CUBE_MAP: 34068, readonly TEXTURE_CUBE_MAP_POSITIVE_X: 34069, readonly TEXTURE_CUBE_MAP_NEGATIVE_X: 34070, readonly TEXTURE_CUBE_MAP_POSITIVE_Y: 34071, readonly TEXTURE_CUBE_MAP_NEGATIVE_Y: 34072, readonly TEXTURE_CUBE_MAP_POSITIVE_Z: 34073, readonly TEXTURE_CUBE_MAP_NEGATIVE_Z: 34074, readonly MAX_CUBE_MAP_TEXTURE_SIZE: 34076, readonly TEXTURE0: 33984, readonly TEXTURE1: 33985, readonly TEXTURE2: 33986, readonly TEXTURE3: 33987, readonly TEXTURE4: 33988, readonly TEXTURE5: 33989, readonly TEXTURE6: 33990, readonly TEXTURE7: 33991, readonly TEXTURE8: 33992, readonly TEXTURE9: 33993, readonly TEXTURE10: 33994, readonly TEXTURE11: 33995, readonly TEXTURE12: 33996, readonly TEXTURE13: 33997, readonly TEXTURE14: 33998, readonly TEXTURE15: 33999, readonly TEXTURE16: 34000, readonly TEXTURE17: 34001, readonly TEXTURE18: 34002, readonly TEXTURE19: 34003, readonly TEXTURE20: 34004, readonly TEXTURE21: 34005, readonly TEXTURE22: 34006, readonly TEXTURE23: 34007, readonly TEXTURE24: 34008, readonly TEXTURE25: 34009, readonly TEXTURE26: 34010, readonly TEXTURE27: 34011, readonly TEXTURE28: 34012, readonly TEXTURE29: 34013, readonly TEXTURE30: 34014, readonly TEXTURE31: 34015, readonly ACTIVE_TEXTURE: 34016, readonly REPEAT: 10497, readonly CLAMP_TO_EDGE: 33071, readonly MIRRORED_REPEAT: 33648, readonly FLOAT_VEC2: 35664, readonly FLOAT_VEC3: 35665, readonly FLOAT_VEC4: 35666, readonly INT_VEC2: 35667, readonly INT_VEC3: 35668, readonly INT_VEC4: 35669, readonly BOOL: 35670, readonly BOOL_VEC2: 35671, readonly BOOL_VEC3: 35672, readonly BOOL_VEC4: 35673, readonly FLOAT_MAT2: 35674, readonly FLOAT_MAT3: 35675, readonly FLOAT_MAT4: 35676, readonly SAMPLER_2D: 35678, readonly SAMPLER_CUBE: 35680, readonly VERTEX_ATTRIB_ARRAY_ENABLED: 34338, readonly VERTEX_ATTRIB_ARRAY_SIZE: 34339, readonly VERTEX_ATTRIB_ARRAY_STRIDE: 34340, readonly VERTEX_ATTRIB_ARRAY_TYPE: 34341, readonly VERTEX_ATTRIB_ARRAY_NORMALIZED: 34922, readonly VERTEX_ATTRIB_ARRAY_POINTER: 34373, readonly VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: 34975, readonly IMPLEMENTATION_COLOR_READ_TYPE: 35738, readonly IMPLEMENTATION_COLOR_READ_FORMAT: 35739, readonly COMPILE_STATUS: 35713, readonly LOW_FLOAT: 36336, readonly MEDIUM_FLOAT: 36337, readonly HIGH_FLOAT: 36338, readonly LOW_INT: 36339, readonly MEDIUM_INT: 36340, readonly HIGH_INT: 36341, readonly FRAMEBUFFER: 36160, readonly RENDERBUFFER: 36161, readonly RGBA4: 32854, readonly RGB5_A1: 32855, readonly RGBA8: 32856, readonly RGB565: 36194, readonly DEPTH_COMPONENT16: 33189, readonly STENCIL_INDEX8: 36168, readonly DEPTH_STENCIL: 34041, readonly RENDERBUFFER_WIDTH: 36162, readonly RENDERBUFFER_HEIGHT: 36163, readonly RENDERBUFFER_INTERNAL_FORMAT: 36164, readonly RENDERBUFFER_RED_SIZE: 36176, readonly RENDERBUFFER_GREEN_SIZE: 36177, readonly RENDERBUFFER_BLUE_SIZE: 36178, readonly RENDERBUFFER_ALPHA_SIZE: 36179, readonly RENDERBUFFER_DEPTH_SIZE: 36180, readonly RENDERBUFFER_STENCIL_SIZE: 36181, readonly FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: 36048, readonly FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: 36049, readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: 36050, readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: 36051, readonly COLOR_ATTACHMENT0: 36064, readonly DEPTH_ATTACHMENT: 36096, readonly STENCIL_ATTACHMENT: 36128, readonly DEPTH_STENCIL_ATTACHMENT: 33306, readonly NONE: 0, readonly FRAMEBUFFER_COMPLETE: 36053, readonly FRAMEBUFFER_INCOMPLETE_ATTACHMENT: 36054, readonly FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: 36055, readonly FRAMEBUFFER_INCOMPLETE_DIMENSIONS: 36057, readonly FRAMEBUFFER_UNSUPPORTED: 36061, readonly FRAMEBUFFER_BINDING: 36006, readonly RENDERBUFFER_BINDING: 36007, readonly MAX_RENDERBUFFER_SIZE: 34024, readonly INVALID_FRAMEBUFFER_OPERATION: 1286, readonly UNPACK_FLIP_Y_WEBGL: 37440, readonly UNPACK_PREMULTIPLY_ALPHA_WEBGL: 37441, readonly CONTEXT_LOST_WEBGL: 37442, readonly UNPACK_COLORSPACE_CONVERSION_WEBGL: 37443, readonly BROWSER_DEFAULT_WEBGL: 37444 }, WebGLActiveInfo: { new(): WebGLActiveInfo, prototype: WebGLActiveInfo }, WebGLBuffer: { new(): WebGLBuffer, prototype: WebGLBuffer }, WebGLContextEvent: { new(type: string, eventInit?: WebGLContextEventInit): WebGLContextEvent, prototype: WebGLContextEvent }, WebGLFramebuffer: { new(): WebGLFramebuffer, prototype: WebGLFramebuffer }, WebGLProgram: { new(): WebGLProgram, prototype: WebGLProgram }, WebGLQuery: { new(): WebGLQuery, prototype: WebGLQuery }, WebGLRenderbuffer: { new(): WebGLRenderbuffer, prototype: WebGLRenderbuffer }, WebGLRenderingContext: { new(): WebGLRenderingContext, prototype: WebGLRenderingContext, readonly DEPTH_BUFFER_BIT: 256, readonly STENCIL_BUFFER_BIT: 1024, readonly COLOR_BUFFER_BIT: 16384, readonly POINTS: 0, readonly LINES: 1, readonly LINE_LOOP: 2, readonly LINE_STRIP: 3, readonly TRIANGLES: 4, readonly TRIANGLE_STRIP: 5, readonly TRIANGLE_FAN: 6, readonly ZERO: 0, readonly ONE: 1, readonly SRC_COLOR: 768, readonly ONE_MINUS_SRC_COLOR: 769, readonly SRC_ALPHA: 770, readonly ONE_MINUS_SRC_ALPHA: 771, readonly DST_ALPHA: 772, readonly ONE_MINUS_DST_ALPHA: 773, readonly DST_COLOR: 774, readonly ONE_MINUS_DST_COLOR: 775, readonly SRC_ALPHA_SATURATE: 776, readonly FUNC_ADD: 32774, readonly BLEND_EQUATION: 32777, readonly BLEND_EQUATION_RGB: 32777, readonly BLEND_EQUATION_ALPHA: 34877, readonly FUNC_SUBTRACT: 32778, readonly FUNC_REVERSE_SUBTRACT: 32779, readonly BLEND_DST_RGB: 32968, readonly BLEND_SRC_RGB: 32969, readonly BLEND_DST_ALPHA: 32970, readonly BLEND_SRC_ALPHA: 32971, readonly CONSTANT_COLOR: 32769, readonly ONE_MINUS_CONSTANT_COLOR: 32770, readonly CONSTANT_ALPHA: 32771, readonly ONE_MINUS_CONSTANT_ALPHA: 32772, readonly BLEND_COLOR: 32773, readonly ARRAY_BUFFER: 34962, readonly ELEMENT_ARRAY_BUFFER: 34963, readonly ARRAY_BUFFER_BINDING: 34964, readonly ELEMENT_ARRAY_BUFFER_BINDING: 34965, readonly STREAM_DRAW: 35040, readonly STATIC_DRAW: 35044, readonly DYNAMIC_DRAW: 35048, readonly BUFFER_SIZE: 34660, readonly BUFFER_USAGE: 34661, readonly CURRENT_VERTEX_ATTRIB: 34342, readonly FRONT: 1028, readonly BACK: 1029, readonly FRONT_AND_BACK: 1032, readonly CULL_FACE: 2884, readonly BLEND: 3042, readonly DITHER: 3024, readonly STENCIL_TEST: 2960, readonly DEPTH_TEST: 2929, readonly SCISSOR_TEST: 3089, readonly POLYGON_OFFSET_FILL: 32823, readonly SAMPLE_ALPHA_TO_COVERAGE: 32926, readonly SAMPLE_COVERAGE: 32928, readonly NO_ERROR: 0, readonly INVALID_ENUM: 1280, readonly INVALID_VALUE: 1281, readonly INVALID_OPERATION: 1282, readonly OUT_OF_MEMORY: 1285, readonly CW: 2304, readonly CCW: 2305, readonly LINE_WIDTH: 2849, readonly ALIASED_POINT_SIZE_RANGE: 33901, readonly ALIASED_LINE_WIDTH_RANGE: 33902, readonly CULL_FACE_MODE: 2885, readonly FRONT_FACE: 2886, readonly DEPTH_RANGE: 2928, readonly DEPTH_WRITEMASK: 2930, readonly DEPTH_CLEAR_VALUE: 2931, readonly DEPTH_FUNC: 2932, readonly STENCIL_CLEAR_VALUE: 2961, readonly STENCIL_FUNC: 2962, readonly STENCIL_FAIL: 2964, readonly STENCIL_PASS_DEPTH_FAIL: 2965, readonly STENCIL_PASS_DEPTH_PASS: 2966, readonly STENCIL_REF: 2967, readonly STENCIL_VALUE_MASK: 2963, readonly STENCIL_WRITEMASK: 2968, readonly STENCIL_BACK_FUNC: 34816, readonly STENCIL_BACK_FAIL: 34817, readonly STENCIL_BACK_PASS_DEPTH_FAIL: 34818, readonly STENCIL_BACK_PASS_DEPTH_PASS: 34819, readonly STENCIL_BACK_REF: 36003, readonly STENCIL_BACK_VALUE_MASK: 36004, readonly STENCIL_BACK_WRITEMASK: 36005, readonly VIEWPORT: 2978, readonly SCISSOR_BOX: 3088, readonly COLOR_CLEAR_VALUE: 3106, readonly COLOR_WRITEMASK: 3107, readonly UNPACK_ALIGNMENT: 3317, readonly PACK_ALIGNMENT: 3333, readonly MAX_TEXTURE_SIZE: 3379, readonly MAX_VIEWPORT_DIMS: 3386, readonly SUBPIXEL_BITS: 3408, readonly RED_BITS: 3410, readonly GREEN_BITS: 3411, readonly BLUE_BITS: 3412, readonly ALPHA_BITS: 3413, readonly DEPTH_BITS: 3414, readonly STENCIL_BITS: 3415, readonly POLYGON_OFFSET_UNITS: 10752, readonly POLYGON_OFFSET_FACTOR: 32824, readonly TEXTURE_BINDING_2D: 32873, readonly SAMPLE_BUFFERS: 32936, readonly SAMPLES: 32937, readonly SAMPLE_COVERAGE_VALUE: 32938, readonly SAMPLE_COVERAGE_INVERT: 32939, readonly COMPRESSED_TEXTURE_FORMATS: 34467, readonly DONT_CARE: 4352, readonly FASTEST: 4353, readonly NICEST: 4354, readonly GENERATE_MIPMAP_HINT: 33170, readonly BYTE: 5120, readonly UNSIGNED_BYTE: 5121, readonly SHORT: 5122, readonly UNSIGNED_SHORT: 5123, readonly INT: 5124, readonly UNSIGNED_INT: 5125, readonly FLOAT: 5126, readonly DEPTH_COMPONENT: 6402, readonly ALPHA: 6406, readonly RGB: 6407, readonly RGBA: 6408, readonly LUMINANCE: 6409, readonly LUMINANCE_ALPHA: 6410, readonly UNSIGNED_SHORT_4_4_4_4: 32819, readonly UNSIGNED_SHORT_5_5_5_1: 32820, readonly UNSIGNED_SHORT_5_6_5: 33635, readonly FRAGMENT_SHADER: 35632, readonly VERTEX_SHADER: 35633, readonly MAX_VERTEX_ATTRIBS: 34921, readonly MAX_VERTEX_UNIFORM_VECTORS: 36347, readonly MAX_VARYING_VECTORS: 36348, readonly MAX_COMBINED_TEXTURE_IMAGE_UNITS: 35661, readonly MAX_VERTEX_TEXTURE_IMAGE_UNITS: 35660, readonly MAX_TEXTURE_IMAGE_UNITS: 34930, readonly MAX_FRAGMENT_UNIFORM_VECTORS: 36349, readonly SHADER_TYPE: 35663, readonly DELETE_STATUS: 35712, readonly LINK_STATUS: 35714, readonly VALIDATE_STATUS: 35715, readonly ATTACHED_SHADERS: 35717, readonly ACTIVE_UNIFORMS: 35718, readonly ACTIVE_ATTRIBUTES: 35721, readonly SHADING_LANGUAGE_VERSION: 35724, readonly CURRENT_PROGRAM: 35725, readonly NEVER: 512, readonly LESS: 513, readonly EQUAL: 514, readonly LEQUAL: 515, readonly GREATER: 516, readonly NOTEQUAL: 517, readonly GEQUAL: 518, readonly ALWAYS: 519, readonly KEEP: 7680, readonly REPLACE: 7681, readonly INCR: 7682, readonly DECR: 7683, readonly INVERT: 5386, readonly INCR_WRAP: 34055, readonly DECR_WRAP: 34056, readonly VENDOR: 7936, readonly RENDERER: 7937, readonly VERSION: 7938, readonly NEAREST: 9728, readonly LINEAR: 9729, readonly NEAREST_MIPMAP_NEAREST: 9984, readonly LINEAR_MIPMAP_NEAREST: 9985, readonly NEAREST_MIPMAP_LINEAR: 9986, readonly LINEAR_MIPMAP_LINEAR: 9987, readonly TEXTURE_MAG_FILTER: 10240, readonly TEXTURE_MIN_FILTER: 10241, readonly TEXTURE_WRAP_S: 10242, readonly TEXTURE_WRAP_T: 10243, readonly TEXTURE_2D: 3553, readonly TEXTURE: 5890, readonly TEXTURE_CUBE_MAP: 34067, readonly TEXTURE_BINDING_CUBE_MAP: 34068, readonly TEXTURE_CUBE_MAP_POSITIVE_X: 34069, readonly TEXTURE_CUBE_MAP_NEGATIVE_X: 34070, readonly TEXTURE_CUBE_MAP_POSITIVE_Y: 34071, readonly TEXTURE_CUBE_MAP_NEGATIVE_Y: 34072, readonly TEXTURE_CUBE_MAP_POSITIVE_Z: 34073, readonly TEXTURE_CUBE_MAP_NEGATIVE_Z: 34074, readonly MAX_CUBE_MAP_TEXTURE_SIZE: 34076, readonly TEXTURE0: 33984, readonly TEXTURE1: 33985, readonly TEXTURE2: 33986, readonly TEXTURE3: 33987, readonly TEXTURE4: 33988, readonly TEXTURE5: 33989, readonly TEXTURE6: 33990, readonly TEXTURE7: 33991, readonly TEXTURE8: 33992, readonly TEXTURE9: 33993, readonly TEXTURE10: 33994, readonly TEXTURE11: 33995, readonly TEXTURE12: 33996, readonly TEXTURE13: 33997, readonly TEXTURE14: 33998, readonly TEXTURE15: 33999, readonly TEXTURE16: 34000, readonly TEXTURE17: 34001, readonly TEXTURE18: 34002, readonly TEXTURE19: 34003, readonly TEXTURE20: 34004, readonly TEXTURE21: 34005, readonly TEXTURE22: 34006, readonly TEXTURE23: 34007, readonly TEXTURE24: 34008, readonly TEXTURE25: 34009, readonly TEXTURE26: 34010, readonly TEXTURE27: 34011, readonly TEXTURE28: 34012, readonly TEXTURE29: 34013, readonly TEXTURE30: 34014, readonly TEXTURE31: 34015, readonly ACTIVE_TEXTURE: 34016, readonly REPEAT: 10497, readonly CLAMP_TO_EDGE: 33071, readonly MIRRORED_REPEAT: 33648, readonly FLOAT_VEC2: 35664, readonly FLOAT_VEC3: 35665, readonly FLOAT_VEC4: 35666, readonly INT_VEC2: 35667, readonly INT_VEC3: 35668, readonly INT_VEC4: 35669, readonly BOOL: 35670, readonly BOOL_VEC2: 35671, readonly BOOL_VEC3: 35672, readonly BOOL_VEC4: 35673, readonly FLOAT_MAT2: 35674, readonly FLOAT_MAT3: 35675, readonly FLOAT_MAT4: 35676, readonly SAMPLER_2D: 35678, readonly SAMPLER_CUBE: 35680, readonly VERTEX_ATTRIB_ARRAY_ENABLED: 34338, readonly VERTEX_ATTRIB_ARRAY_SIZE: 34339, readonly VERTEX_ATTRIB_ARRAY_STRIDE: 34340, readonly VERTEX_ATTRIB_ARRAY_TYPE: 34341, readonly VERTEX_ATTRIB_ARRAY_NORMALIZED: 34922, readonly VERTEX_ATTRIB_ARRAY_POINTER: 34373, readonly VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: 34975, readonly IMPLEMENTATION_COLOR_READ_TYPE: 35738, readonly IMPLEMENTATION_COLOR_READ_FORMAT: 35739, readonly COMPILE_STATUS: 35713, readonly LOW_FLOAT: 36336, readonly MEDIUM_FLOAT: 36337, readonly HIGH_FLOAT: 36338, readonly LOW_INT: 36339, readonly MEDIUM_INT: 36340, readonly HIGH_INT: 36341, readonly FRAMEBUFFER: 36160, readonly RENDERBUFFER: 36161, readonly RGBA4: 32854, readonly RGB5_A1: 32855, readonly RGBA8: 32856, readonly RGB565: 36194, readonly DEPTH_COMPONENT16: 33189, readonly STENCIL_INDEX8: 36168, readonly DEPTH_STENCIL: 34041, readonly RENDERBUFFER_WIDTH: 36162, readonly RENDERBUFFER_HEIGHT: 36163, readonly RENDERBUFFER_INTERNAL_FORMAT: 36164, readonly RENDERBUFFER_RED_SIZE: 36176, readonly RENDERBUFFER_GREEN_SIZE: 36177, readonly RENDERBUFFER_BLUE_SIZE: 36178, readonly RENDERBUFFER_ALPHA_SIZE: 36179, readonly RENDERBUFFER_DEPTH_SIZE: 36180, readonly RENDERBUFFER_STENCIL_SIZE: 36181, readonly FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: 36048, readonly FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: 36049, readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: 36050, readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: 36051, readonly COLOR_ATTACHMENT0: 36064, readonly DEPTH_ATTACHMENT: 36096, readonly STENCIL_ATTACHMENT: 36128, readonly DEPTH_STENCIL_ATTACHMENT: 33306, readonly NONE: 0, readonly FRAMEBUFFER_COMPLETE: 36053, readonly FRAMEBUFFER_INCOMPLETE_ATTACHMENT: 36054, readonly FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: 36055, readonly FRAMEBUFFER_INCOMPLETE_DIMENSIONS: 36057, readonly FRAMEBUFFER_UNSUPPORTED: 36061, readonly FRAMEBUFFER_BINDING: 36006, readonly RENDERBUFFER_BINDING: 36007, readonly MAX_RENDERBUFFER_SIZE: 34024, readonly INVALID_FRAMEBUFFER_OPERATION: 1286, readonly UNPACK_FLIP_Y_WEBGL: 37440, readonly UNPACK_PREMULTIPLY_ALPHA_WEBGL: 37441, readonly CONTEXT_LOST_WEBGL: 37442, readonly UNPACK_COLORSPACE_CONVERSION_WEBGL: 37443, readonly BROWSER_DEFAULT_WEBGL: 37444 }, WebGLSampler: { new(): WebGLSampler, prototype: WebGLSampler }, WebGLShader: { new(): WebGLShader, prototype: WebGLShader }, WebGLShaderPrecisionFormat: { new(): WebGLShaderPrecisionFormat, prototype: WebGLShaderPrecisionFormat }, WebGLSync: { new(): WebGLSync, prototype: WebGLSync }, WebGLTexture: { new(): WebGLTexture, prototype: WebGLTexture }, WebGLTransformFeedback: { new(): WebGLTransformFeedback, prototype: WebGLTransformFeedback }, WebGLUniformLocation: { new(): WebGLUniformLocation, prototype: WebGLUniformLocation }, WebGLVertexArrayObject: { new(): WebGLVertexArrayObject, prototype: WebGLVertexArrayObject }, WebSocket: { new(url: string | URL, protocols?: string | string[]): WebSocket, prototype: WebSocket, readonly CONNECTING: 0, readonly OPEN: 1, readonly CLOSING: 2, readonly CLOSED: 3 }, WebTransport: { new(url: string | URL, options?: WebTransportOptions): WebTransport, prototype: WebTransport }, WebTransportBidirectionalStream: { new(): WebTransportBidirectionalStream, prototype: WebTransportBidirectionalStream }, WebTransportDatagramDuplexStream: { new(): WebTransportDatagramDuplexStream, prototype: WebTransportDatagramDuplexStream }, WebTransportError: { new(message?: string, options?: WebTransportErrorOptions): WebTransportError, prototype: WebTransportError }, WheelEvent: { new(type: string, eventInitDict?: WheelEventInit): WheelEvent, prototype: WheelEvent, readonly DOM_DELTA_PIXEL: 0, readonly DOM_DELTA_LINE: 1, readonly DOM_DELTA_PAGE: 2 }, Window: { new(): Window, prototype: Window }, Worker: { new(scriptURL: string | URL, options?: WorkerOptions): Worker, prototype: Worker }, Worklet: { new(): Worklet, prototype: Worklet }, WritableStream: { new<W>(underlyingSink?: UnderlyingSink<W>, strategy?: QueuingStrategy<W>): WritableStream<W>, prototype: WritableStream<any> }, WritableStreamDefaultController: { new(): WritableStreamDefaultController, prototype: WritableStreamDefaultController }, WritableStreamDefaultWriter: { new<W>(stream: WritableStream<W>): WritableStreamDefaultWriter<W>, prototype: WritableStreamDefaultWriter<any> }, XMLDocument: { new(): XMLDocument, prototype: XMLDocument }, XMLHttpRequest: { new(): XMLHttpRequest, prototype: XMLHttpRequest, readonly UNSENT: 0, readonly OPENED: 1, readonly HEADERS_RECEIVED: 2, readonly LOADING: 3, readonly DONE: 4 }, XMLHttpRequestEventTarget: { new(): XMLHttpRequestEventTarget, prototype: XMLHttpRequestEventTarget }, XMLHttpRequestUpload: { new(): XMLHttpRequestUpload, prototype: XMLHttpRequestUpload }, XMLSerializer: { new(): XMLSerializer, prototype: XMLSerializer }, XPathEvaluator: { new(): XPathEvaluator, prototype: XPathEvaluator }, XPathExpression: { new(): XPathExpression, prototype: XPathExpression }, XPathResult: { new(): XPathResult, prototype: XPathResult, readonly ANY_TYPE: 0, readonly NUMBER_TYPE: 1, readonly STRING_TYPE: 2, readonly BOOLEAN_TYPE: 3, readonly UNORDERED_NODE_ITERATOR_TYPE: 4, readonly ORDERED_NODE_ITERATOR_TYPE: 5, readonly UNORDERED_NODE_SNAPSHOT_TYPE: 6, readonly ORDERED_NODE_SNAPSHOT_TYPE: 7, readonly ANY_UNORDERED_NODE_TYPE: 8, readonly FIRST_ORDERED_NODE_TYPE: 9 }, XSLTProcessor: { new(): XSLTProcessor, prototype: XSLTProcessor }, console: Console, CSS: { highlights: HighlightRegistry, Hz: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, Q: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, cap: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, ch: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, cm: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, cqb: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, cqh: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, cqi: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, cqmax: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, cqmin: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, cqw: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, deg: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, dpcm: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, dpi: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, dppx: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, dvb: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, dvh: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, dvi: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, dvmax: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, dvmin: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, dvw: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, em: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, escape: { (ident: string): string, (ident: string): string }, ex: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, fr: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, grad: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, ic: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, kHz: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, lh: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, lvb: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, lvh: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, lvi: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, lvmax: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, lvmin: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, lvw: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, mm: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, ms: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, number: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, pc: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, percent: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, pt: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, px: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, rad: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, rcap: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, rch: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, registerProperty: { (definition: PropertyDefinition): void, (definition: PropertyDefinition): void }, rem: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, rex: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, ric: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, rlh: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, s: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, supports: { (property: string, value: string): boolean, (conditionText: string): boolean, (property: string, value: string): boolean, (conditionText: string): boolean }, svb: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, svh: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, svi: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, svmax: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, svmin: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, svw: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, turn: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, vb: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, vh: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, vi: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, vmax: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, vmin: { (value: number): CSSUnitValue, (value: number): CSSUnitValue }, vw: { (value: number): CSSUnitValue, (value: number): CSSUnitValue } }, WebAssembly: { CompileError: { (message?: string): CompileError, new(message?: string): CompileError, prototype: CompileError }, Global: { new<T>(descriptor: GlobalDescriptor<T>, v?: ValueTypeMap[T]): Global<T>, prototype: Global<keyof ValueTypeMap> }, Instance: { new(module: Module, importObject?: Imports): Instance, prototype: Instance }, LinkError: { (message?: string): LinkError, new(message?: string): LinkError, prototype: LinkError }, Memory: { new(descriptor: MemoryDescriptor): Memory, prototype: Memory }, Module: { new(bytes: BufferSource): Module, prototype: Module, customSections: (moduleObject: Module, sectionName: string) => ArrayBuffer[], exports: (moduleObject: Module) => ModuleExportDescriptor[], imports: (moduleObject: Module) => ModuleImportDescriptor[] }, RuntimeError: { (message?: string): RuntimeError, new(message?: string): RuntimeError, prototype: RuntimeError }, Table: { new(descriptor: TableDescriptor, value?: any): Table, prototype: Table }, compile: { (bytes: BufferSource): Promise<Module>, (bytes: BufferSource): Promise<Module>, (bytes: BufferSource): Promise<Module> }, compileStreaming: { (source: Response | PromiseLike<Response>): Promise<Module>, (source: Response | PromiseLike<Response>): Promise<Module>, (source: Response | PromiseLike<Response>): Promise<Module> }, instantiate: { (bytes: BufferSource, importObject?: Imports): Promise<WebAssemblyInstantiatedSource>, (moduleObject: Module, importObject?: Imports): Promise<Instance>, (bytes: BufferSource, importObject?: Imports): Promise<WebAssemblyInstantiatedSource>, (moduleObject: Module, importObject?: Imports): Promise<Instance>, (bytes: BufferSource, importObject?: Imports): Promise<WebAssemblyInstantiatedSource>, (moduleObject: Module, importObject?: Imports): Promise<Instance> }, instantiateStreaming: { (source: Response | PromiseLike<Response>, importObject?: Imports): Promise<WebAssemblyInstantiatedSource>, (source: Response | PromiseLike<Response>, importObject?: Imports): Promise<WebAssemblyInstantiatedSource>, (source: Response | PromiseLike<Response>, importObject?: Imports): Promise<WebAssemblyInstantiatedSource> }, validate: { (bytes: BufferSource): boolean, (bytes: BufferSource): boolean, (bytes: BufferSource): boolean } }, Audio: new(src?: string) => HTMLAudioElement, Image: new(width?: number, height?: number) => HTMLImageElement, Option: new(text?: string, value?: string, defaultSelected?: boolean, selected?: boolean) => HTMLOptionElement, clientInformation: Navigator, closed: boolean, customElements: CustomElementRegistry, devicePixelRatio: number, document: Document, event: Event, external: External, frameElement: Element, frames: Window, history: History, innerHeight: number, innerWidth: number, length: number, location: Location, locationbar: BarProp, menubar: BarProp, navigator: Navigator, ondevicemotion: (ev: DeviceMotionEvent) => any, ondeviceorientation: (ev: DeviceOrientationEvent) => any, ondeviceorientationabsolute: (ev: DeviceOrientationEvent) => any, onorientationchange: (ev: Event) => any, opener: any, orientation: number, outerHeight: number, outerWidth: number, pageXOffset: number, pageYOffset: number, parent: Window, personalbar: BarProp, screen: Screen, screenLeft: number, screenTop: number, screenX: number, screenY: number, scrollX: number, scrollY: number, scrollbars: BarProp, self: Window & ???, speechSynthesis: SpeechSynthesis, status: string, statusbar: BarProp, toolbar: BarProp, top: Window, visualViewport: VisualViewport, window: Window & ???, alert: { (message?: any): void, (message?: any): void }, blur: { (): void, (): void }, cancelIdleCallback: { (handle: number): void, (handle: number): void }, captureEvents: { (): void, (): void }, close: { (): void, (): void, (): void }, confirm: { (message?: string): boolean, (message?: string): boolean }, focus: { (): void, (): void }, getComputedStyle: { (elt: Element, pseudoElt?: string): CSSStyleDeclaration, (elt: Element, pseudoElt?: string): CSSStyleDeclaration }, getSelection: { (): Selection, (): Selection }, matchMedia: { (query: string): MediaQueryList, (query: string): MediaQueryList }, moveBy: { (x: number, y: number): void, (x: number, y: number): void }, moveTo: { (x: number, y: number): void, (x: number, y: number): void }, open: { (url?: string | URL, target?: string, features?: string): Window, (url?: string | URL, target?: string, features?: string): Window }, postMessage: { (message: any, targetOrigin: string, transfer?: Transferable[]): void, (message: any, options?: WindowPostMessageOptions): void, (message: any, targetOrigin: string, transfer?: Transferable[]): void, (message: any, options?: WindowPostMessageOptions): void, (message: any, transfer: Transferable[]): void, (message: any, options?: StructuredSerializeOptions): void }, print: { (): void, (): void }, prompt: { (message?: string, _default?: string): string, (message?: string, _default?: string): string }, releaseEvents: { (): void, (): void }, requestIdleCallback: { (callback: IdleRequestCallback, options?: IdleRequestOptions): number, (callback: IdleRequestCallback, options?: IdleRequestOptions): number }, resizeBy: { (x: number, y: number): void, (x: number, y: number): void }, resizeTo: { (width: number, height: number): void, (width: number, height: number): void }, scroll: { (options?: ScrollToOptions): void, (x: number, y: number): void, (options?: ScrollToOptions): void, (x: number, y: number): void }, scrollBy: { (options?: ScrollToOptions): void, (x: number, y: number): void, (options?: ScrollToOptions): void, (x: number, y: number): void }, scrollTo: { (options?: ScrollToOptions): void, (x: number, y: number): void, (options?: ScrollToOptions): void, (x: number, y: number): void }, stop: { (): void, (): void }, toString: { (): string, (): string }, dispatchEvent: { (event: Event): boolean, (event: Event): boolean, (event: Event): boolean, (event: Event): boolean }, cancelAnimationFrame: { (handle: number): void, (handle: number): void, (handle: number): void }, requestAnimationFrame: { (callback: FrameRequestCallback): number, (callback: FrameRequestCallback): number, (callback: FrameRequestCallback): number }, onabort: (ev: UIEvent) => any, onanimationcancel: (ev: AnimationEvent) => any, onanimationend: (ev: AnimationEvent) => any, onanimationiteration: (ev: AnimationEvent) => any, onanimationstart: (ev: AnimationEvent) => any, onauxclick: (ev: MouseEvent) => any, onbeforeinput: (ev: InputEvent) => any, onbeforetoggle: (ev: Event) => any, onblur: (ev: FocusEvent) => any, oncancel: (ev: Event) => any, oncanplay: (ev: Event) => any, oncanplaythrough: (ev: Event) => any, onchange: (ev: Event) => any, onclick: (ev: MouseEvent) => any, onclose: (ev: Event) => any, oncontextlost: (ev: Event) => any, oncontextmenu: (ev: MouseEvent) => any, oncontextrestored: (ev: Event) => any, oncopy: (ev: ClipboardEvent) => any, oncuechange: (ev: Event) => any, oncut: (ev: ClipboardEvent) => any, ondblclick: (ev: MouseEvent) => any, ondrag: (ev: DragEvent) => any, ondragend: (ev: DragEvent) => any, ondragenter: (ev: DragEvent) => any, ondragleave: (ev: DragEvent) => any, ondragover: (ev: DragEvent) => any, ondragstart: (ev: DragEvent) => any, ondrop: (ev: DragEvent) => any, ondurationchange: (ev: Event) => any, onemptied: (ev: Event) => any, onended: (ev: Event) => any, onerror: OnErrorEventHandlerNonNull, onfocus: (ev: FocusEvent) => any, onformdata: (ev: FormDataEvent) => any, ongotpointercapture: (ev: PointerEvent) => any, oninput: (ev: Event) => any, oninvalid: (ev: Event) => any, onkeydown: (ev: KeyboardEvent) => any, onkeypress: (ev: KeyboardEvent) => any, onkeyup: (ev: KeyboardEvent) => any, onload: (ev: Event) => any, onloadeddata: (ev: Event) => any, onloadedmetadata: (ev: Event) => any, onloadstart: (ev: Event) => any, onlostpointercapture: (ev: PointerEvent) => any, onmousedown: (ev: MouseEvent) => any, onmouseenter: (ev: MouseEvent) => any, onmouseleave: (ev: MouseEvent) => any, onmousemove: (ev: MouseEvent) => any, onmouseout: (ev: MouseEvent) => any, onmouseover: (ev: MouseEvent) => any, onmouseup: (ev: MouseEvent) => any, onpaste: (ev: ClipboardEvent) => any, onpause: (ev: Event) => any, onplay: (ev: Event) => any, onplaying: (ev: Event) => any, onpointercancel: (ev: PointerEvent) => any, onpointerdown: (ev: PointerEvent) => any, onpointerenter: (ev: PointerEvent) => any, onpointerleave: (ev: PointerEvent) => any, onpointermove: (ev: PointerEvent) => any, onpointerout: (ev: PointerEvent) => any, onpointerover: (ev: PointerEvent) => any, onpointerup: (ev: PointerEvent) => any, onprogress: (ev: ProgressEvent<EventTarget>) => any, onratechange: (ev: Event) => any, onreset: (ev: Event) => any, onresize: (ev: UIEvent) => any, onscroll: (ev: Event) => any, onscrollend: (ev: Event) => any, onsecuritypolicyviolation: (ev: SecurityPolicyViolationEvent) => any, onseeked: (ev: Event) => any, onseeking: (ev: Event) => any, onselect: (ev: Event) => any, onselectionchange: (ev: Event) => any, onselectstart: (ev: Event) => any, onslotchange: (ev: Event) => any, onstalled: (ev: Event) => any, onsubmit: (ev: SubmitEvent) => any, onsuspend: (ev: Event) => any, ontimeupdate: (ev: Event) => any, ontoggle: (ev: Event) => any, ontouchcancel: (ev: TouchEvent) => any, ontouchend: (ev: TouchEvent) => any, ontouchmove: (ev: TouchEvent) => any, ontouchstart: (ev: TouchEvent) => any, ontransitioncancel: (ev: TransitionEvent) => any, ontransitionend: (ev: TransitionEvent) => any, ontransitionrun: (ev: TransitionEvent) => any, ontransitionstart: (ev: TransitionEvent) => any, onvolumechange: (ev: Event) => any, onwaiting: (ev: Event) => any, onwebkitanimationend: (ev: Event) => any, onwebkitanimationiteration: (ev: Event) => any, onwebkitanimationstart: (ev: Event) => any, onwebkittransitionend: (ev: Event) => any, onwheel: (ev: WheelEvent) => any, onafterprint: (ev: Event) => any, onbeforeprint: (ev: Event) => any, onbeforeunload: (ev: BeforeUnloadEvent) => any, ongamepadconnected: (ev: GamepadEvent) => any, ongamepaddisconnected: (ev: GamepadEvent) => any, onhashchange: (ev: HashChangeEvent) => any, onlanguagechange: (ev: Event) => any, onmessage: (ev: MessageEvent<any>) => any, onmessageerror: (ev: MessageEvent<any>) => any, onoffline: (ev: Event) => any, ononline: (ev: Event) => any, onpagehide: (ev: PageTransitionEvent) => any, onpageshow: (ev: PageTransitionEvent) => any, onpopstate: (ev: PopStateEvent) => any, onrejectionhandled: (ev: PromiseRejectionEvent) => any, onstorage: (ev: StorageEvent) => any, onunhandledrejection: (ev: PromiseRejectionEvent) => any, onunload: (ev: Event) => any, localStorage: Storage, caches: CacheStorage, crossOriginIsolated: boolean, crypto: Crypto, indexedDB: IDBFactory, isSecureContext: boolean, origin: string, performance: Performance, atob: { (data: string): string, (data: string): string, (data: string): string }, btoa: { (data: string): string, (data: string): string, (data: string): string }, clearInterval: { (id: number): void, (id: number): void, (id: number): void }, clearTimeout: { (id: number): void, (id: number): void, (id: number): void }, createImageBitmap: { (image: ImageBitmapSource, options?: ImageBitmapOptions): Promise<ImageBitmap>, (image: ImageBitmapSource, sx: number, sy: number, sw: number, sh: number, options?: ImageBitmapOptions): Promise<ImageBitmap>, (image: ImageBitmapSource, options?: ImageBitmapOptions): Promise<ImageBitmap>, (image: ImageBitmapSource, sx: number, sy: number, sw: number, sh: number, options?: ImageBitmapOptions): Promise<ImageBitmap>, (image: ImageBitmapSource, options?: ImageBitmapOptions): Promise<ImageBitmap>, (image: ImageBitmapSource, sx: number, sy: number, sw: number, sh: number, options?: ImageBitmapOptions): Promise<ImageBitmap> }, fetch: { (input: URL | RequestInfo, init?: RequestInit): Promise<Response>, (input: URL | RequestInfo, init?: RequestInit): Promise<Response>, (input: URL | RequestInfo, init?: RequestInit): Promise<Response> }, queueMicrotask: { (callback: VoidFunction): void, (callback: VoidFunction): void, (callback: VoidFunction): void }, reportError: { (e: any): void, (e: any): void, (e: any): void }, setInterval: { (handler: TimerHandler, timeout?: number, ...arguments: any[]): number, (handler: TimerHandler, timeout?: number, ...arguments: any[]): number, (handler: TimerHandler, timeout?: number, ...arguments: any[]): number }, setTimeout: { (handler: TimerHandler, timeout?: number, ...arguments: any[]): number, (handler: TimerHandler, timeout?: number, ...arguments: any[]): number, (handler: TimerHandler, timeout?: number, ...arguments: any[]): number }, structuredClone: { <T>(value: T, options?: StructuredSerializeOptions): T, <T>(value: T, options?: StructuredSerializeOptions): T, <T>(value: T, options?: StructuredSerializeOptions): T }, sessionStorage: Storage, addEventListener: { <K>(type: K, listener: (ev: WindowEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void, (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void, <K>(type: K, listener: (ev: WindowEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void, (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void, <K>(type: K, listener: (ev: DedicatedWorkerGlobalScopeEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void, (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void }, removeEventListener: { <K>(type: K, listener: (ev: WindowEventMap[K]) => any, options?: boolean | EventListenerOptions): void, (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void, <K>(type: K, listener: (ev: WindowEventMap[K]) => any, options?: boolean | EventListenerOptions): void, (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void, <K>(type: K, listener: (ev: DedicatedWorkerGlobalScopeEventMap[K]) => any, options?: boolean | EventListenerOptions): void, (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void }, readonly globalThis: ???, undefined: undefined }'.
/lib/lib.webworker.d.ts(9555,5): error TS2300: Duplicate identifier 'AlgorithmIdentifier'.
/lib/lib.webworker.d.ts(9556,5): error TS2300: Duplicate identifier 'AllowSharedBufferSource'.
/lib/lib.webworker.d.ts(9557,5): error TS2300: Duplicate identifier 'BigInteger'.
/lib/lib.webworker.d.ts(9558,5): error TS2300: Duplicate identifier 'BlobPart'.
/lib/lib.webworker.d.ts(9559,5): error TS2300: Duplicate identifier 'BodyInit'.
/lib/lib.webworker.d.ts(9560,5): error TS2300: Duplicate identifier 'BufferSource'.
/lib/lib.webworker.d.ts(9561,5): error TS2300: Duplicate identifier 'CSSKeywordish'.
/lib/lib.webworker.d.ts(9562,5): error TS2300: Duplicate identifier 'CSSNumberish'.
/lib/lib.webworker.d.ts(9563,5): error TS2300: Duplicate identifier 'CSSPerspectiveValue'.
/lib/lib.webworker.d.ts(9564,5): error TS2300: Duplicate identifier 'CSSUnparsedSegment'.
/lib/lib.webworker.d.ts(9565,5): error TS2300: Duplicate identifier 'CanvasImageSource'.
/lib/lib.webworker.d.ts(9566,5): error TS2300: Duplicate identifier 'DOMHighResTimeStamp'.
/lib/lib.webworker.d.ts(9567,5): error TS2300: Duplicate identifier 'EpochTimeStamp'.
/lib/lib.webworker.d.ts(9568,5): error TS2300: Duplicate identifier 'EventListenerOrEventListenerObject'.
/lib/lib.webworker.d.ts(9569,5): error TS2300: Duplicate identifier 'FileSystemWriteChunkType'.
/lib/lib.webworker.d.ts(9570,5): error TS2300: Duplicate identifier 'Float32List'.
/lib/lib.webworker.d.ts(9571,5): error TS2300: Duplicate identifier 'FormDataEntryValue'.
/lib/lib.webworker.d.ts(9572,5): error TS2300: Duplicate identifier 'GLbitfield'.
/lib/lib.webworker.d.ts(9573,5): error TS2300: Duplicate identifier 'GLboolean'.
/lib/lib.webworker.d.ts(9574,5): error TS2300: Duplicate identifier 'GLclampf'.
/lib/lib.webworker.d.ts(9575,5): error TS2300: Duplicate identifier 'GLenum'.
/lib/lib.webworker.d.ts(9576,5): error TS2300: Duplicate identifier 'GLfloat'.
/lib/lib.webworker.d.ts(9577,5): error TS2300: Duplicate identifier 'GLint'.
/lib/lib.webworker.d.ts(9578,5): error TS2300: Duplicate identifier 'GLint64'.
/lib/lib.webworker.d.ts(9579,5): error TS2300: Duplicate identifier 'GLintptr'.
/lib/lib.webworker.d.ts(9580,5): error TS2300: Duplicate identifier 'GLsizei'.
/lib/lib.webworker.d.ts(9581,5): error TS2300: Duplicate identifier 'GLsizeiptr'.
/lib/lib.webworker.d.ts(9582,5): error TS2300: Duplicate identifier 'GLuint'.
/lib/lib.webworker.d.ts(9583,5): error TS2300: Duplicate identifier 'GLuint64'.
/lib/lib.webworker.d.ts(9584,5): error TS2300: Duplicate identifier 'HashAlgorithmIdentifier'.
/lib/lib.webworker.d.ts(9585,5): error TS2300: Duplicate identifier 'HeadersInit'.
/lib/lib.webworker.d.ts(9586,5): error TS2300: Duplicate identifier 'IDBValidKey'.
/lib/lib.webworker.d.ts(9587,5): error TS2300: Duplicate identifier 'ImageBitmapSource'.
/lib/lib.webworker.d.ts(9588,5): error TS2300: Duplicate identifier 'Int32List'.
/lib/lib.webworker.d.ts(9589,5): error TS2300: Duplicate identifier 'MessageEventSource'.
/lib/lib.webworker.d.ts(9590,5): error TS2300: Duplicate identifier 'NamedCurve'.
/lib/lib.webworker.d.ts(9591,5): error TS2300: Duplicate identifier 'OffscreenRenderingContext'.
/lib/lib.webworker.d.ts(9592,5): error TS2300: Duplicate identifier 'OnErrorEventHandler'.
/lib/lib.webworker.d.ts(9593,5): error TS2300: Duplicate identifier 'PerformanceEntryList'.
/lib/lib.webworker.d.ts(9595,5): error TS2300: Duplicate identifier 'ReadableStreamController'.
/lib/lib.webworker.d.ts(9596,5): error TS2300: Duplicate identifier 'ReadableStreamReadResult'.
/lib/lib.webworker.d.ts(9597,5): error TS2300: Duplicate identifier 'ReadableStreamReader'.
/lib/lib.webworker.d.ts(9598,5): error TS2300: Duplicate identifier 'ReportList'.
/lib/lib.webworker.d.ts(9599,5): error TS2300: Duplicate identifier 'RequestInfo'.
/lib/lib.webworker.d.ts(9600,5): error TS2300: Duplicate identifier 'TexImageSource'.
/lib/lib.webworker.d.ts(9601,5): error TS2300: Duplicate identifier 'TimerHandler'.
/lib/lib.webworker.d.ts(9602,5): error TS2300: Duplicate identifier 'Transferable'.
/lib/lib.webworker.d.ts(9603,5): error TS2300: Duplicate identifier 'Uint32List'.
/lib/lib.webworker.d.ts(9604,5): error TS2300: Duplicate identifier 'XMLHttpRequestBodyInit'.
/lib/lib.webworker.d.ts(9605,5): error TS2300: Duplicate identifier 'AlphaOption'.
/lib/lib.webworker.d.ts(9606,5): error TS2300: Duplicate identifier 'AudioSampleFormat'.
/lib/lib.webworker.d.ts(9607,5): error TS2300: Duplicate identifier 'AvcBitstreamFormat'.
/lib/lib.webworker.d.ts(9608,5): error TS2300: Duplicate identifier 'BinaryType'.
/lib/lib.webworker.d.ts(9609,5): error TS2300: Duplicate identifier 'BitrateMode'.
/lib/lib.webworker.d.ts(9610,5): error TS2300: Duplicate identifier 'CSSMathOperator'.
/lib/lib.webworker.d.ts(9611,5): error TS2300: Duplicate identifier 'CSSNumericBaseType'.
/lib/lib.webworker.d.ts(9612,5): error TS2300: Duplicate identifier 'CanvasDirection'.
/lib/lib.webworker.d.ts(9613,5): error TS2300: Duplicate identifier 'CanvasFillRule'.
/lib/lib.webworker.d.ts(9614,5): error TS2300: Duplicate identifier 'CanvasFontKerning'.
/lib/lib.webworker.d.ts(9615,5): error TS2300: Duplicate identifier 'CanvasFontStretch'.
/lib/lib.webworker.d.ts(9616,5): error TS2300: Duplicate identifier 'CanvasFontVariantCaps'.
/lib/lib.webworker.d.ts(9617,5): error TS2300: Duplicate identifier 'CanvasLineCap'.
/lib/lib.webworker.d.ts(9618,5): error TS2300: Duplicate identifier 'CanvasLineJoin'.
/lib/lib.webworker.d.ts(9619,5): error TS2300: Duplicate identifier 'CanvasTextAlign'.
/lib/lib.webworker.d.ts(9620,5): error TS2300: Duplicate identifier 'CanvasTextBaseline'.
/lib/lib.webworker.d.ts(9621,5): error TS2300: Duplicate identifier 'CanvasTextRendering'.
/lib/lib.webworker.d.ts(9622,5): error TS2300: Duplicate identifier 'ClientTypes'.
/lib/lib.webworker.d.ts(9623,5): error TS2300: Duplicate identifier 'CodecState'.
/lib/lib.webworker.d.ts(9624,5): error TS2300: Duplicate identifier 'ColorGamut'.
/lib/lib.webworker.d.ts(9625,5): error TS2300: Duplicate identifier 'ColorSpaceConversion'.
/lib/lib.webworker.d.ts(9626,5): error TS2300: Duplicate identifier 'CompressionFormat'.
/lib/lib.webworker.d.ts(9627,5): error TS2300: Duplicate identifier 'DocumentVisibilityState'.
/lib/lib.webworker.d.ts(9628,5): error TS2300: Duplicate identifier 'EncodedAudioChunkType'.
/lib/lib.webworker.d.ts(9629,5): error TS2300: Duplicate identifier 'EncodedVideoChunkType'.
/lib/lib.webworker.d.ts(9630,5): error TS2300: Duplicate identifier 'EndingType'.
/lib/lib.webworker.d.ts(9631,5): error TS2300: Duplicate identifier 'FileSystemHandleKind'.
/lib/lib.webworker.d.ts(9632,5): error TS2300: Duplicate identifier 'FontDisplay'.
/lib/lib.webworker.d.ts(9633,5): error TS2300: Duplicate identifier 'FontFaceLoadStatus'.
/lib/lib.webworker.d.ts(9634,5): error TS2300: Duplicate identifier 'FontFaceSetLoadStatus'.
/lib/lib.webworker.d.ts(9636,5): error TS2300: Duplicate identifier 'GlobalCompositeOperation'.
/lib/lib.webworker.d.ts(9637,5): error TS2300: Duplicate identifier 'HardwareAcceleration'.
/lib/lib.webworker.d.ts(9638,5): error TS2300: Duplicate identifier 'HdrMetadataType'.
/lib/lib.webworker.d.ts(9639,5): error TS2300: Duplicate identifier 'IDBCursorDirection'.
/lib/lib.webworker.d.ts(9640,5): error TS2300: Duplicate identifier 'IDBRequestReadyState'.
/lib/lib.webworker.d.ts(9641,5): error TS2300: Duplicate identifier 'IDBTransactionDurability'.
/lib/lib.webworker.d.ts(9642,5): error TS2300: Duplicate identifier 'IDBTransactionMode'.
/lib/lib.webworker.d.ts(9643,5): error TS2300: Duplicate identifier 'ImageOrientation'.
/lib/lib.webworker.d.ts(9644,5): error TS2300: Duplicate identifier 'ImageSmoothingQuality'.
/lib/lib.webworker.d.ts(9645,5): error TS2300: Duplicate identifier 'KeyFormat'.
/lib/lib.webworker.d.ts(9646,5): error TS2300: Duplicate identifier 'KeyType'.
/lib/lib.webworker.d.ts(9647,5): error TS2300: Duplicate identifier 'KeyUsage'.
/lib/lib.webworker.d.ts(9648,5): error TS2300: Duplicate identifier 'LatencyMode'.
/lib/lib.webworker.d.ts(9649,5): error TS2300: Duplicate identifier 'LockMode'.
/lib/lib.webworker.d.ts(9650,5): error TS2300: Duplicate identifier 'MediaDecodingType'.
/lib/lib.webworker.d.ts(9651,5): error TS2300: Duplicate identifier 'MediaEncodingType'.
/lib/lib.webworker.d.ts(9652,5): error TS2300: Duplicate identifier 'NotificationDirection'.
/lib/lib.webworker.d.ts(9653,5): error TS2300: Duplicate identifier 'NotificationPermission'.
/lib/lib.webworker.d.ts(9654,5): error TS2300: Duplicate identifier 'OffscreenRenderingContextId'.
/lib/lib.webworker.d.ts(9655,5): error TS2300: Duplicate identifier 'OpusBitstreamFormat'.
/lib/lib.webworker.d.ts(9656,5): error TS2300: Duplicate identifier 'PermissionName'.
/lib/lib.webworker.d.ts(9657,5): error TS2300: Duplicate identifier 'PermissionState'.
/lib/lib.webworker.d.ts(9658,5): error TS2300: Duplicate identifier 'PredefinedColorSpace'.
/lib/lib.webworker.d.ts(9659,5): error TS2300: Duplicate identifier 'PremultiplyAlpha'.
/lib/lib.webworker.d.ts(9660,5): error TS2300: Duplicate identifier 'PushEncryptionKeyName'.
/lib/lib.webworker.d.ts(9661,5): error TS2300: Duplicate identifier 'RTCEncodedVideoFrameType'.
/lib/lib.webworker.d.ts(9662,5): error TS2300: Duplicate identifier 'ReadableStreamReaderMode'.
/lib/lib.webworker.d.ts(9663,5): error TS2300: Duplicate identifier 'ReadableStreamType'.
/lib/lib.webworker.d.ts(9664,5): error TS2300: Duplicate identifier 'ReferrerPolicy'.
/lib/lib.webworker.d.ts(9665,5): error TS2300: Duplicate identifier 'RequestCache'.
/lib/lib.webworker.d.ts(9666,5): error TS2300: Duplicate identifier 'RequestCredentials'.
/lib/lib.webworker.d.ts(9667,5): error TS2300: Duplicate identifier 'RequestDestination'.
/lib/lib.webworker.d.ts(9668,5): error TS2300: Duplicate identifier 'RequestMode'.
/lib/lib.webworker.d.ts(9669,5): error TS2300: Duplicate identifier 'RequestPriority'.
/lib/lib.webworker.d.ts(9670,5): error TS2300: Duplicate identifier 'RequestRedirect'.
/lib/lib.webworker.d.ts(9671,5): error TS2300: Duplicate identifier 'ResizeQuality'.
/lib/lib.webworker.d.ts(9672,5): error TS2300: Duplicate identifier 'ResponseType'.
/lib/lib.webworker.d.ts(9673,5): error TS2300: Duplicate identifier 'SecurityPolicyViolationEventDisposition'.
/lib/lib.webworker.d.ts(9674,5): error TS2300: Duplicate identifier 'ServiceWorkerState'.
/lib/lib.webworker.d.ts(9675,5): error TS2300: Duplicate identifier 'ServiceWorkerUpdateViaCache'.
/lib/lib.webworker.d.ts(9676,5): error TS2300: Duplicate identifier 'TransferFunction'.
/lib/lib.webworker.d.ts(9677,5): error TS2300: Duplicate identifier 'VideoColorPrimaries'.
/lib/lib.webworker.d.ts(9678,5): error TS2300: Duplicate identifier 'VideoEncoderBitrateMode'.
/lib/lib.webworker.d.ts(9679,5): error TS2300: Duplicate identifier 'VideoMatrixCoefficients'.
/lib/lib.webworker.d.ts(9680,5): error TS2300: Duplicate identifier 'VideoPixelFormat'.
/lib/lib.webworker.d.ts(9681,5): error TS2300: Duplicate identifier 'VideoTransferCharacteristics'.
/lib/lib.webworker.d.ts(9682,5): error TS2300: Duplicate identifier 'WebGLPowerPreference'.
/lib/lib.webworker.d.ts(9683,5): error TS2300: Duplicate identifier 'WebTransportCongestionControl'.
/lib/lib.webworker.d.ts(9684,5): error TS2300: Duplicate identifier 'WebTransportErrorSource'.
/lib/lib.webworker.d.ts(9685,5): error TS2300: Duplicate identifier 'WorkerType'.
/lib/lib.webworker.d.ts(9686,5): error TS2300: Duplicate identifier 'WriteCommandType'.
/lib/lib.webworker.d.ts(9687,5): error TS2300: Duplicate identifier 'XMLHttpRequestResponseType'.
/src/bar.ts(1,7): error TS2322: Type '1' is not assignable to type 'string'.
/src/foo.ts(1,7): error TS2322: Type '""' is not assignable to type 'number'.
bundled:libs/lib.decorators.d.ts(22,5): error TS2300: Duplicate identifier 'ClassMemberDecoratorContext'.
bundled:libs/lib.decorators.d.ts(32,5): error TS2300: Duplicate identifier 'DecoratorContext'.
bundled:libs/lib.decorators.d.ts(36,5): error TS2300: Duplicate identifier 'DecoratorMetadataObject'.
bundled:libs/lib.decorators.d.ts(38,5): error TS2300: Duplicate identifier 'DecoratorMetadata'.
bundled:libs/lib.decorators.legacy.d.ts(19,13): error TS2300: Duplicate identifier 'ClassDecorator'.
bundled:libs/lib.decorators.legacy.d.ts(20,13): error TS2300: Duplicate identifier 'PropertyDecorator'.
bundled:libs/lib.decorators.legacy.d.ts(21,13): error TS2300: Duplicate identifier 'MethodDecorator'.
bundled:libs/lib.decorators.legacy.d.ts(22,13): error TS2300: Duplicate identifier 'ParameterDecorator'.
bundled:libs/lib.dom.d.ts(2189,5): error TS2300: Duplicate identifier 'NodeFilter'.
bundled:libs/lib.dom.d.ts(2191,12): error TS2300: Duplicate identifier 'NodeFilter'.
bundled:libs/lib.dom.d.ts(2210,5): error TS2300: Duplicate identifier 'XPathNSResolver'.
bundled:libs/lib.dom.d.ts(6213,5): error TS2300: Duplicate identifier 'SVGMatrix'.
bundled:libs/lib.dom.d.ts(6214,12): error TS2300: Duplicate identifier 'SVGMatrix'.
bundled:libs/lib.dom.d.ts(6216,5): error TS2300: Duplicate identifier 'WebKitCSSMatrix'.
bundled:libs/lib.dom.d.ts(6217,12): error TS2300: Duplicate identifier 'WebKitCSSMatrix'.
bundled:libs/lib.dom.d.ts(6321,5): error TS2300: Duplicate identifier 'SVGPoint'.
bundled:libs/lib.dom.d.ts(6322,12): error TS2300: Duplicate identifier 'SVGPoint'.
bundled:libs/lib.dom.d.ts(6378,5): error TS2300: Duplicate identifier 'SVGRect'.
bundled:libs/lib.dom.d.ts(6379,12): error TS2300: Duplicate identifier 'SVGRect'.
bundled:libs/lib.dom.d.ts(7040,8): error TS2300: Duplicate identifier 'location'.
bundled:libs/lib.dom.d.ts(7041,8): error TS2300: Duplicate identifier 'location'.
bundled:libs/lib.dom.d.ts(22386,5): error TS2300: Duplicate identifier 'webkitURL'.
bundled:libs/lib.dom.d.ts(22387,12): error TS2300: Duplicate identifier 'webkitURL'.
bundled:libs/lib.dom.d.ts(25450,8): error TS2300: Duplicate identifier 'location'.
bundled:libs/lib.dom.d.ts(25451,8): error TS2300: Duplicate identifier 'location'.
bundled:libs/lib.dom.d.ts(26583,9): error TS2300: Duplicate identifier 'ImportExportKind'.
bundled:libs/lib.dom.d.ts(26583,9): error TS2300: Duplicate identifier 'ImportExportKind'.
bundled:libs/lib.dom.d.ts(26584,9): error TS2300: Duplicate identifier 'TableKind'.
bundled:libs/lib.dom.d.ts(26584,9): error TS2300: Duplicate identifier 'TableKind'.
bundled:libs/lib.dom.d.ts(26585,9): error TS2300: Duplicate identifier 'ExportValue'.
bundled:libs/lib.dom.d.ts(26585,9): error TS2300: Duplicate identifier 'ExportValue'.
bundled:libs/lib.dom.d.ts(26586,9): error TS2300: Duplicate identifier 'Exports'.
bundled:libs/lib.dom.d.ts(26586,9): error TS2300: Duplicate identifier 'Exports'.
bundled:libs/lib.dom.d.ts(26587,9): error TS2300: Duplicate identifier 'ImportValue'.
bundled:libs/lib.dom.d.ts(26587,9): error TS2300: Duplicate identifier 'ImportValue'.
bundled:libs/lib.dom.d.ts(26588,9): error TS2300: Duplicate identifier 'Imports'.
bundled:libs/lib.dom.d.ts(26588,9): error TS2300: Duplicate identifier 'Imports'.
bundled:libs/lib.dom.d.ts(26589,9): error TS2300: Duplicate identifier 'ModuleImports'.
bundled:libs/lib.dom.d.ts(26589,9): error TS2300: Duplicate identifier 'ModuleImports'.
bundled:libs/lib.dom.d.ts(26590,9): error TS2300: Duplicate identifier 'ValueType'.
bundled:libs/lib.dom.d.ts(26590,9): error TS2300: Duplicate identifier 'ValueType'.
bundled:libs/lib.dom.d.ts(27023,5): error TS2300: Duplicate identifier 'ElementTagNameMap'.
bundled:libs/lib.dom.d.ts(27096,14): error TS2451: Cannot redeclare block-scoped variable 'name'.
bundled:libs/lib.dom.d.ts(27096,14): error TS2451: Cannot redeclare block-scoped variable 'name'.
bundled:libs/lib.dom.d.ts(27835,5): error TS2300: Duplicate identifier 'AlgorithmIdentifier'.
bundled:libs/lib.dom.d.ts(27835,5): error TS2300: Duplicate identifier 'AlgorithmIdentifier'.
bundled:libs/lib.dom.d.ts(27836,5): error TS2300: Duplicate identifier 'AllowSharedBufferSource'.
bundled:libs/lib.dom.d.ts(27836,5): error TS2300: Duplicate identifier 'AllowSharedBufferSource'.
bundled:libs/lib.dom.d.ts(27837,5): error TS2300: Duplicate identifier 'AutoFill'.
bundled:libs/lib.dom.d.ts(27838,5): error TS2300: Duplicate identifier 'AutoFillField'.
bundled:libs/lib.dom.d.ts(27839,5): error TS2300: Duplicate identifier 'AutoFillSection'.
bundled:libs/lib.dom.d.ts(27840,5): error TS2300: Duplicate identifier 'BigInteger'.
bundled:libs/lib.dom.d.ts(27840,5): error TS2300: Duplicate identifier 'BigInteger'.
bundled:libs/lib.dom.d.ts(27842,5): error TS2300: Duplicate identifier 'BlobPart'.
bundled:libs/lib.dom.d.ts(27842,5): error TS2300: Duplicate identifier 'BlobPart'.
bundled:libs/lib.dom.d.ts(27843,5): error TS2300: Duplicate identifier 'BodyInit'.
bundled:libs/lib.dom.d.ts(27843,5): error TS2300: Duplicate identifier 'BodyInit'.
bundled:libs/lib.dom.d.ts(27844,5): error TS2300: Duplicate identifier 'BufferSource'.
bundled:libs/lib.dom.d.ts(27844,5): error TS2300: Duplicate identifier 'BufferSource'.
bundled:libs/lib.dom.d.ts(27845,5): error TS2300: Duplicate identifier 'COSEAlgorithmIdentifier'.
bundled:libs/lib.dom.d.ts(27846,5): error TS2300: Duplicate identifier 'CSSKeywordish'.
bundled:libs/lib.dom.d.ts(27846,5): error TS2300: Duplicate identifier 'CSSKeywordish'.
bundled:libs/lib.dom.d.ts(27847,5): error TS2300: Duplicate identifier 'CSSNumberish'.
bundled:libs/lib.dom.d.ts(27847,5): error TS2300: Duplicate identifier 'CSSNumberish'.
bundled:libs/lib.dom.d.ts(27848,5): error TS2300: Duplicate identifier 'CSSPerspectiveValue'.
bundled:libs/lib.dom.d.ts(27848,5): error TS2300: Duplicate identifier 'CSSPerspectiveValue'.
bundled:libs/lib.dom.d.ts(27849,5): error TS2300: Duplicate identifier 'CSSUnparsedSegment'.
bundled:libs/lib.dom.d.ts(27849,5): error TS2300: Duplicate identifier 'CSSUnparsedSegment'.
bundled:libs/lib.dom.d.ts(27850,5): error TS2300: Duplicate identifier 'CanvasImageSource'.
bundled:libs/lib.dom.d.ts(27850,5): error TS2300: Duplicate identifier 'CanvasImageSource'.
bundled:libs/lib.dom.d.ts(27851,5): error TS2300: Duplicate identifier 'ClipboardItemData'.
bundled:libs/lib.dom.d.ts(27852,5): error TS2300: Duplicate identifier 'ClipboardItems'.
bundled:libs/lib.dom.d.ts(27853,5): error TS2300: Duplicate identifier 'ConstrainBoolean'.
bundled:libs/lib.dom.d.ts(27854,5): error TS2300: Duplicate identifier 'ConstrainDOMString'.
bundled:libs/lib.dom.d.ts(27855,5): error TS2300: Duplicate identifier 'ConstrainDouble'.
bundled:libs/lib.dom.d.ts(27856,5): error TS2300: Duplicate identifier 'ConstrainULong'.
bundled:libs/lib.dom.d.ts(27857,5): error TS2300: Duplicate identifier 'DOMHighResTimeStamp'.
bundled:libs/lib.dom.d.ts(27857,5): error TS2300: Duplicate identifier 'DOMHighResTimeStamp'.
bundled:libs/lib.dom.d.ts(27858,5): error TS2300: Duplicate identifier 'EpochTimeStamp'.
bundled:libs/lib.dom.d.ts(27858,5): error TS2300: Duplicate identifier 'EpochTimeStamp'.
bundled:libs/lib.dom.d.ts(27859,5): error TS2300: Duplicate identifier 'EventListenerOrEventListenerObject'.
bundled:libs/lib.dom.d.ts(27859,5): error TS2300: Duplicate identifier 'EventListenerOrEventListenerObject'.
bundled:libs/lib.dom.d.ts(27860,5): error TS2300: Duplicate identifier 'FileSystemWriteChunkType'.
bundled:libs/lib.dom.d.ts(27860,5): error TS2300: Duplicate identifier 'FileSystemWriteChunkType'.
bundled:libs/lib.dom.d.ts(27861,5): error TS2300: Duplicate identifier 'Float32List'.
bundled:libs/lib.dom.d.ts(27861,5): error TS2300: Duplicate identifier 'Float32List'.
bundled:libs/lib.dom.d.ts(27862,5): error TS2300: Duplicate identifier 'FormDataEntryValue'.
bundled:libs/lib.dom.d.ts(27862,5): error TS2300: Duplicate identifier 'FormDataEntryValue'.
bundled:libs/lib.dom.d.ts(27863,5): error TS2300: Duplicate identifier 'GLbitfield'.
bundled:libs/lib.dom.d.ts(27863,5): error TS2300: Duplicate identifier 'GLbitfield'.
bundled:libs/lib.dom.d.ts(27864,5): error TS2300: Duplicate identifier 'GLboolean'.
bundled:libs/lib.dom.d.ts(27864,5): error TS2300: Duplicate identifier 'GLboolean'.
bundled:libs/lib.dom.d.ts(27865,5): error TS2300: Duplicate identifier 'GLclampf'.
bundled:libs/lib.dom.d.ts(27865,5): error TS2300: Duplicate identifier 'GLclampf'.
bundled:libs/lib.dom.d.ts(27866,5): error TS2300: Duplicate identifier 'GLenum'.
bundled:libs/lib.dom.d.ts(27866,5): error TS2300: Duplicate identifier 'GLenum'.
bundled:libs/lib.dom.d.ts(27867,5): error TS2300: Duplicate identifier 'GLfloat'.
bundled:libs/lib.dom.d.ts(27867,5): error TS2300: Duplicate identifier 'GLfloat'.
bundled:libs/lib.dom.d.ts(27868,5): error TS2300: Duplicate identifier 'GLint'.
bundled:libs/lib.dom.d.ts(27868,5): error TS2300: Duplicate identifier 'GLint'.
bundled:libs/lib.dom.d.ts(27869,5): error TS2300: Duplicate identifier 'GLint64'.
bundled:libs/lib.dom.d.ts(27869,5): error TS2300: Duplicate identifier 'GLint64'.
bundled:libs/lib.dom.d.ts(27870,5): error TS2300: Duplicate identifier 'GLintptr'.
bundled:libs/lib.dom.d.ts(27870,5): error TS2300: Duplicate identifier 'GLintptr'.
bundled:libs/lib.dom.d.ts(27871,5): error TS2300: Duplicate identifier 'GLsizei'.
bundled:libs/lib.dom.d.ts(27871,5): error TS2300: Duplicate identifier 'GLsizei'.
bundled:libs/lib.dom.d.ts(27872,5): error TS2300: Duplicate identifier 'GLsizeiptr'.
bundled:libs/lib.dom.d.ts(27872,5): error TS2300: Duplicate identifier 'GLsizeiptr'.
bundled:libs/lib.dom.d.ts(27873,5): error TS2300: Duplicate identifier 'GLuint'.
bundled:libs/lib.dom.d.ts(27873,5): error TS2300: Duplicate identifier 'GLuint'.
bundled:libs/lib.dom.d.ts(27874,5): error TS2300: Duplicate identifier 'GLuint64'.
bundled:libs/lib.dom.d.ts(27874,5): error TS2300: Duplicate identifier 'GLuint64'.
bundled:libs/lib.dom.d.ts(27875,5): error TS2300: Duplicate identifier 'HTMLOrSVGImageElement'.
bundled:libs/lib.dom.d.ts(27876,5): error TS2300: Duplicate identifier 'HTMLOrSVGScriptElement'.
bundled:libs/lib.dom.d.ts(27877,5): error TS2300: Duplicate identifier 'HashAlgorithmIdentifier'.
bundled:libs/lib.dom.d.ts(27877,5): error TS2300: Duplicate identifier 'HashAlgorithmIdentifier'.
bundled:libs/lib.dom.d.ts(27878,5): error TS2300: Duplicate identifier 'HeadersInit'.
bundled:libs/lib.dom.d.ts(27878,5): error TS2300: Duplicate identifier 'HeadersInit'.
bundled:libs/lib.dom.d.ts(27879,5): error TS2300: Duplicate identifier 'IDBValidKey'.
bundled:libs/lib.dom.d.ts(27879,5): error TS2300: Duplicate identifier 'IDBValidKey'.
bundled:libs/lib.dom.d.ts(27880,5): error TS2300: Duplicate identifier 'ImageBitmapSource'.
bundled:libs/lib.dom.d.ts(27880,5): error TS2300: Duplicate identifier 'ImageBitmapSource'.
bundled:libs/lib.dom.d.ts(27881,5): error TS2300: Duplicate identifier 'Int32List'.
bundled:libs/lib.dom.d.ts(27881,5): error TS2300: Duplicate identifier 'Int32List'.
bundled:libs/lib.dom.d.ts(27882,5): error TS2300: Duplicate identifier 'LineAndPositionSetting'.
bundled:libs/lib.dom.d.ts(27883,5): error TS2300: Duplicate identifier 'MediaProvider'.
bundled:libs/lib.dom.d.ts(27884,5): error TS2300: Duplicate identifier 'MessageEventSource'.
bundled:libs/lib.dom.d.ts(27884,5): error TS2300: Duplicate identifier 'MessageEventSource'.
bundled:libs/lib.dom.d.ts(27885,5): error TS2300: Duplicate identifier 'MutationRecordType'.
bundled:libs/lib.dom.d.ts(27886,5): error TS2300: Duplicate identifier 'NamedCurve'.
bundled:libs/lib.dom.d.ts(27886,5): error TS2300: Duplicate identifier 'NamedCurve'.
bundled:libs/lib.dom.d.ts(27887,5): error TS2300: Duplicate identifier 'OffscreenRenderingContext'.
bundled:libs/lib.dom.d.ts(27887,5): error TS2300: Duplicate identifier 'OffscreenRenderingContext'.
bundled:libs/lib.dom.d.ts(27888,5): error TS2300: Duplicate identifier 'OnBeforeUnloadEventHandler'.
bundled:libs/lib.dom.d.ts(27889,5): error TS2300: Duplicate identifier 'OnErrorEventHandler'.
bundled:libs/lib.dom.d.ts(27889,5): error TS2300: Duplicate identifier 'OnErrorEventHandler'.
bundled:libs/lib.dom.d.ts(27890,5): error TS2300: Duplicate identifier 'OptionalPostfixToken'.
bundled:libs/lib.dom.d.ts(27891,5): error TS2300: Duplicate identifier 'OptionalPrefixToken'.
bundled:libs/lib.dom.d.ts(27892,5): error TS2300: Duplicate identifier 'PerformanceEntryList'.
bundled:libs/lib.dom.d.ts(27892,5): error TS2300: Duplicate identifier 'PerformanceEntryList'.
bundled:libs/lib.dom.d.ts(27893,5): error TS2300: Duplicate identifier 'RTCRtpTransform'.
bundled:libs/lib.dom.d.ts(27894,5): error TS2300: Duplicate identifier 'ReadableStreamController'.
bundled:libs/lib.dom.d.ts(27894,5): error TS2300: Duplicate identifier 'ReadableStreamController'.
bundled:libs/lib.dom.d.ts(27895,5): error TS2300: Duplicate identifier 'ReadableStreamReadResult'.
bundled:libs/lib.dom.d.ts(27895,5): error TS2300: Duplicate identifier 'ReadableStreamReadResult'.
bundled:libs/lib.dom.d.ts(27896,5): error TS2300: Duplicate identifier 'ReadableStreamReader'.
bundled:libs/lib.dom.d.ts(27896,5): error TS2300: Duplicate identifier 'ReadableStreamReader'.
bundled:libs/lib.dom.d.ts(27897,5): error TS2300: Duplicate identifier 'RenderingContext'.
bundled:libs/lib.dom.d.ts(27898,5): error TS2300: Duplicate identifier 'ReportList'.
bundled:libs/lib.dom.d.ts(27898,5): error TS2300: Duplicate identifier 'ReportList'.
bundled:libs/lib.dom.d.ts(27899,5): error TS2300: Duplicate identifier 'RequestInfo'.
bundled:libs/lib.dom.d.ts(27899,5): error TS2300: Duplicate identifier 'RequestInfo'.
bundled:libs/lib.dom.d.ts(27900,5): error TS2300: Duplicate identifier 'TexImageSource'.
bundled:libs/lib.dom.d.ts(27900,5): error TS2300: Duplicate identifier 'TexImageSource'.
bundled:libs/lib.dom.d.ts(27901,5): error TS2300: Duplicate identifier 'TimerHandler'.
bundled:libs/lib.dom.d.ts(27901,5): error TS2300: Duplicate identifier 'TimerHandler'.
bundled:libs/lib.dom.d.ts(27902,5): error TS2300: Duplicate identifier 'Transferable'.
bundled:libs/lib.dom.d.ts(27902,5): error TS2300: Duplicate identifier 'Transferable'.
bundled:libs/lib.dom.d.ts(27903,5): error TS2300: Duplicate identifier 'Uint32List'.
bundled:libs/lib.dom.d.ts(27903,5): error TS2300: Duplicate identifier 'Uint32List'.
bundled:libs/lib.dom.d.ts(27904,5): error TS2300: Duplicate identifier 'VibratePattern'.
bundled:libs/lib.dom.d.ts(27905,5): error TS2300: Duplicate identifier 'WindowProxy'.
bundled:libs/lib.dom.d.ts(27906,5): error TS2300: Duplicate identifier 'XMLHttpRequestBodyInit'.
bundled:libs/lib.dom.d.ts(27906,5): error TS2300: Duplicate identifier 'XMLHttpRequestBodyInit'.
bundled:libs/lib.dom.d.ts(27907,5): error TS2300: Duplicate identifier 'AlignSetting'.
bundled:libs/lib.dom.d.ts(27908,5): error TS2300: Duplicate identifier 'AlphaOption'.
bundled:libs/lib.dom.d.ts(27908,5): error TS2300: Duplicate identifier 'AlphaOption'.
bundled:libs/lib.dom.d.ts(27909,5): error TS2300: Duplicate identifier 'AnimationPlayState'.
bundled:libs/lib.dom.d.ts(27910,5): error TS2300: Duplicate identifier 'AnimationReplaceState'.
bundled:libs/lib.dom.d.ts(27911,5): error TS2300: Duplicate identifier 'AppendMode'.
bundled:libs/lib.dom.d.ts(27912,5): error TS2300: Duplicate identifier 'AttestationConveyancePreference'.
bundled:libs/lib.dom.d.ts(27913,5): error TS2300: Duplicate identifier 'AudioContextLatencyCategory'.
bundled:libs/lib.dom.d.ts(27914,5): error TS2300: Duplicate identifier 'AudioContextState'.
bundled:libs/lib.dom.d.ts(27915,5): error TS2300: Duplicate identifier 'AuthenticatorAttachment'.
bundled:libs/lib.dom.d.ts(27916,5): error TS2300: Duplicate identifier 'AuthenticatorTransport'.
bundled:libs/lib.dom.d.ts(27917,5): error TS2300: Duplicate identifier 'AutoFillAddressKind'.
bundled:libs/lib.dom.d.ts(27918,5): error TS2300: Duplicate identifier 'AutoFillBase'.
bundled:libs/lib.dom.d.ts(27919,5): error TS2300: Duplicate identifier 'AutoFillContactField'.
bundled:libs/lib.dom.d.ts(27920,5): error TS2300: Duplicate identifier 'AutoFillContactKind'.
bundled:libs/lib.dom.d.ts(27921,5): error TS2300: Duplicate identifier 'AutoFillCredentialField'.
bundled:libs/lib.dom.d.ts(27922,5): error TS2300: Duplicate identifier 'AutoFillNormalField'.
bundled:libs/lib.dom.d.ts(27923,5): error TS2300: Duplicate identifier 'AutoKeyword'.
bundled:libs/lib.dom.d.ts(27924,5): error TS2300: Duplicate identifier 'AutomationRate'.
bundled:libs/lib.dom.d.ts(27925,5): error TS2300: Duplicate identifier 'AvcBitstreamFormat'.
bundled:libs/lib.dom.d.ts(27925,5): error TS2300: Duplicate identifier 'AvcBitstreamFormat'.
bundled:libs/lib.dom.d.ts(27926,5): error TS2300: Duplicate identifier 'BinaryType'.
bundled:libs/lib.dom.d.ts(27926,5): error TS2300: Duplicate identifier 'BinaryType'.
bundled:libs/lib.dom.d.ts(27927,5): error TS2300: Duplicate identifier 'BiquadFilterType'.
bundled:libs/lib.dom.d.ts(27928,5): error TS2300: Duplicate identifier 'CSSMathOperator'.
bundled:libs/lib.dom.d.ts(27928,5): error TS2300: Duplicate identifier 'CSSMathOperator'.
bundled:libs/lib.dom.d.ts(27929,5): error TS2300: Duplicate identifier 'CSSNumericBaseType'.
bundled:libs/lib.dom.d.ts(27929,5): error TS2300: Duplicate identifier 'CSSNumericBaseType'.
bundled:libs/lib.dom.d.ts(27930,5): error TS2300: Duplicate identifier 'CanPlayTypeResult'.
bundled:libs/lib.dom.d.ts(27931,5): error TS2300: Duplicate identifier 'CanvasDirection'.
bundled:libs/lib.dom.d.ts(27931,5): error TS2300: Duplicate identifier 'CanvasDirection'.
bundled:libs/lib.dom.d.ts(27932,5): error TS2300: Duplicate identifier 'CanvasFillRule'.
bundled:libs/lib.dom.d.ts(27932,5): error TS2300: Duplicate identifier 'CanvasFillRule'.
bundled:libs/lib.dom.d.ts(27933,5): error TS2300: Duplicate identifier 'CanvasFontKerning'.
bundled:libs/lib.dom.d.ts(27933,5): error TS2300: Duplicate identifier 'CanvasFontKerning'.
bundled:libs/lib.dom.d.ts(27934,5): error TS2300: Duplicate identifier 'CanvasFontStretch'.
bundled:libs/lib.dom.d.ts(27934,5): error TS2300: Duplicate identifier 'CanvasFontStretch'.
bundled:libs/lib.dom.d.ts(27935,5): error TS2300: Duplicate identifier 'CanvasFontVariantCaps'.
bundled:libs/lib.dom.d.ts(27935,5): error TS2300: Duplicate identifier 'CanvasFontVariantCaps'.
bundled:libs/lib.dom.d.ts(27936,5): error TS2300: Duplicate identifier 'CanvasLineCap'.
bundled:libs/lib.dom.d.ts(27936,5): error TS2300: Duplicate identifier 'CanvasLineCap'.
bundled:libs/lib.dom.d.ts(27937,5): error TS2300: Duplicate identifier 'CanvasLineJoin'.
bundled:libs/lib.dom.d.ts(27937,5): error TS2300: Duplicate identifier 'CanvasLineJoin'.
bundled:libs/lib.dom.d.ts(27938,5): error TS2300: Duplicate identifier 'CanvasTextAlign'.
bundled:libs/lib.dom.d.ts(27938,5): error TS2300: Duplicate identifier 'CanvasTextAlign'.
bundled:libs/lib.dom.d.ts(27939,5): error TS2300: Duplicate identifier 'CanvasTextBaseline'.
bundled:libs/lib.dom.d.ts(27939,5): error TS2300: Duplicate identifier 'CanvasTextBaseline'.
bundled:libs/lib.dom.d.ts(27940,5): error TS2300: Duplicate identifier 'CanvasTextRendering'.
bundled:libs/lib.dom.d.ts(27940,5): error TS2300: Duplicate identifier 'CanvasTextRendering'.
bundled:libs/lib.dom.d.ts(27941,5): error TS2300: Duplicate identifier 'ChannelCountMode'.
bundled:libs/lib.dom.d.ts(27942,5): error TS2300: Duplicate identifier 'ChannelInterpretation'.
bundled:libs/lib.dom.d.ts(27943,5): error TS2300: Duplicate identifier 'ClientTypes'.
bundled:libs/lib.dom.d.ts(27943,5): error TS2300: Duplicate identifier 'ClientTypes'.
bundled:libs/lib.dom.d.ts(27944,5): error TS2300: Duplicate identifier 'CodecState'.
bundled:libs/lib.dom.d.ts(27944,5): error TS2300: Duplicate identifier 'CodecState'.
bundled:libs/lib.dom.d.ts(27945,5): error TS2300: Duplicate identifier 'ColorGamut'.
bundled:libs/lib.dom.d.ts(27945,5): error TS2300: Duplicate identifier 'ColorGamut'.
bundled:libs/lib.dom.d.ts(27946,5): error TS2300: Duplicate identifier 'ColorSpaceConversion'.
bundled:libs/lib.dom.d.ts(27946,5): error TS2300: Duplicate identifier 'ColorSpaceConversion'.
bundled:libs/lib.dom.d.ts(27947,5): error TS2300: Duplicate identifier 'CompositeOperation'.
bundled:libs/lib.dom.d.ts(27948,5): error TS2300: Duplicate identifier 'CompositeOperationOrAuto'.
bundled:libs/lib.dom.d.ts(27949,5): error TS2300: Duplicate identifier 'CompressionFormat'.
bundled:libs/lib.dom.d.ts(27949,5): error TS2300: Duplicate identifier 'CompressionFormat'.
bundled:libs/lib.dom.d.ts(27950,5): error TS2300: Duplicate identifier 'CredentialMediationRequirement'.
bundled:libs/lib.dom.d.ts(27951,5): error TS2300: Duplicate identifier 'DOMParserSupportedType'.
bundled:libs/lib.dom.d.ts(27952,5): error TS2300: Duplicate identifier 'DirectionSetting'.
bundled:libs/lib.dom.d.ts(27953,5): error TS2300: Duplicate identifier 'DisplayCaptureSurfaceType'.
bundled:libs/lib.dom.d.ts(27954,5): error TS2300: Duplicate identifier 'DistanceModelType'.
bundled:libs/lib.dom.d.ts(27955,5): error TS2300: Duplicate identifier 'DocumentReadyState'.
bundled:libs/lib.dom.d.ts(27956,5): error TS2300: Duplicate identifier 'DocumentVisibilityState'.
bundled:libs/lib.dom.d.ts(27956,5): error TS2300: Duplicate identifier 'DocumentVisibilityState'.
bundled:libs/lib.dom.d.ts(27957,5): error TS2300: Duplicate identifier 'EncodedVideoChunkType'.
bundled:libs/lib.dom.d.ts(27957,5): error TS2300: Duplicate identifier 'EncodedVideoChunkType'.
bundled:libs/lib.dom.d.ts(27958,5): error TS2300: Duplicate identifier 'EndOfStreamError'.
bundled:libs/lib.dom.d.ts(27959,5): error TS2300: Duplicate identifier 'EndingType'.
bundled:libs/lib.dom.d.ts(27959,5): error TS2300: Duplicate identifier 'EndingType'.
bundled:libs/lib.dom.d.ts(27960,5): error TS2300: Duplicate identifier 'FileSystemHandleKind'.
bundled:libs/lib.dom.d.ts(27960,5): error TS2300: Duplicate identifier 'FileSystemHandleKind'.
bundled:libs/lib.dom.d.ts(27961,5): error TS2300: Duplicate identifier 'FillMode'.
bundled:libs/lib.dom.d.ts(27962,5): error TS2300: Duplicate identifier 'FontDisplay'.
bundled:libs/lib.dom.d.ts(27962,5): error TS2300: Duplicate identifier 'FontDisplay'.
bundled:libs/lib.dom.d.ts(27963,5): error TS2300: Duplicate identifier 'FontFaceLoadStatus'.
bundled:libs/lib.dom.d.ts(27963,5): error TS2300: Duplicate identifier 'FontFaceLoadStatus'.
bundled:libs/lib.dom.d.ts(27964,5): error TS2300: Duplicate identifier 'FontFaceSetLoadStatus'.
bundled:libs/lib.dom.d.ts(27964,5): error TS2300: Duplicate identifier 'FontFaceSetLoadStatus'.
bundled:libs/lib.dom.d.ts(27965,5): error TS2300: Duplicate identifier 'FullscreenNavigationUI'.
bundled:libs/lib.dom.d.ts(27966,5): error TS2300: Duplicate identifier 'GamepadHapticEffectType'.
bundled:libs/lib.dom.d.ts(27967,5): error TS2300: Duplicate identifier 'GamepadHapticsResult'.
bundled:libs/lib.dom.d.ts(27968,5): error TS2300: Duplicate identifier 'GamepadMappingType'.
bundled:libs/lib.dom.d.ts(27969,5): error TS2300: Duplicate identifier 'GlobalCompositeOperation'.
bundled:libs/lib.dom.d.ts(27969,5): error TS2300: Duplicate identifier 'GlobalCompositeOperation'.
bundled:libs/lib.dom.d.ts(27970,5): error TS2300: Duplicate identifier 'HardwareAcceleration'.
bundled:libs/lib.dom.d.ts(27970,5): error TS2300: Duplicate identifier 'HardwareAcceleration'.
bundled:libs/lib.dom.d.ts(27971,5): error TS2300: Duplicate identifier 'HdrMetadataType'.
bundled:libs/lib.dom.d.ts(27971,5): error TS2300: Duplicate identifier 'HdrMetadataType'.
bundled:libs/lib.dom.d.ts(27972,5): error TS2300: Duplicate identifier 'HighlightType'.
bundled:libs/lib.dom.d.ts(27973,5): error TS2300: Duplicate identifier 'IDBCursorDirection'.
bundled:libs/lib.dom.d.ts(27973,5): error TS2300: Duplicate identifier 'IDBCursorDirection'.
bundled:libs/lib.dom.d.ts(27974,5): error TS2300: Duplicate identifier 'IDBRequestReadyState'.
bundled:libs/lib.dom.d.ts(27974,5): error TS2300: Duplicate identifier 'IDBRequestReadyState'.
bundled:libs/lib.dom.d.ts(27975,5): error TS2300: Duplicate identifier 'IDBTransactionDurability'.
bundled:libs/lib.dom.d.ts(27975,5): error TS2300: Duplicate identifier 'IDBTransactionDurability'.
bundled:libs/lib.dom.d.ts(27976,5): error TS2300: Duplicate identifier 'IDBTransactionMode'.
bundled:libs/lib.dom.d.ts(27976,5): error TS2300: Duplicate identifier 'IDBTransactionMode'.
bundled:libs/lib.dom.d.ts(27977,5): error TS2300: Duplicate identifier 'ImageOrientation'.
bundled:libs/lib.dom.d.ts(27977,5): error TS2300: Duplicate identifier 'ImageOrientation'.
bundled:libs/lib.dom.d.ts(27978,5): error TS2300: Duplicate identifier 'ImageSmoothingQuality'.
bundled:libs/lib.dom.d.ts(27978,5): error TS2300: Duplicate identifier 'ImageSmoothingQuality'.
bundled:libs/lib.dom.d.ts(27979,5): error TS2300: Duplicate identifier 'InsertPosition'.
bundled:libs/lib.dom.d.ts(27980,5): error TS2300: Duplicate identifier 'IterationCompositeOperation'.
bundled:libs/lib.dom.d.ts(27981,5): error TS2300: Duplicate identifier 'KeyFormat'.
bundled:libs/lib.dom.d.ts(27981,5): error TS2300: Duplicate identifier 'KeyFormat'.
bundled:libs/lib.dom.d.ts(27982,5): error TS2300: Duplicate identifier 'KeyType'.
bundled:libs/lib.dom.d.ts(27982,5): error TS2300: Duplicate identifier 'KeyType'.
bundled:libs/lib.dom.d.ts(27983,5): error TS2300: Duplicate identifier 'KeyUsage'.
bundled:libs/lib.dom.d.ts(27983,5): error TS2300: Duplicate identifier 'KeyUsage'.
bundled:libs/lib.dom.d.ts(27984,5): error TS2300: Duplicate identifier 'LatencyMode'.
bundled:libs/lib.dom.d.ts(27984,5): error TS2300: Duplicate identifier 'LatencyMode'.
bundled:libs/lib.dom.d.ts(27985,5): error TS2300: Duplicate identifier 'LineAlignSetting'.
bundled:libs/lib.dom.d.ts(27986,5): error TS2300: Duplicate identifier 'LockMode'.
bundled:libs/lib.dom.d.ts(27986,5): error TS2300: Duplicate identifier 'LockMode'.
bundled:libs/lib.dom.d.ts(27987,5): error TS2300: Duplicate identifier 'MIDIPortConnectionState'.
bundled:libs/lib.dom.d.ts(27988,5): error TS2300: Duplicate identifier 'MIDIPortDeviceState'.
bundled:libs/lib.dom.d.ts(27989,5): error TS2300: Duplicate identifier 'MIDIPortType'.
bundled:libs/lib.dom.d.ts(27990,5): error TS2300: Duplicate identifier 'MediaDecodingType'.
bundled:libs/lib.dom.d.ts(27990,5): error TS2300: Duplicate identifier 'MediaDecodingType'.
bundled:libs/lib.dom.d.ts(27991,5): error TS2300: Duplicate identifier 'MediaDeviceKind'.
bundled:libs/lib.dom.d.ts(27992,5): error TS2300: Duplicate identifier 'MediaEncodingType'.
bundled:libs/lib.dom.d.ts(27992,5): error TS2300: Duplicate identifier 'MediaEncodingType'.
bundled:libs/lib.dom.d.ts(27993,5): error TS2300: Duplicate identifier 'MediaKeyMessageType'.
bundled:libs/lib.dom.d.ts(27994,5): error TS2300: Duplicate identifier 'MediaKeySessionClosedReason'.
bundled:libs/lib.dom.d.ts(27995,5): error TS2300: Duplicate identifier 'MediaKeySessionType'.
bundled:libs/lib.dom.d.ts(27996,5): error TS2300: Duplicate identifier 'MediaKeyStatus'.
bundled:libs/lib.dom.d.ts(27997,5): error TS2300: Duplicate identifier 'MediaKeysRequirement'.
bundled:libs/lib.dom.d.ts(27998,5): error TS2300: Duplicate identifier 'MediaSessionAction'.
bundled:libs/lib.dom.d.ts(27999,5): error TS2300: Duplicate identifier 'MediaSessionPlaybackState'.
bundled:libs/lib.dom.d.ts(28000,5): error TS2300: Duplicate identifier 'MediaStreamTrackState'.
bundled:libs/lib.dom.d.ts(28001,5): error TS2300: Duplicate identifier 'NavigationTimingType'.
bundled:libs/lib.dom.d.ts(28002,5): error TS2300: Duplicate identifier 'NotificationDirection'.
bundled:libs/lib.dom.d.ts(28002,5): error TS2300: Duplicate identifier 'NotificationDirection'.
bundled:libs/lib.dom.d.ts(28003,5): error TS2300: Duplicate identifier 'NotificationPermission'.
bundled:libs/lib.dom.d.ts(28003,5): error TS2300: Duplicate identifier 'NotificationPermission'.
bundled:libs/lib.dom.d.ts(28004,5): error TS2300: Duplicate identifier 'OffscreenRenderingContextId'.
bundled:libs/lib.dom.d.ts(28004,5): error TS2300: Duplicate identifier 'OffscreenRenderingContextId'.
bundled:libs/lib.dom.d.ts(28005,5): error TS2300: Duplicate identifier 'OrientationType'.
bundled:libs/lib.dom.d.ts(28006,5): error TS2300: Duplicate identifier 'OscillatorType'.
bundled:libs/lib.dom.d.ts(28007,5): error TS2300: Duplicate identifier 'OverSampleType'.
bundled:libs/lib.dom.d.ts(28008,5): error TS2300: Duplicate identifier 'PanningModelType'.
bundled:libs/lib.dom.d.ts(28009,5): error TS2300: Duplicate identifier 'PaymentComplete'.
bundled:libs/lib.dom.d.ts(28010,5): error TS2300: Duplicate identifier 'PermissionName'.
bundled:libs/lib.dom.d.ts(28010,5): error TS2300: Duplicate identifier 'PermissionName'.
bundled:libs/lib.dom.d.ts(28011,5): error TS2300: Duplicate identifier 'PermissionState'.
bundled:libs/lib.dom.d.ts(28011,5): error TS2300: Duplicate identifier 'PermissionState'.
bundled:libs/lib.dom.d.ts(28012,5): error TS2300: Duplicate identifier 'PlaybackDirection'.
bundled:libs/lib.dom.d.ts(28013,5): error TS2300: Duplicate identifier 'PositionAlignSetting'.
bundled:libs/lib.dom.d.ts(28014,5): error TS2300: Duplicate identifier 'PredefinedColorSpace'.
bundled:libs/lib.dom.d.ts(28014,5): error TS2300: Duplicate identifier 'PredefinedColorSpace'.
bundled:libs/lib.dom.d.ts(28015,5): error TS2300: Duplicate identifier 'PremultiplyAlpha'.
bundled:libs/lib.dom.d.ts(28015,5): error TS2300: Duplicate identifier 'PremultiplyAlpha'.
bundled:libs/lib.dom.d.ts(28016,5): error TS2300: Duplicate identifier 'PresentationStyle'.
bundled:libs/lib.dom.d.ts(28017,5): error TS2300: Duplicate identifier 'PublicKeyCredentialType'.
bundled:libs/lib.dom.d.ts(28018,5): error TS2300: Duplicate identifier 'PushEncryptionKeyName'.
bundled:libs/lib.dom.d.ts(28018,5): error TS2300: Duplicate identifier 'PushEncryptionKeyName'.
bundled:libs/lib.dom.d.ts(28019,5): error TS2300: Duplicate identifier 'RTCBundlePolicy'.
bundled:libs/lib.dom.d.ts(28020,5): error TS2300: Duplicate identifier 'RTCDataChannelState'.
bundled:libs/lib.dom.d.ts(28021,5): error TS2300: Duplicate identifier 'RTCDegradationPreference'.
bundled:libs/lib.dom.d.ts(28022,5): error TS2300: Duplicate identifier 'RTCDtlsTransportState'.
bundled:libs/lib.dom.d.ts(28023,5): error TS2300: Duplicate identifier 'RTCEncodedVideoFrameType'.
bundled:libs/lib.dom.d.ts(28023,5): error TS2300: Duplicate identifier 'RTCEncodedVideoFrameType'.
bundled:libs/lib.dom.d.ts(28024,5): error TS2300: Duplicate identifier 'RTCErrorDetailType'.
bundled:libs/lib.dom.d.ts(28025,5): error TS2300: Duplicate identifier 'RTCIceCandidateType'.
bundled:libs/lib.dom.d.ts(28026,5): error TS2300: Duplicate identifier 'RTCIceComponent'.
bundled:libs/lib.dom.d.ts(28027,5): error TS2300: Duplicate identifier 'RTCIceConnectionState'.
bundled:libs/lib.dom.d.ts(28028,5): error TS2300: Duplicate identifier 'RTCIceGathererState'.
bundled:libs/lib.dom.d.ts(28029,5): error TS2300: Duplicate identifier 'RTCIceGatheringState'.
bundled:libs/lib.dom.d.ts(28030,5): error TS2300: Duplicate identifier 'RTCIceProtocol'.
bundled:libs/lib.dom.d.ts(28031,5): error TS2300: Duplicate identifier 'RTCIceTcpCandidateType'.
bundled:libs/lib.dom.d.ts(28032,5): error TS2300: Duplicate identifier 'RTCIceTransportPolicy'.
bundled:libs/lib.dom.d.ts(28033,5): error TS2300: Duplicate identifier 'RTCIceTransportState'.
bundled:libs/lib.dom.d.ts(28034,5): error TS2300: Duplicate identifier 'RTCPeerConnectionState'.
bundled:libs/lib.dom.d.ts(28035,5): error TS2300: Duplicate identifier 'RTCPriorityType'.
bundled:libs/lib.dom.d.ts(28036,5): error TS2300: Duplicate identifier 'RTCRtcpMuxPolicy'.
bundled:libs/lib.dom.d.ts(28037,5): error TS2300: Duplicate identifier 'RTCRtpTransceiverDirection'.
bundled:libs/lib.dom.d.ts(28038,5): error TS2300: Duplicate identifier 'RTCSctpTransportState'.
bundled:libs/lib.dom.d.ts(28039,5): error TS2300: Duplicate identifier 'RTCSdpType'.
bundled:libs/lib.dom.d.ts(28040,5): error TS2300: Duplicate identifier 'RTCSignalingState'.
bundled:libs/lib.dom.d.ts(28041,5): error TS2300: Duplicate identifier 'RTCStatsIceCandidatePairState'.
bundled:libs/lib.dom.d.ts(28042,5): error TS2300: Duplicate identifier 'RTCStatsType'.
bundled:libs/lib.dom.d.ts(28043,5): error TS2300: Duplicate identifier 'ReadableStreamReaderMode'.
bundled:libs/lib.dom.d.ts(28043,5): error TS2300: Duplicate identifier 'ReadableStreamReaderMode'.
bundled:libs/lib.dom.d.ts(28044,5): error TS2300: Duplicate identifier 'ReadableStreamType'.
bundled:libs/lib.dom.d.ts(28044,5): error TS2300: Duplicate identifier 'ReadableStreamType'.
bundled:libs/lib.dom.d.ts(28045,5): error TS2300: Duplicate identifier 'ReadyState'.
bundled:libs/lib.dom.d.ts(28046,5): error TS2300: Duplicate identifier 'RecordingState'.
bundled:libs/lib.dom.d.ts(28047,5): error TS2300: Duplicate identifier 'ReferrerPolicy'.
bundled:libs/lib.dom.d.ts(28047,5): error TS2300: Duplicate identifier 'ReferrerPolicy'.
bundled:libs/lib.dom.d.ts(28048,5): error TS2300: Duplicate identifier 'RemotePlaybackState'.
bundled:libs/lib.dom.d.ts(28049,5): error TS2300: Duplicate identifier 'RequestCache'.
bundled:libs/lib.dom.d.ts(28049,5): error TS2300: Duplicate identifier 'RequestCache'.
bundled:libs/lib.dom.d.ts(28050,5): error TS2300: Duplicate identifier 'RequestCredentials'.
bundled:libs/lib.dom.d.ts(28050,5): error TS2300: Duplicate identifier 'RequestCredentials'.
bundled:libs/lib.dom.d.ts(28051,5): error TS2300: Duplicate identifier 'RequestDestination'.
bundled:libs/lib.dom.d.ts(28051,5): error TS2300: Duplicate identifier 'RequestDestination'.
bundled:libs/lib.dom.d.ts(28052,5): error TS2300: Duplicate identifier 'RequestMode'.
bundled:libs/lib.dom.d.ts(28052,5): error TS2300: Duplicate identifier 'RequestMode'.
bundled:libs/lib.dom.d.ts(28053,5): error TS2300: Duplicate identifier 'RequestPriority'.
bundled:libs/lib.dom.d.ts(28053,5): error TS2300: Duplicate identifier 'RequestPriority'.
bundled:libs/lib.dom.d.ts(28054,5): error TS2300: Duplicate identifier 'RequestRedirect'.
bundled:libs/lib.dom.d.ts(28054,5): error TS2300: Duplicate identifier 'RequestRedirect'.
bundled:libs/lib.dom.d.ts(28055,5): error TS2300: Duplicate identifier 'ResidentKeyRequirement'.
bundled:libs/lib.dom.d.ts(28056,5): error TS2300: Duplicate identifier 'ResizeObserverBoxOptions'.
bundled:libs/lib.dom.d.ts(28057,5): error TS2300: Duplicate identifier 'ResizeQuality'.
bundled:libs/lib.dom.d.ts(28057,5): error TS2300: Duplicate identifier 'ResizeQuality'.
bundled:libs/lib.dom.d.ts(28058,5): error TS2300: Duplicate identifier 'ResponseType'.
bundled:libs/lib.dom.d.ts(28058,5): error TS2300: Duplicate identifier 'ResponseType'.
bundled:libs/lib.dom.d.ts(28059,5): error TS2300: Duplicate identifier 'ScrollBehavior'.
bundled:libs/lib.dom.d.ts(28060,5): error TS2300: Duplicate identifier 'ScrollLogicalPosition'.
bundled:libs/lib.dom.d.ts(28061,5): error TS2300: Duplicate identifier 'ScrollRestoration'.
bundled:libs/lib.dom.d.ts(28062,5): error TS2300: Duplicate identifier 'ScrollSetting'.
bundled:libs/lib.dom.d.ts(28063,5): error TS2300: Duplicate identifier 'SecurityPolicyViolationEventDisposition'.
bundled:libs/lib.dom.d.ts(28063,5): error TS2300: Duplicate identifier 'SecurityPolicyViolationEventDisposition'.
bundled:libs/lib.dom.d.ts(28064,5): error TS2300: Duplicate identifier 'SelectionMode'.
bundled:libs/lib.dom.d.ts(28065,5): error TS2300: Duplicate identifier 'ServiceWorkerState'.
bundled:libs/lib.dom.d.ts(28065,5): error TS2300: Duplicate identifier 'ServiceWorkerState'.
bundled:libs/lib.dom.d.ts(28066,5): error TS2300: Duplicate identifier 'ServiceWorkerUpdateViaCache'.
bundled:libs/lib.dom.d.ts(28066,5): error TS2300: Duplicate identifier 'ServiceWorkerUpdateViaCache'.
bundled:libs/lib.dom.d.ts(28067,5): error TS2300: Duplicate identifier 'ShadowRootMode'.
bundled:libs/lib.dom.d.ts(28068,5): error TS2300: Duplicate identifier 'SlotAssignmentMode'.
bundled:libs/lib.dom.d.ts(28069,5): error TS2300: Duplicate identifier 'SpeechSynthesisErrorCode'.
bundled:libs/lib.dom.d.ts(28070,5): error TS2300: Duplicate identifier 'TextTrackKind'.
bundled:libs/lib.dom.d.ts(28071,5): error TS2300: Duplicate identifier 'TextTrackMode'.
bundled:libs/lib.dom.d.ts(28072,5): error TS2300: Duplicate identifier 'TouchType'.
bundled:libs/lib.dom.d.ts(28073,5): error TS2300: Duplicate identifier 'TransferFunction'.
bundled:libs/lib.dom.d.ts(28073,5): error TS2300: Duplicate identifier 'TransferFunction'.
bundled:libs/lib.dom.d.ts(28074,5): error TS2300: Duplicate identifier 'UserVerificationRequirement'.
bundled:libs/lib.dom.d.ts(28075,5): error TS2300: Duplicate identifier 'VideoColorPrimaries'.
bundled:libs/lib.dom.d.ts(28075,5): error TS2300: Duplicate identifier 'VideoColorPrimaries'.
bundled:libs/lib.dom.d.ts(28076,5): error TS2300: Duplicate identifier 'VideoEncoderBitrateMode'.
bundled:libs/lib.dom.d.ts(28076,5): error TS2300: Duplicate identifier 'VideoEncoderBitrateMode'.
bundled:libs/lib.dom.d.ts(28077,5): error TS2300: Duplicate identifier 'VideoFacingModeEnum'.
bundled:libs/lib.dom.d.ts(28078,5): error TS2300: Duplicate identifier 'VideoMatrixCoefficients'.
bundled:libs/lib.dom.d.ts(28078,5): error TS2300: Duplicate identifier 'VideoMatrixCoefficients'.
bundled:libs/lib.dom.d.ts(28079,5): error TS2300: Duplicate identifier 'VideoPixelFormat'.
bundled:libs/lib.dom.d.ts(28079,5): error TS2300: Duplicate identifier 'VideoPixelFormat'.
bundled:libs/lib.dom.d.ts(28080,5): error TS2300: Duplicate identifier 'VideoTransferCharacteristics'.
bundled:libs/lib.dom.d.ts(28080,5): error TS2300: Duplicate identifier 'VideoTransferCharacteristics'.
bundled:libs/lib.dom.d.ts(28081,5): error TS2300: Duplicate identifier 'WakeLockType'.
bundled:libs/lib.dom.d.ts(28082,5): error TS2300: Duplicate identifier 'WebGLPowerPreference'.
bundled:libs/lib.dom.d.ts(28082,5): error TS2300: Duplicate identifier 'WebGLPowerPreference'.
bundled:libs/lib.dom.d.ts(28083,5): error TS2300: Duplicate identifier 'WebTransportCongestionControl'.
bundled:libs/lib.dom.d.ts(28083,5): error TS2300: Duplicate identifier 'WebTransportCongestionControl'.
bundled:libs/lib.dom.d.ts(28084,5): error TS2300: Duplicate identifier 'WebTransportErrorSource'.
bundled:libs/lib.dom.d.ts(28084,5): error TS2300: Duplicate identifier 'WebTransportErrorSource'.
bundled:libs/lib.dom.d.ts(28085,5): error TS2300: Duplicate identifier 'WorkerType'.
bundled:libs/lib.dom.d.ts(28085,5): error TS2300: Duplicate identifier 'WorkerType'.
bundled:libs/lib.dom.d.ts(28086,5): error TS2300: Duplicate identifier 'WriteCommandType'.
bundled:libs/lib.dom.d.ts(28086,5): error TS2300: Duplicate identifier 'WriteCommandType'.
bundled:libs/lib.dom.d.ts(28087,5): error TS2300: Duplicate identifier 'XMLHttpRequestResponseType'.
bundled:libs/lib.dom.d.ts(28087,5): error TS2300: Duplicate identifier 'XMLHttpRequestResponseType'.
bundled:libs/lib.es2015.iterable.d.ts(39,5): error TS2300: Duplicate identifier 'IteratorResult'.
bundled:libs/lib.es2015.iterable.d.ts(70,5): error TS2300: Duplicate identifier 'BuiltinIteratorReturn'.
bundled:libs/lib.es2017.intl.d.ts(34,9): error TS2300: Duplicate identifier 'DateTimeFormatPartTypes'.
bundled:libs/lib.es2018.intl.d.ts(21,9): error TS2300: Duplicate identifier 'LDMLPluralRule'.
bundled:libs/lib.es2018.intl.d.ts(22,9): error TS2300: Duplicate identifier 'PluralRuleType'.
bundled:libs/lib.es2018.intl.d.ts(45,14): error TS2451: Cannot redeclare block-scoped variable 'PluralRules'.
bundled:libs/lib.es2018.intl.d.ts(56,10): error TS2451: Cannot redeclare block-scoped variable 'PluralRules'.
bundled:libs/lib.es2018.intl.d.ts(73,9): error TS2300: Duplicate identifier 'NumberFormatPartTypes'.
bundled:libs/lib.es2019.array.d.ts(19,5): error TS2300: Duplicate identifier 'FlatArray'.
bundled:libs/lib.es2020.intl.d.ts(28,9): error TS2300: Duplicate identifier 'UnicodeBCP47LocaleIdentifier'.
bundled:libs/lib.es2020.intl.d.ts(35,9): error TS2300: Duplicate identifier 'RelativeTimeFormatUnit'.
bundled:libs/lib.es2020.intl.d.ts(62,9): error TS2300: Duplicate identifier 'RelativeTimeFormatUnitSingular'.
bundled:libs/lib.es2020.intl.d.ts(77,9): error TS2300: Duplicate identifier 'RelativeTimeFormatLocaleMatcher'.
bundled:libs/lib.es2020.intl.d.ts(84,9): error TS2300: Duplicate identifier 'RelativeTimeFormatNumeric'.
bundled:libs/lib.es2020.intl.d.ts(91,9): error TS2300: Duplicate identifier 'RelativeTimeFormatStyle'.
bundled:libs/lib.es2020.intl.d.ts(98,9): error TS2300: Duplicate identifier 'LocalesArgument'.
bundled:libs/lib.es2020.intl.d.ts(135,9): error TS2300: Duplicate identifier 'RelativeTimeFormatPart'.
bundled:libs/lib.es2020.intl.d.ts(146,14): error TS2451: Cannot redeclare block-scoped variable 'RelativeTimeFormat'.
bundled:libs/lib.es2020.intl.d.ts(200,10): error TS2451: Cannot redeclare block-scoped variable 'RelativeTimeFormat'.
bundled:libs/lib.es2020.intl.d.ts(259,9): error TS2300: Duplicate identifier 'NumberFormatOptionsSignDisplay'.
bundled:libs/lib.es2020.intl.d.ts(299,9): error TS2300: Duplicate identifier 'LocaleHourCycleKey'.
bundled:libs/lib.es2020.intl.d.ts(300,9): error TS2300: Duplicate identifier 'LocaleCollationCaseFirst'.
bundled:libs/lib.es2020.intl.d.ts(325,14): error TS2451: Cannot redeclare block-scoped variable 'Locale'.
bundled:libs/lib.es2020.intl.d.ts(352,10): error TS2451: Cannot redeclare block-scoped variable 'Locale'.
bundled:libs/lib.es2020.intl.d.ts(356,9): error TS2300: Duplicate identifier 'DisplayNamesFallback'.
bundled:libs/lib.es2020.intl.d.ts(360,9): error TS2300: Duplicate identifier 'DisplayNamesType'.
bundled:libs/lib.es2020.intl.d.ts(368,9): error TS2300: Duplicate identifier 'DisplayNamesLanguageDisplay'.
bundled:libs/lib.es2020.intl.d.ts(388,14): error TS2451: Cannot redeclare block-scoped variable 'DisplayNames'.
bundled:libs/lib.es2020.intl.d.ts(420,10): error TS2451: Cannot redeclare block-scoped variable 'DisplayNames'.
bundled:libs/lib.es2020.promise.d.ts(29,5): error TS2300: Duplicate identifier 'PromiseSettledResult'.
bundled:libs/lib.es2021.intl.d.ts(55,9): error TS2300: Duplicate identifier 'ListFormatLocaleMatcher'.
bundled:libs/lib.es2021.intl.d.ts(62,9): error TS2300: Duplicate identifier 'ListFormatType'.
bundled:libs/lib.es2021.intl.d.ts(69,9): error TS2300: Duplicate identifier 'ListFormatStyle'.
bundled:libs/lib.es2021.intl.d.ts(91,14): error TS2451: Cannot redeclare block-scoped variable 'ListFormat'.
bundled:libs/lib.es2021.intl.d.ts(128,10): error TS2451: Cannot redeclare block-scoped variable 'ListFormat'.
bundled:libs/lib.es2022.intl.d.ts(32,14): error TS2451: Cannot redeclare block-scoped variable 'Segmenter'.
bundled:libs/lib.es2022.intl.d.ts(79,10): error TS2451: Cannot redeclare block-scoped variable 'Segmenter'.
bundled:libs/lib.es2023.intl.d.ts(48,9): error TS2300: Duplicate identifier 'StringNumericLiteral'.
bundled:libs/lib.es5.d.ts(108,13): error TS2300: Duplicate identifier 'PropertyKey'.
bundled:libs/lib.es5.d.ts(324,5): error TS2300: Duplicate identifier 'ThisParameterType'.
bundled:libs/lib.es5.d.ts(329,5): error TS2300: Duplicate identifier 'OmitThisParameter'.
bundled:libs/lib.es5.d.ts(1528,13): error TS2300: Duplicate identifier 'PromiseConstructorLike'.
bundled:libs/lib.es5.d.ts(1563,5): error TS2300: Duplicate identifier 'Awaited'.
bundled:libs/lib.es5.d.ts(1578,5): error TS2300: Duplicate identifier 'Partial'.
bundled:libs/lib.es5.d.ts(1585,5): error TS2300: Duplicate identifier 'Required'.
bundled:libs/lib.es5.d.ts(1592,5): error TS2300: Duplicate identifier 'Readonly'.
bundled:libs/lib.es5.d.ts(1599,5): error TS2300: Duplicate identifier 'Pick'.
bundled:libs/lib.es5.d.ts(1606,5): error TS2300: Duplicate identifier 'Record'.
bundled:libs/lib.es5.d.ts(1613,5): error TS2300: Duplicate identifier 'Exclude'.
bundled:libs/lib.es5.d.ts(1618,5): error TS2300: Duplicate identifier 'Extract'.
bundled:libs/lib.es5.d.ts(1623,5): error TS2300: Duplicate identifier 'Omit'.
bundled:libs/lib.es5.d.ts(1628,5): error TS2300: Duplicate identifier 'NonNullable'.
bundled:libs/lib.es5.d.ts(1633,5): error TS2300: Duplicate identifier 'Parameters'.
bundled:libs/lib.es5.d.ts(1638,5): error TS2300: Duplicate identifier 'ConstructorParameters'.
bundled:libs/lib.es5.d.ts(1643,5): error TS2300: Duplicate identifier 'ReturnType'.
bundled:libs/lib.es5.d.ts(1648,5): error TS2300: Duplicate identifier 'InstanceType'.
bundled:libs/lib.es5.d.ts(1653,5): error TS2300: Duplicate identifier 'Uppercase'.
bundled:libs/lib.es5.d.ts(1658,5): error TS2300: Duplicate identifier 'Lowercase'.
bundled:libs/lib.es5.d.ts(1663,5): error TS2300: Duplicate identifier 'Capitalize'.
bundled:libs/lib.es5.d.ts(1668,5): error TS2300: Duplicate identifier 'Uncapitalize'.
bundled:libs/lib.es5.d.ts(1673,5): error TS2300: Duplicate identifier 'NoInfer'.
bundled:libs/lib.es5.d.ts(1687,5): error TS2300: Duplicate identifier 'WeakKey'.
bundled:libs/lib.es5.d.ts(1713,5): error TS2300: Duplicate identifier 'ArrayBufferLike'.
bundled:libs/lib.es5.d.ts(4442,9): error TS2300: Duplicate identifier 'NumberFormatOptionsStyle'.
bundled:libs/lib.es5.d.ts(4450,9): error TS2300: Duplicate identifier 'NumberFormatOptionsCurrencyDisplay'.
bundled:libs/lib.es5.d.ts(4454,9): error TS2300: Duplicate identifier 'NumberFormatOptionsUseGrouping'.
bundled:libs/lib.es5.d.ts(4455,9): error TS2300: Duplicate identifier 'ResolvedNumberFormatOptionsUseGrouping'.
bundled:libs/lib.scripthost.d.ts(227,14): error TS2300: Duplicate identifier 'SafeArray'.
bundled:libs/lib.scripthost.d.ts(311,14): error TS2300: Duplicate identifier 'VarDate'.


==== /src/foo.ts (1 errors) ====
    const x: number = "";
          ~
!!! error TS2322: Type '""' is not assignable to type 'number'.
    
==== /src/bar.ts (1 errors) ====
    const y: string = 1;
          ~
!!! error TS2322: Type '1' is not assignable to type 'string'.